/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.gate_ws;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-06")
public class PullSessionListResp implements org.apache.thrift.TBase<PullSessionListResp, PullSessionListResp._Fields>, java.io.Serializable, Cloneable, Comparable<PullSessionListResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PullSessionListResp");

  private static final org.apache.thrift.protocol.TField MSG_INCR_FIELD_DESC = new org.apache.thrift.protocol.TField("msgIncr", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errMsg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_CHATS_FIELD_DESC = new org.apache.thrift.protocol.TField("groupChats", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SINGLE_CHATS_FIELD_DESC = new org.apache.thrift.protocol.TField("singleChats", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField GROUP_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("groupSettings", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField SINGLE_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("singleSettings", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PullSessionListRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PullSessionListRespTupleSchemeFactory());
  }

  public int msgIncr; // required
  public int errCode; // required
  public String errMsg; // required
  public List<thrift_gen.oasis_im.rpc.GroupInfo> groupChats; // required
  public List<thrift_gen.oasis_im.rpc.SingleChat> singleChats; // required
  public Map<String,String> groupSettings; // required
  public Map<String,String> singleSettings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_INCR((short)1, "msgIncr"),
    ERR_CODE((short)2, "errCode"),
    ERR_MSG((short)3, "errMsg"),
    GROUP_CHATS((short)4, "groupChats"),
    SINGLE_CHATS((short)5, "singleChats"),
    GROUP_SETTINGS((short)6, "groupSettings"),
    SINGLE_SETTINGS((short)7, "singleSettings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_INCR
          return MSG_INCR;
        case 2: // ERR_CODE
          return ERR_CODE;
        case 3: // ERR_MSG
          return ERR_MSG;
        case 4: // GROUP_CHATS
          return GROUP_CHATS;
        case 5: // SINGLE_CHATS
          return SINGLE_CHATS;
        case 6: // GROUP_SETTINGS
          return GROUP_SETTINGS;
        case 7: // SINGLE_SETTINGS
          return SINGLE_SETTINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGINCR_ISSET_ID = 0;
  private static final int __ERRCODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_INCR, new org.apache.thrift.meta_data.FieldMetaData("msgIncr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_CHATS, new org.apache.thrift.meta_data.FieldMetaData("groupChats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.oasis_im.rpc.GroupInfo.class))));
    tmpMap.put(_Fields.SINGLE_CHATS, new org.apache.thrift.meta_data.FieldMetaData("singleChats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.oasis_im.rpc.SingleChat.class))));
    tmpMap.put(_Fields.GROUP_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("groupSettings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SINGLE_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("singleSettings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PullSessionListResp.class, metaDataMap);
  }

  public PullSessionListResp() {
  }

  public PullSessionListResp(
    int msgIncr,
    int errCode,
    String errMsg,
    List<thrift_gen.oasis_im.rpc.GroupInfo> groupChats,
    List<thrift_gen.oasis_im.rpc.SingleChat> singleChats,
    Map<String,String> groupSettings,
    Map<String,String> singleSettings)
  {
    this();
    this.msgIncr = msgIncr;
    setMsgIncrIsSet(true);
    this.errCode = errCode;
    setErrCodeIsSet(true);
    this.errMsg = errMsg;
    this.groupChats = groupChats;
    this.singleChats = singleChats;
    this.groupSettings = groupSettings;
    this.singleSettings = singleSettings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PullSessionListResp(PullSessionListResp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgIncr = other.msgIncr;
    this.errCode = other.errCode;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
    if (other.isSetGroupChats()) {
      List<thrift_gen.oasis_im.rpc.GroupInfo> __this__groupChats = new ArrayList<thrift_gen.oasis_im.rpc.GroupInfo>(other.groupChats.size());
      for (thrift_gen.oasis_im.rpc.GroupInfo other_element : other.groupChats) {
        __this__groupChats.add(new thrift_gen.oasis_im.rpc.GroupInfo(other_element));
      }
      this.groupChats = __this__groupChats;
    }
    if (other.isSetSingleChats()) {
      List<thrift_gen.oasis_im.rpc.SingleChat> __this__singleChats = new ArrayList<thrift_gen.oasis_im.rpc.SingleChat>(other.singleChats.size());
      for (thrift_gen.oasis_im.rpc.SingleChat other_element : other.singleChats) {
        __this__singleChats.add(new thrift_gen.oasis_im.rpc.SingleChat(other_element));
      }
      this.singleChats = __this__singleChats;
    }
    if (other.isSetGroupSettings()) {
      Map<String,String> __this__groupSettings = new HashMap<String,String>(other.groupSettings);
      this.groupSettings = __this__groupSettings;
    }
    if (other.isSetSingleSettings()) {
      Map<String,String> __this__singleSettings = new HashMap<String,String>(other.singleSettings);
      this.singleSettings = __this__singleSettings;
    }
  }

  public PullSessionListResp deepCopy() {
    return new PullSessionListResp(this);
  }

  @Override
  public void clear() {
    setMsgIncrIsSet(false);
    this.msgIncr = 0;
    setErrCodeIsSet(false);
    this.errCode = 0;
    this.errMsg = null;
    this.groupChats = null;
    this.singleChats = null;
    this.groupSettings = null;
    this.singleSettings = null;
  }

  public int getMsgIncr() {
    return this.msgIncr;
  }

  public PullSessionListResp setMsgIncr(int msgIncr) {
    this.msgIncr = msgIncr;
    setMsgIncrIsSet(true);
    return this;
  }

  public void unsetMsgIncr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGINCR_ISSET_ID);
  }

  /** Returns true if field msgIncr is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgIncr() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGINCR_ISSET_ID);
  }

  public void setMsgIncrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGINCR_ISSET_ID, value);
  }

  public int getErrCode() {
    return this.errCode;
  }

  public PullSessionListResp setErrCode(int errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  public String getErrMsg() {
    return this.errMsg;
  }

  public PullSessionListResp setErrMsg(String errMsg) {
    this.errMsg = errMsg;
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public int getGroupChatsSize() {
    return (this.groupChats == null) ? 0 : this.groupChats.size();
  }

  public java.util.Iterator<thrift_gen.oasis_im.rpc.GroupInfo> getGroupChatsIterator() {
    return (this.groupChats == null) ? null : this.groupChats.iterator();
  }

  public void addToGroupChats(thrift_gen.oasis_im.rpc.GroupInfo elem) {
    if (this.groupChats == null) {
      this.groupChats = new ArrayList<thrift_gen.oasis_im.rpc.GroupInfo>();
    }
    this.groupChats.add(elem);
  }

  public List<thrift_gen.oasis_im.rpc.GroupInfo> getGroupChats() {
    return this.groupChats;
  }

  public PullSessionListResp setGroupChats(List<thrift_gen.oasis_im.rpc.GroupInfo> groupChats) {
    this.groupChats = groupChats;
    return this;
  }

  public void unsetGroupChats() {
    this.groupChats = null;
  }

  /** Returns true if field groupChats is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupChats() {
    return this.groupChats != null;
  }

  public void setGroupChatsIsSet(boolean value) {
    if (!value) {
      this.groupChats = null;
    }
  }

  public int getSingleChatsSize() {
    return (this.singleChats == null) ? 0 : this.singleChats.size();
  }

  public java.util.Iterator<thrift_gen.oasis_im.rpc.SingleChat> getSingleChatsIterator() {
    return (this.singleChats == null) ? null : this.singleChats.iterator();
  }

  public void addToSingleChats(thrift_gen.oasis_im.rpc.SingleChat elem) {
    if (this.singleChats == null) {
      this.singleChats = new ArrayList<thrift_gen.oasis_im.rpc.SingleChat>();
    }
    this.singleChats.add(elem);
  }

  public List<thrift_gen.oasis_im.rpc.SingleChat> getSingleChats() {
    return this.singleChats;
  }

  public PullSessionListResp setSingleChats(List<thrift_gen.oasis_im.rpc.SingleChat> singleChats) {
    this.singleChats = singleChats;
    return this;
  }

  public void unsetSingleChats() {
    this.singleChats = null;
  }

  /** Returns true if field singleChats is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleChats() {
    return this.singleChats != null;
  }

  public void setSingleChatsIsSet(boolean value) {
    if (!value) {
      this.singleChats = null;
    }
  }

  public int getGroupSettingsSize() {
    return (this.groupSettings == null) ? 0 : this.groupSettings.size();
  }

  public void putToGroupSettings(String key, String val) {
    if (this.groupSettings == null) {
      this.groupSettings = new HashMap<String,String>();
    }
    this.groupSettings.put(key, val);
  }

  public Map<String,String> getGroupSettings() {
    return this.groupSettings;
  }

  public PullSessionListResp setGroupSettings(Map<String,String> groupSettings) {
    this.groupSettings = groupSettings;
    return this;
  }

  public void unsetGroupSettings() {
    this.groupSettings = null;
  }

  /** Returns true if field groupSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupSettings() {
    return this.groupSettings != null;
  }

  public void setGroupSettingsIsSet(boolean value) {
    if (!value) {
      this.groupSettings = null;
    }
  }

  public int getSingleSettingsSize() {
    return (this.singleSettings == null) ? 0 : this.singleSettings.size();
  }

  public void putToSingleSettings(String key, String val) {
    if (this.singleSettings == null) {
      this.singleSettings = new HashMap<String,String>();
    }
    this.singleSettings.put(key, val);
  }

  public Map<String,String> getSingleSettings() {
    return this.singleSettings;
  }

  public PullSessionListResp setSingleSettings(Map<String,String> singleSettings) {
    this.singleSettings = singleSettings;
    return this;
  }

  public void unsetSingleSettings() {
    this.singleSettings = null;
  }

  /** Returns true if field singleSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleSettings() {
    return this.singleSettings != null;
  }

  public void setSingleSettingsIsSet(boolean value) {
    if (!value) {
      this.singleSettings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSG_INCR:
      if (value == null) {
        unsetMsgIncr();
      } else {
        setMsgIncr((Integer)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((Integer)value);
      }
      break;

    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;

    case GROUP_CHATS:
      if (value == null) {
        unsetGroupChats();
      } else {
        setGroupChats((List<thrift_gen.oasis_im.rpc.GroupInfo>)value);
      }
      break;

    case SINGLE_CHATS:
      if (value == null) {
        unsetSingleChats();
      } else {
        setSingleChats((List<thrift_gen.oasis_im.rpc.SingleChat>)value);
      }
      break;

    case GROUP_SETTINGS:
      if (value == null) {
        unsetGroupSettings();
      } else {
        setGroupSettings((Map<String,String>)value);
      }
      break;

    case SINGLE_SETTINGS:
      if (value == null) {
        unsetSingleSettings();
      } else {
        setSingleSettings((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_INCR:
      return getMsgIncr();

    case ERR_CODE:
      return getErrCode();

    case ERR_MSG:
      return getErrMsg();

    case GROUP_CHATS:
      return getGroupChats();

    case SINGLE_CHATS:
      return getSingleChats();

    case GROUP_SETTINGS:
      return getGroupSettings();

    case SINGLE_SETTINGS:
      return getSingleSettings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_INCR:
      return isSetMsgIncr();
    case ERR_CODE:
      return isSetErrCode();
    case ERR_MSG:
      return isSetErrMsg();
    case GROUP_CHATS:
      return isSetGroupChats();
    case SINGLE_CHATS:
      return isSetSingleChats();
    case GROUP_SETTINGS:
      return isSetGroupSettings();
    case SINGLE_SETTINGS:
      return isSetSingleSettings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PullSessionListResp)
      return this.equals((PullSessionListResp)that);
    return false;
  }

  public boolean equals(PullSessionListResp that) {
    if (that == null)
      return false;

    boolean this_present_msgIncr = true;
    boolean that_present_msgIncr = true;
    if (this_present_msgIncr || that_present_msgIncr) {
      if (!(this_present_msgIncr && that_present_msgIncr))
        return false;
      if (this.msgIncr != that.msgIncr)
        return false;
    }

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }

    boolean this_present_groupChats = true && this.isSetGroupChats();
    boolean that_present_groupChats = true && that.isSetGroupChats();
    if (this_present_groupChats || that_present_groupChats) {
      if (!(this_present_groupChats && that_present_groupChats))
        return false;
      if (!this.groupChats.equals(that.groupChats))
        return false;
    }

    boolean this_present_singleChats = true && this.isSetSingleChats();
    boolean that_present_singleChats = true && that.isSetSingleChats();
    if (this_present_singleChats || that_present_singleChats) {
      if (!(this_present_singleChats && that_present_singleChats))
        return false;
      if (!this.singleChats.equals(that.singleChats))
        return false;
    }

    boolean this_present_groupSettings = true && this.isSetGroupSettings();
    boolean that_present_groupSettings = true && that.isSetGroupSettings();
    if (this_present_groupSettings || that_present_groupSettings) {
      if (!(this_present_groupSettings && that_present_groupSettings))
        return false;
      if (!this.groupSettings.equals(that.groupSettings))
        return false;
    }

    boolean this_present_singleSettings = true && this.isSetSingleSettings();
    boolean that_present_singleSettings = true && that.isSetSingleSettings();
    if (this_present_singleSettings || that_present_singleSettings) {
      if (!(this_present_singleSettings && that_present_singleSettings))
        return false;
      if (!this.singleSettings.equals(that.singleSettings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_msgIncr = true;
    list.add(present_msgIncr);
    if (present_msgIncr)
      list.add(msgIncr);

    boolean present_errCode = true;
    list.add(present_errCode);
    if (present_errCode)
      list.add(errCode);

    boolean present_errMsg = true && (isSetErrMsg());
    list.add(present_errMsg);
    if (present_errMsg)
      list.add(errMsg);

    boolean present_groupChats = true && (isSetGroupChats());
    list.add(present_groupChats);
    if (present_groupChats)
      list.add(groupChats);

    boolean present_singleChats = true && (isSetSingleChats());
    list.add(present_singleChats);
    if (present_singleChats)
      list.add(singleChats);

    boolean present_groupSettings = true && (isSetGroupSettings());
    list.add(present_groupSettings);
    if (present_groupSettings)
      list.add(groupSettings);

    boolean present_singleSettings = true && (isSetSingleSettings());
    list.add(present_singleSettings);
    if (present_singleSettings)
      list.add(singleSettings);

    return list.hashCode();
  }

  @Override
  public int compareTo(PullSessionListResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMsgIncr()).compareTo(other.isSetMsgIncr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgIncr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgIncr, other.msgIncr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(other.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errMsg, other.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupChats()).compareTo(other.isSetGroupChats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupChats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupChats, other.groupChats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleChats()).compareTo(other.isSetSingleChats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleChats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleChats, other.singleChats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupSettings()).compareTo(other.isSetGroupSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupSettings, other.groupSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleSettings()).compareTo(other.isSetSingleSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleSettings, other.singleSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PullSessionListResp(");
    boolean first = true;

    sb.append("msgIncr:");
    sb.append(this.msgIncr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errMsg:");
    if (this.errMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupChats:");
    if (this.groupChats == null) {
      sb.append("null");
    } else {
      sb.append(this.groupChats);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleChats:");
    if (this.singleChats == null) {
      sb.append("null");
    } else {
      sb.append(this.singleChats);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupSettings:");
    if (this.groupSettings == null) {
      sb.append("null");
    } else {
      sb.append(this.groupSettings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleSettings:");
    if (this.singleSettings == null) {
      sb.append("null");
    } else {
      sb.append(this.singleSettings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PullSessionListRespStandardSchemeFactory implements SchemeFactory {
    public PullSessionListRespStandardScheme getScheme() {
      return new PullSessionListRespStandardScheme();
    }
  }

  private static class PullSessionListRespStandardScheme extends StandardScheme<PullSessionListResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PullSessionListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_INCR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgIncr = iprot.readI32();
              struct.setMsgIncrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errCode = iprot.readI32();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errMsg = iprot.readString();
              struct.setErrMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP_CHATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.groupChats = new ArrayList<thrift_gen.oasis_im.rpc.GroupInfo>(_list28.size);
                thrift_gen.oasis_im.rpc.GroupInfo _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = new thrift_gen.oasis_im.rpc.GroupInfo();
                  _elem29.read(iprot);
                  struct.groupChats.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setGroupChatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SINGLE_CHATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.singleChats = new ArrayList<thrift_gen.oasis_im.rpc.SingleChat>(_list31.size);
                thrift_gen.oasis_im.rpc.SingleChat _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = new thrift_gen.oasis_im.rpc.SingleChat();
                  _elem32.read(iprot);
                  struct.singleChats.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setSingleChatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GROUP_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.groupSettings = new HashMap<String,String>(2*_map34.size);
                String _key35;
                String _val36;
                for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                {
                  _key35 = iprot.readString();
                  _val36 = iprot.readString();
                  struct.groupSettings.put(_key35, _val36);
                }
                iprot.readMapEnd();
              }
              struct.setGroupSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SINGLE_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.singleSettings = new HashMap<String,String>(2*_map38.size);
                String _key39;
                String _val40;
                for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                {
                  _key39 = iprot.readString();
                  _val40 = iprot.readString();
                  struct.singleSettings.put(_key39, _val40);
                }
                iprot.readMapEnd();
              }
              struct.setSingleSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PullSessionListResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_INCR_FIELD_DESC);
      oprot.writeI32(struct.msgIncr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI32(struct.errCode);
      oprot.writeFieldEnd();
      if (struct.errMsg != null) {
        oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
        oprot.writeString(struct.errMsg);
        oprot.writeFieldEnd();
      }
      if (struct.groupChats != null) {
        oprot.writeFieldBegin(GROUP_CHATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groupChats.size()));
          for (thrift_gen.oasis_im.rpc.GroupInfo _iter42 : struct.groupChats)
          {
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.singleChats != null) {
        oprot.writeFieldBegin(SINGLE_CHATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.singleChats.size()));
          for (thrift_gen.oasis_im.rpc.SingleChat _iter43 : struct.singleChats)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groupSettings != null) {
        oprot.writeFieldBegin(GROUP_SETTINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.groupSettings.size()));
          for (Map.Entry<String, String> _iter44 : struct.groupSettings.entrySet())
          {
            oprot.writeString(_iter44.getKey());
            oprot.writeString(_iter44.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.singleSettings != null) {
        oprot.writeFieldBegin(SINGLE_SETTINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.singleSettings.size()));
          for (Map.Entry<String, String> _iter45 : struct.singleSettings.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            oprot.writeString(_iter45.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PullSessionListRespTupleSchemeFactory implements SchemeFactory {
    public PullSessionListRespTupleScheme getScheme() {
      return new PullSessionListRespTupleScheme();
    }
  }

  private static class PullSessionListRespTupleScheme extends TupleScheme<PullSessionListResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PullSessionListResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMsgIncr()) {
        optionals.set(0);
      }
      if (struct.isSetErrCode()) {
        optionals.set(1);
      }
      if (struct.isSetErrMsg()) {
        optionals.set(2);
      }
      if (struct.isSetGroupChats()) {
        optionals.set(3);
      }
      if (struct.isSetSingleChats()) {
        optionals.set(4);
      }
      if (struct.isSetGroupSettings()) {
        optionals.set(5);
      }
      if (struct.isSetSingleSettings()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMsgIncr()) {
        oprot.writeI32(struct.msgIncr);
      }
      if (struct.isSetErrCode()) {
        oprot.writeI32(struct.errCode);
      }
      if (struct.isSetErrMsg()) {
        oprot.writeString(struct.errMsg);
      }
      if (struct.isSetGroupChats()) {
        {
          oprot.writeI32(struct.groupChats.size());
          for (thrift_gen.oasis_im.rpc.GroupInfo _iter46 : struct.groupChats)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetSingleChats()) {
        {
          oprot.writeI32(struct.singleChats.size());
          for (thrift_gen.oasis_im.rpc.SingleChat _iter47 : struct.singleChats)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetGroupSettings()) {
        {
          oprot.writeI32(struct.groupSettings.size());
          for (Map.Entry<String, String> _iter48 : struct.groupSettings.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            oprot.writeString(_iter48.getValue());
          }
        }
      }
      if (struct.isSetSingleSettings()) {
        {
          oprot.writeI32(struct.singleSettings.size());
          for (Map.Entry<String, String> _iter49 : struct.singleSettings.entrySet())
          {
            oprot.writeString(_iter49.getKey());
            oprot.writeString(_iter49.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PullSessionListResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.msgIncr = iprot.readI32();
        struct.setMsgIncrIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errCode = iprot.readI32();
        struct.setErrCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.errMsg = iprot.readString();
        struct.setErrMsgIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groupChats = new ArrayList<thrift_gen.oasis_im.rpc.GroupInfo>(_list50.size);
          thrift_gen.oasis_im.rpc.GroupInfo _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new thrift_gen.oasis_im.rpc.GroupInfo();
            _elem51.read(iprot);
            struct.groupChats.add(_elem51);
          }
        }
        struct.setGroupChatsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.singleChats = new ArrayList<thrift_gen.oasis_im.rpc.SingleChat>(_list53.size);
          thrift_gen.oasis_im.rpc.SingleChat _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new thrift_gen.oasis_im.rpc.SingleChat();
            _elem54.read(iprot);
            struct.singleChats.add(_elem54);
          }
        }
        struct.setSingleChatsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.groupSettings = new HashMap<String,String>(2*_map56.size);
          String _key57;
          String _val58;
          for (int _i59 = 0; _i59 < _map56.size; ++_i59)
          {
            _key57 = iprot.readString();
            _val58 = iprot.readString();
            struct.groupSettings.put(_key57, _val58);
          }
        }
        struct.setGroupSettingsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.singleSettings = new HashMap<String,String>(2*_map60.size);
          String _key61;
          String _val62;
          for (int _i63 = 0; _i63 < _map60.size; ++_i63)
          {
            _key61 = iprot.readString();
            _val62 = iprot.readString();
            struct.singleSettings.put(_key61, _val62);
          }
        }
        struct.setSingleSettingsIsSet(true);
      }
    }
  }

}


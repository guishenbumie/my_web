/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.gate_ws;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-06")
public class PullSessionListV2Resp implements org.apache.thrift.TBase<PullSessionListV2Resp, PullSessionListV2Resp._Fields>, java.io.Serializable, Cloneable, Comparable<PullSessionListV2Resp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PullSessionListV2Resp");

  private static final org.apache.thrift.protocol.TField MSG_INCR_FIELD_DESC = new org.apache.thrift.protocol.TField("msgIncr", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errMsg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GLOBAL_CHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("globalChat", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_CHATS_FIELD_DESC = new org.apache.thrift.protocol.TField("groupChats", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SINGLE_CHATS_FIELD_DESC = new org.apache.thrift.protocol.TField("singleChats", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CROSS_CHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("crossChat", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField BLACKLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("blacklist", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PullSessionListV2RespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PullSessionListV2RespTupleSchemeFactory());
  }

  public int msgIncr; // required
  public int errCode; // required
  public String errMsg; // required
  public thrift_gen.oasis_im.rpc.GlobalSessionInfo globalChat; // required
  public List<thrift_gen.oasis_im.rpc.GroupSessionInfo> groupChats; // required
  public List<thrift_gen.oasis_im.rpc.SingleSessionInfo> singleChats; // required
  public thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo crossChat; // required
  public List<thrift_gen.oasis_im.rpc.UserInfo> blacklist; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_INCR((short)1, "msgIncr"),
    ERR_CODE((short)2, "errCode"),
    ERR_MSG((short)3, "errMsg"),
    GLOBAL_CHAT((short)4, "globalChat"),
    GROUP_CHATS((short)5, "groupChats"),
    SINGLE_CHATS((short)6, "singleChats"),
    CROSS_CHAT((short)7, "crossChat"),
    BLACKLIST((short)8, "blacklist");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_INCR
          return MSG_INCR;
        case 2: // ERR_CODE
          return ERR_CODE;
        case 3: // ERR_MSG
          return ERR_MSG;
        case 4: // GLOBAL_CHAT
          return GLOBAL_CHAT;
        case 5: // GROUP_CHATS
          return GROUP_CHATS;
        case 6: // SINGLE_CHATS
          return SINGLE_CHATS;
        case 7: // CROSS_CHAT
          return CROSS_CHAT;
        case 8: // BLACKLIST
          return BLACKLIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGINCR_ISSET_ID = 0;
  private static final int __ERRCODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_INCR, new org.apache.thrift.meta_data.FieldMetaData("msgIncr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GLOBAL_CHAT, new org.apache.thrift.meta_data.FieldMetaData("globalChat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.oasis_im.rpc.GlobalSessionInfo.class)));
    tmpMap.put(_Fields.GROUP_CHATS, new org.apache.thrift.meta_data.FieldMetaData("groupChats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.oasis_im.rpc.GroupSessionInfo.class))));
    tmpMap.put(_Fields.SINGLE_CHATS, new org.apache.thrift.meta_data.FieldMetaData("singleChats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.oasis_im.rpc.SingleSessionInfo.class))));
    tmpMap.put(_Fields.CROSS_CHAT, new org.apache.thrift.meta_data.FieldMetaData("crossChat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo.class)));
    tmpMap.put(_Fields.BLACKLIST, new org.apache.thrift.meta_data.FieldMetaData("blacklist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.oasis_im.rpc.UserInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PullSessionListV2Resp.class, metaDataMap);
  }

  public PullSessionListV2Resp() {
  }

  public PullSessionListV2Resp(
    int msgIncr,
    int errCode,
    String errMsg,
    thrift_gen.oasis_im.rpc.GlobalSessionInfo globalChat,
    List<thrift_gen.oasis_im.rpc.GroupSessionInfo> groupChats,
    List<thrift_gen.oasis_im.rpc.SingleSessionInfo> singleChats,
    thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo crossChat,
    List<thrift_gen.oasis_im.rpc.UserInfo> blacklist)
  {
    this();
    this.msgIncr = msgIncr;
    setMsgIncrIsSet(true);
    this.errCode = errCode;
    setErrCodeIsSet(true);
    this.errMsg = errMsg;
    this.globalChat = globalChat;
    this.groupChats = groupChats;
    this.singleChats = singleChats;
    this.crossChat = crossChat;
    this.blacklist = blacklist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PullSessionListV2Resp(PullSessionListV2Resp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgIncr = other.msgIncr;
    this.errCode = other.errCode;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
    if (other.isSetGlobalChat()) {
      this.globalChat = new thrift_gen.oasis_im.rpc.GlobalSessionInfo(other.globalChat);
    }
    if (other.isSetGroupChats()) {
      List<thrift_gen.oasis_im.rpc.GroupSessionInfo> __this__groupChats = new ArrayList<thrift_gen.oasis_im.rpc.GroupSessionInfo>(other.groupChats.size());
      for (thrift_gen.oasis_im.rpc.GroupSessionInfo other_element : other.groupChats) {
        __this__groupChats.add(new thrift_gen.oasis_im.rpc.GroupSessionInfo(other_element));
      }
      this.groupChats = __this__groupChats;
    }
    if (other.isSetSingleChats()) {
      List<thrift_gen.oasis_im.rpc.SingleSessionInfo> __this__singleChats = new ArrayList<thrift_gen.oasis_im.rpc.SingleSessionInfo>(other.singleChats.size());
      for (thrift_gen.oasis_im.rpc.SingleSessionInfo other_element : other.singleChats) {
        __this__singleChats.add(new thrift_gen.oasis_im.rpc.SingleSessionInfo(other_element));
      }
      this.singleChats = __this__singleChats;
    }
    if (other.isSetCrossChat()) {
      this.crossChat = new thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo(other.crossChat);
    }
    if (other.isSetBlacklist()) {
      List<thrift_gen.oasis_im.rpc.UserInfo> __this__blacklist = new ArrayList<thrift_gen.oasis_im.rpc.UserInfo>(other.blacklist.size());
      for (thrift_gen.oasis_im.rpc.UserInfo other_element : other.blacklist) {
        __this__blacklist.add(new thrift_gen.oasis_im.rpc.UserInfo(other_element));
      }
      this.blacklist = __this__blacklist;
    }
  }

  public PullSessionListV2Resp deepCopy() {
    return new PullSessionListV2Resp(this);
  }

  @Override
  public void clear() {
    setMsgIncrIsSet(false);
    this.msgIncr = 0;
    setErrCodeIsSet(false);
    this.errCode = 0;
    this.errMsg = null;
    this.globalChat = null;
    this.groupChats = null;
    this.singleChats = null;
    this.crossChat = null;
    this.blacklist = null;
  }

  public int getMsgIncr() {
    return this.msgIncr;
  }

  public PullSessionListV2Resp setMsgIncr(int msgIncr) {
    this.msgIncr = msgIncr;
    setMsgIncrIsSet(true);
    return this;
  }

  public void unsetMsgIncr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGINCR_ISSET_ID);
  }

  /** Returns true if field msgIncr is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgIncr() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGINCR_ISSET_ID);
  }

  public void setMsgIncrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGINCR_ISSET_ID, value);
  }

  public int getErrCode() {
    return this.errCode;
  }

  public PullSessionListV2Resp setErrCode(int errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  public String getErrMsg() {
    return this.errMsg;
  }

  public PullSessionListV2Resp setErrMsg(String errMsg) {
    this.errMsg = errMsg;
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public thrift_gen.oasis_im.rpc.GlobalSessionInfo getGlobalChat() {
    return this.globalChat;
  }

  public PullSessionListV2Resp setGlobalChat(thrift_gen.oasis_im.rpc.GlobalSessionInfo globalChat) {
    this.globalChat = globalChat;
    return this;
  }

  public void unsetGlobalChat() {
    this.globalChat = null;
  }

  /** Returns true if field globalChat is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalChat() {
    return this.globalChat != null;
  }

  public void setGlobalChatIsSet(boolean value) {
    if (!value) {
      this.globalChat = null;
    }
  }

  public int getGroupChatsSize() {
    return (this.groupChats == null) ? 0 : this.groupChats.size();
  }

  public java.util.Iterator<thrift_gen.oasis_im.rpc.GroupSessionInfo> getGroupChatsIterator() {
    return (this.groupChats == null) ? null : this.groupChats.iterator();
  }

  public void addToGroupChats(thrift_gen.oasis_im.rpc.GroupSessionInfo elem) {
    if (this.groupChats == null) {
      this.groupChats = new ArrayList<thrift_gen.oasis_im.rpc.GroupSessionInfo>();
    }
    this.groupChats.add(elem);
  }

  public List<thrift_gen.oasis_im.rpc.GroupSessionInfo> getGroupChats() {
    return this.groupChats;
  }

  public PullSessionListV2Resp setGroupChats(List<thrift_gen.oasis_im.rpc.GroupSessionInfo> groupChats) {
    this.groupChats = groupChats;
    return this;
  }

  public void unsetGroupChats() {
    this.groupChats = null;
  }

  /** Returns true if field groupChats is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupChats() {
    return this.groupChats != null;
  }

  public void setGroupChatsIsSet(boolean value) {
    if (!value) {
      this.groupChats = null;
    }
  }

  public int getSingleChatsSize() {
    return (this.singleChats == null) ? 0 : this.singleChats.size();
  }

  public java.util.Iterator<thrift_gen.oasis_im.rpc.SingleSessionInfo> getSingleChatsIterator() {
    return (this.singleChats == null) ? null : this.singleChats.iterator();
  }

  public void addToSingleChats(thrift_gen.oasis_im.rpc.SingleSessionInfo elem) {
    if (this.singleChats == null) {
      this.singleChats = new ArrayList<thrift_gen.oasis_im.rpc.SingleSessionInfo>();
    }
    this.singleChats.add(elem);
  }

  public List<thrift_gen.oasis_im.rpc.SingleSessionInfo> getSingleChats() {
    return this.singleChats;
  }

  public PullSessionListV2Resp setSingleChats(List<thrift_gen.oasis_im.rpc.SingleSessionInfo> singleChats) {
    this.singleChats = singleChats;
    return this;
  }

  public void unsetSingleChats() {
    this.singleChats = null;
  }

  /** Returns true if field singleChats is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleChats() {
    return this.singleChats != null;
  }

  public void setSingleChatsIsSet(boolean value) {
    if (!value) {
      this.singleChats = null;
    }
  }

  public thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo getCrossChat() {
    return this.crossChat;
  }

  public PullSessionListV2Resp setCrossChat(thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo crossChat) {
    this.crossChat = crossChat;
    return this;
  }

  public void unsetCrossChat() {
    this.crossChat = null;
  }

  /** Returns true if field crossChat is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossChat() {
    return this.crossChat != null;
  }

  public void setCrossChatIsSet(boolean value) {
    if (!value) {
      this.crossChat = null;
    }
  }

  public int getBlacklistSize() {
    return (this.blacklist == null) ? 0 : this.blacklist.size();
  }

  public java.util.Iterator<thrift_gen.oasis_im.rpc.UserInfo> getBlacklistIterator() {
    return (this.blacklist == null) ? null : this.blacklist.iterator();
  }

  public void addToBlacklist(thrift_gen.oasis_im.rpc.UserInfo elem) {
    if (this.blacklist == null) {
      this.blacklist = new ArrayList<thrift_gen.oasis_im.rpc.UserInfo>();
    }
    this.blacklist.add(elem);
  }

  public List<thrift_gen.oasis_im.rpc.UserInfo> getBlacklist() {
    return this.blacklist;
  }

  public PullSessionListV2Resp setBlacklist(List<thrift_gen.oasis_im.rpc.UserInfo> blacklist) {
    this.blacklist = blacklist;
    return this;
  }

  public void unsetBlacklist() {
    this.blacklist = null;
  }

  /** Returns true if field blacklist is set (has been assigned a value) and false otherwise */
  public boolean isSetBlacklist() {
    return this.blacklist != null;
  }

  public void setBlacklistIsSet(boolean value) {
    if (!value) {
      this.blacklist = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSG_INCR:
      if (value == null) {
        unsetMsgIncr();
      } else {
        setMsgIncr((Integer)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((Integer)value);
      }
      break;

    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;

    case GLOBAL_CHAT:
      if (value == null) {
        unsetGlobalChat();
      } else {
        setGlobalChat((thrift_gen.oasis_im.rpc.GlobalSessionInfo)value);
      }
      break;

    case GROUP_CHATS:
      if (value == null) {
        unsetGroupChats();
      } else {
        setGroupChats((List<thrift_gen.oasis_im.rpc.GroupSessionInfo>)value);
      }
      break;

    case SINGLE_CHATS:
      if (value == null) {
        unsetSingleChats();
      } else {
        setSingleChats((List<thrift_gen.oasis_im.rpc.SingleSessionInfo>)value);
      }
      break;

    case CROSS_CHAT:
      if (value == null) {
        unsetCrossChat();
      } else {
        setCrossChat((thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo)value);
      }
      break;

    case BLACKLIST:
      if (value == null) {
        unsetBlacklist();
      } else {
        setBlacklist((List<thrift_gen.oasis_im.rpc.UserInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_INCR:
      return getMsgIncr();

    case ERR_CODE:
      return getErrCode();

    case ERR_MSG:
      return getErrMsg();

    case GLOBAL_CHAT:
      return getGlobalChat();

    case GROUP_CHATS:
      return getGroupChats();

    case SINGLE_CHATS:
      return getSingleChats();

    case CROSS_CHAT:
      return getCrossChat();

    case BLACKLIST:
      return getBlacklist();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_INCR:
      return isSetMsgIncr();
    case ERR_CODE:
      return isSetErrCode();
    case ERR_MSG:
      return isSetErrMsg();
    case GLOBAL_CHAT:
      return isSetGlobalChat();
    case GROUP_CHATS:
      return isSetGroupChats();
    case SINGLE_CHATS:
      return isSetSingleChats();
    case CROSS_CHAT:
      return isSetCrossChat();
    case BLACKLIST:
      return isSetBlacklist();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PullSessionListV2Resp)
      return this.equals((PullSessionListV2Resp)that);
    return false;
  }

  public boolean equals(PullSessionListV2Resp that) {
    if (that == null)
      return false;

    boolean this_present_msgIncr = true;
    boolean that_present_msgIncr = true;
    if (this_present_msgIncr || that_present_msgIncr) {
      if (!(this_present_msgIncr && that_present_msgIncr))
        return false;
      if (this.msgIncr != that.msgIncr)
        return false;
    }

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }

    boolean this_present_globalChat = true && this.isSetGlobalChat();
    boolean that_present_globalChat = true && that.isSetGlobalChat();
    if (this_present_globalChat || that_present_globalChat) {
      if (!(this_present_globalChat && that_present_globalChat))
        return false;
      if (!this.globalChat.equals(that.globalChat))
        return false;
    }

    boolean this_present_groupChats = true && this.isSetGroupChats();
    boolean that_present_groupChats = true && that.isSetGroupChats();
    if (this_present_groupChats || that_present_groupChats) {
      if (!(this_present_groupChats && that_present_groupChats))
        return false;
      if (!this.groupChats.equals(that.groupChats))
        return false;
    }

    boolean this_present_singleChats = true && this.isSetSingleChats();
    boolean that_present_singleChats = true && that.isSetSingleChats();
    if (this_present_singleChats || that_present_singleChats) {
      if (!(this_present_singleChats && that_present_singleChats))
        return false;
      if (!this.singleChats.equals(that.singleChats))
        return false;
    }

    boolean this_present_crossChat = true && this.isSetCrossChat();
    boolean that_present_crossChat = true && that.isSetCrossChat();
    if (this_present_crossChat || that_present_crossChat) {
      if (!(this_present_crossChat && that_present_crossChat))
        return false;
      if (!this.crossChat.equals(that.crossChat))
        return false;
    }

    boolean this_present_blacklist = true && this.isSetBlacklist();
    boolean that_present_blacklist = true && that.isSetBlacklist();
    if (this_present_blacklist || that_present_blacklist) {
      if (!(this_present_blacklist && that_present_blacklist))
        return false;
      if (!this.blacklist.equals(that.blacklist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_msgIncr = true;
    list.add(present_msgIncr);
    if (present_msgIncr)
      list.add(msgIncr);

    boolean present_errCode = true;
    list.add(present_errCode);
    if (present_errCode)
      list.add(errCode);

    boolean present_errMsg = true && (isSetErrMsg());
    list.add(present_errMsg);
    if (present_errMsg)
      list.add(errMsg);

    boolean present_globalChat = true && (isSetGlobalChat());
    list.add(present_globalChat);
    if (present_globalChat)
      list.add(globalChat);

    boolean present_groupChats = true && (isSetGroupChats());
    list.add(present_groupChats);
    if (present_groupChats)
      list.add(groupChats);

    boolean present_singleChats = true && (isSetSingleChats());
    list.add(present_singleChats);
    if (present_singleChats)
      list.add(singleChats);

    boolean present_crossChat = true && (isSetCrossChat());
    list.add(present_crossChat);
    if (present_crossChat)
      list.add(crossChat);

    boolean present_blacklist = true && (isSetBlacklist());
    list.add(present_blacklist);
    if (present_blacklist)
      list.add(blacklist);

    return list.hashCode();
  }

  @Override
  public int compareTo(PullSessionListV2Resp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMsgIncr()).compareTo(other.isSetMsgIncr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgIncr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgIncr, other.msgIncr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(other.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errMsg, other.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlobalChat()).compareTo(other.isSetGlobalChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalChat, other.globalChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupChats()).compareTo(other.isSetGroupChats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupChats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupChats, other.groupChats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleChats()).compareTo(other.isSetSingleChats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleChats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleChats, other.singleChats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossChat()).compareTo(other.isSetCrossChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossChat, other.crossChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlacklist()).compareTo(other.isSetBlacklist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlacklist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blacklist, other.blacklist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PullSessionListV2Resp(");
    boolean first = true;

    sb.append("msgIncr:");
    sb.append(this.msgIncr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errMsg:");
    if (this.errMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("globalChat:");
    if (this.globalChat == null) {
      sb.append("null");
    } else {
      sb.append(this.globalChat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupChats:");
    if (this.groupChats == null) {
      sb.append("null");
    } else {
      sb.append(this.groupChats);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleChats:");
    if (this.singleChats == null) {
      sb.append("null");
    } else {
      sb.append(this.singleChats);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossChat:");
    if (this.crossChat == null) {
      sb.append("null");
    } else {
      sb.append(this.crossChat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blacklist:");
    if (this.blacklist == null) {
      sb.append("null");
    } else {
      sb.append(this.blacklist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (globalChat != null) {
      globalChat.validate();
    }
    if (crossChat != null) {
      crossChat.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PullSessionListV2RespStandardSchemeFactory implements SchemeFactory {
    public PullSessionListV2RespStandardScheme getScheme() {
      return new PullSessionListV2RespStandardScheme();
    }
  }

  private static class PullSessionListV2RespStandardScheme extends StandardScheme<PullSessionListV2Resp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PullSessionListV2Resp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_INCR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgIncr = iprot.readI32();
              struct.setMsgIncrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errCode = iprot.readI32();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errMsg = iprot.readString();
              struct.setErrMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GLOBAL_CHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.globalChat = new thrift_gen.oasis_im.rpc.GlobalSessionInfo();
              struct.globalChat.read(iprot);
              struct.setGlobalChatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP_CHATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.groupChats = new ArrayList<thrift_gen.oasis_im.rpc.GroupSessionInfo>(_list104.size);
                thrift_gen.oasis_im.rpc.GroupSessionInfo _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new thrift_gen.oasis_im.rpc.GroupSessionInfo();
                  _elem105.read(iprot);
                  struct.groupChats.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setGroupChatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SINGLE_CHATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.singleChats = new ArrayList<thrift_gen.oasis_im.rpc.SingleSessionInfo>(_list107.size);
                thrift_gen.oasis_im.rpc.SingleSessionInfo _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = new thrift_gen.oasis_im.rpc.SingleSessionInfo();
                  _elem108.read(iprot);
                  struct.singleChats.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setSingleChatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CROSS_CHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.crossChat = new thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo();
              struct.crossChat.read(iprot);
              struct.setCrossChatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLACKLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.blacklist = new ArrayList<thrift_gen.oasis_im.rpc.UserInfo>(_list110.size);
                thrift_gen.oasis_im.rpc.UserInfo _elem111;
                for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                {
                  _elem111 = new thrift_gen.oasis_im.rpc.UserInfo();
                  _elem111.read(iprot);
                  struct.blacklist.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setBlacklistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PullSessionListV2Resp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_INCR_FIELD_DESC);
      oprot.writeI32(struct.msgIncr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI32(struct.errCode);
      oprot.writeFieldEnd();
      if (struct.errMsg != null) {
        oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
        oprot.writeString(struct.errMsg);
        oprot.writeFieldEnd();
      }
      if (struct.globalChat != null) {
        oprot.writeFieldBegin(GLOBAL_CHAT_FIELD_DESC);
        struct.globalChat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.groupChats != null) {
        oprot.writeFieldBegin(GROUP_CHATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groupChats.size()));
          for (thrift_gen.oasis_im.rpc.GroupSessionInfo _iter113 : struct.groupChats)
          {
            _iter113.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.singleChats != null) {
        oprot.writeFieldBegin(SINGLE_CHATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.singleChats.size()));
          for (thrift_gen.oasis_im.rpc.SingleSessionInfo _iter114 : struct.singleChats)
          {
            _iter114.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.crossChat != null) {
        oprot.writeFieldBegin(CROSS_CHAT_FIELD_DESC);
        struct.crossChat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.blacklist != null) {
        oprot.writeFieldBegin(BLACKLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.blacklist.size()));
          for (thrift_gen.oasis_im.rpc.UserInfo _iter115 : struct.blacklist)
          {
            _iter115.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PullSessionListV2RespTupleSchemeFactory implements SchemeFactory {
    public PullSessionListV2RespTupleScheme getScheme() {
      return new PullSessionListV2RespTupleScheme();
    }
  }

  private static class PullSessionListV2RespTupleScheme extends TupleScheme<PullSessionListV2Resp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PullSessionListV2Resp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMsgIncr()) {
        optionals.set(0);
      }
      if (struct.isSetErrCode()) {
        optionals.set(1);
      }
      if (struct.isSetErrMsg()) {
        optionals.set(2);
      }
      if (struct.isSetGlobalChat()) {
        optionals.set(3);
      }
      if (struct.isSetGroupChats()) {
        optionals.set(4);
      }
      if (struct.isSetSingleChats()) {
        optionals.set(5);
      }
      if (struct.isSetCrossChat()) {
        optionals.set(6);
      }
      if (struct.isSetBlacklist()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMsgIncr()) {
        oprot.writeI32(struct.msgIncr);
      }
      if (struct.isSetErrCode()) {
        oprot.writeI32(struct.errCode);
      }
      if (struct.isSetErrMsg()) {
        oprot.writeString(struct.errMsg);
      }
      if (struct.isSetGlobalChat()) {
        struct.globalChat.write(oprot);
      }
      if (struct.isSetGroupChats()) {
        {
          oprot.writeI32(struct.groupChats.size());
          for (thrift_gen.oasis_im.rpc.GroupSessionInfo _iter116 : struct.groupChats)
          {
            _iter116.write(oprot);
          }
        }
      }
      if (struct.isSetSingleChats()) {
        {
          oprot.writeI32(struct.singleChats.size());
          for (thrift_gen.oasis_im.rpc.SingleSessionInfo _iter117 : struct.singleChats)
          {
            _iter117.write(oprot);
          }
        }
      }
      if (struct.isSetCrossChat()) {
        struct.crossChat.write(oprot);
      }
      if (struct.isSetBlacklist()) {
        {
          oprot.writeI32(struct.blacklist.size());
          for (thrift_gen.oasis_im.rpc.UserInfo _iter118 : struct.blacklist)
          {
            _iter118.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PullSessionListV2Resp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.msgIncr = iprot.readI32();
        struct.setMsgIncrIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errCode = iprot.readI32();
        struct.setErrCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.errMsg = iprot.readString();
        struct.setErrMsgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.globalChat = new thrift_gen.oasis_im.rpc.GlobalSessionInfo();
        struct.globalChat.read(iprot);
        struct.setGlobalChatIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groupChats = new ArrayList<thrift_gen.oasis_im.rpc.GroupSessionInfo>(_list119.size);
          thrift_gen.oasis_im.rpc.GroupSessionInfo _elem120;
          for (int _i121 = 0; _i121 < _list119.size; ++_i121)
          {
            _elem120 = new thrift_gen.oasis_im.rpc.GroupSessionInfo();
            _elem120.read(iprot);
            struct.groupChats.add(_elem120);
          }
        }
        struct.setGroupChatsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.singleChats = new ArrayList<thrift_gen.oasis_im.rpc.SingleSessionInfo>(_list122.size);
          thrift_gen.oasis_im.rpc.SingleSessionInfo _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = new thrift_gen.oasis_im.rpc.SingleSessionInfo();
            _elem123.read(iprot);
            struct.singleChats.add(_elem123);
          }
        }
        struct.setSingleChatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.crossChat = new thrift_gen.oasis_im.rpc.CrossGlobalSessionInfo();
        struct.crossChat.read(iprot);
        struct.setCrossChatIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.blacklist = new ArrayList<thrift_gen.oasis_im.rpc.UserInfo>(_list125.size);
          thrift_gen.oasis_im.rpc.UserInfo _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = new thrift_gen.oasis_im.rpc.UserInfo();
            _elem126.read(iprot);
            struct.blacklist.add(_elem126);
          }
        }
        struct.setBlacklistIsSet(true);
      }
    }
  }

}


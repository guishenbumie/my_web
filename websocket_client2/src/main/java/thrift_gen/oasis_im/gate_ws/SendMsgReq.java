/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.gate_ws;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-06")
public class SendMsgReq implements org.apache.thrift.TBase<SendMsgReq, SendMsgReq._Fields>, java.io.Serializable, Cloneable, Comparable<SendMsgReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendMsgReq");

  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PLATFORM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("platformID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recvID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MSG_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("msgFrom", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CLIENT_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientMsgID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField AT_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("atUsers", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField REPLY_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("replySeq", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SendMsgReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SendMsgReqTupleSchemeFactory());
  }

  public Header header; // required
  public int platformID; // required
  public String recvID; // required
  /**
   * 
   * @see thrift_gen.oasis_im.rpc.SESSION_TYPE
   */
  public thrift_gen.oasis_im.rpc.SESSION_TYPE sessionType; // required
  /**
   * 
   * @see thrift_gen.oasis_im.rpc.MSG_FROM
   */
  public thrift_gen.oasis_im.rpc.MSG_FROM msgFrom; // required
  /**
   * 
   * @see thrift_gen.oasis_im.rpc.CONTENT_TYPE
   */
  public thrift_gen.oasis_im.rpc.CONTENT_TYPE contentType; // required
  public String content; // required
  public String clientMsgID; // required
  public Map<String,String> options; // required
  public Map<String,String> ext; // required
  public List<thrift_gen.oasis_im.rpc.AtUser> atUsers; // required
  public long replySeq; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADER((short)1, "header"),
    PLATFORM_ID((short)2, "platformID"),
    RECV_ID((short)3, "recvID"),
    /**
     * 
     * @see thrift_gen.oasis_im.rpc.SESSION_TYPE
     */
    SESSION_TYPE((short)4, "sessionType"),
    /**
     * 
     * @see thrift_gen.oasis_im.rpc.MSG_FROM
     */
    MSG_FROM((short)5, "msgFrom"),
    /**
     * 
     * @see thrift_gen.oasis_im.rpc.CONTENT_TYPE
     */
    CONTENT_TYPE((short)6, "contentType"),
    CONTENT((short)7, "content"),
    CLIENT_MSG_ID((short)8, "clientMsgID"),
    OPTIONS((short)9, "options"),
    EXT((short)10, "ext"),
    AT_USERS((short)11, "atUsers"),
    REPLY_SEQ((short)12, "replySeq");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADER
          return HEADER;
        case 2: // PLATFORM_ID
          return PLATFORM_ID;
        case 3: // RECV_ID
          return RECV_ID;
        case 4: // SESSION_TYPE
          return SESSION_TYPE;
        case 5: // MSG_FROM
          return MSG_FROM;
        case 6: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 7: // CONTENT
          return CONTENT;
        case 8: // CLIENT_MSG_ID
          return CLIENT_MSG_ID;
        case 9: // OPTIONS
          return OPTIONS;
        case 10: // EXT
          return EXT;
        case 11: // AT_USERS
          return AT_USERS;
        case 12: // REPLY_SEQ
          return REPLY_SEQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLATFORMID_ISSET_ID = 0;
  private static final int __REPLYSEQ_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Header.class)));
    tmpMap.put(_Fields.PLATFORM_ID, new org.apache.thrift.meta_data.FieldMetaData("platformID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECV_ID, new org.apache.thrift.meta_data.FieldMetaData("recvID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sessionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, thrift_gen.oasis_im.rpc.SESSION_TYPE.class)));
    tmpMap.put(_Fields.MSG_FROM, new org.apache.thrift.meta_data.FieldMetaData("msgFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, thrift_gen.oasis_im.rpc.MSG_FROM.class)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, thrift_gen.oasis_im.rpc.CONTENT_TYPE.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("clientMsgID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AT_USERS, new org.apache.thrift.meta_data.FieldMetaData("atUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.oasis_im.rpc.AtUser.class))));
    tmpMap.put(_Fields.REPLY_SEQ, new org.apache.thrift.meta_data.FieldMetaData("replySeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendMsgReq.class, metaDataMap);
  }

  public SendMsgReq() {
  }

  public SendMsgReq(
    Header header,
    int platformID,
    String recvID,
    thrift_gen.oasis_im.rpc.SESSION_TYPE sessionType,
    thrift_gen.oasis_im.rpc.MSG_FROM msgFrom,
    thrift_gen.oasis_im.rpc.CONTENT_TYPE contentType,
    String content,
    String clientMsgID,
    Map<String,String> options,
    Map<String,String> ext,
    List<thrift_gen.oasis_im.rpc.AtUser> atUsers,
    long replySeq)
  {
    this();
    this.header = header;
    this.platformID = platformID;
    setPlatformIDIsSet(true);
    this.recvID = recvID;
    this.sessionType = sessionType;
    this.msgFrom = msgFrom;
    this.contentType = contentType;
    this.content = content;
    this.clientMsgID = clientMsgID;
    this.options = options;
    this.ext = ext;
    this.atUsers = atUsers;
    this.replySeq = replySeq;
    setReplySeqIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SendMsgReq(SendMsgReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHeader()) {
      this.header = new Header(other.header);
    }
    this.platformID = other.platformID;
    if (other.isSetRecvID()) {
      this.recvID = other.recvID;
    }
    if (other.isSetSessionType()) {
      this.sessionType = other.sessionType;
    }
    if (other.isSetMsgFrom()) {
      this.msgFrom = other.msgFrom;
    }
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetClientMsgID()) {
      this.clientMsgID = other.clientMsgID;
    }
    if (other.isSetOptions()) {
      Map<String,String> __this__options = new HashMap<String,String>(other.options);
      this.options = __this__options;
    }
    if (other.isSetExt()) {
      Map<String,String> __this__ext = new HashMap<String,String>(other.ext);
      this.ext = __this__ext;
    }
    if (other.isSetAtUsers()) {
      List<thrift_gen.oasis_im.rpc.AtUser> __this__atUsers = new ArrayList<thrift_gen.oasis_im.rpc.AtUser>(other.atUsers.size());
      for (thrift_gen.oasis_im.rpc.AtUser other_element : other.atUsers) {
        __this__atUsers.add(new thrift_gen.oasis_im.rpc.AtUser(other_element));
      }
      this.atUsers = __this__atUsers;
    }
    this.replySeq = other.replySeq;
  }

  public SendMsgReq deepCopy() {
    return new SendMsgReq(this);
  }

  @Override
  public void clear() {
    this.header = null;
    setPlatformIDIsSet(false);
    this.platformID = 0;
    this.recvID = null;
    this.sessionType = null;
    this.msgFrom = null;
    this.contentType = null;
    this.content = null;
    this.clientMsgID = null;
    this.options = null;
    this.ext = null;
    this.atUsers = null;
    setReplySeqIsSet(false);
    this.replySeq = 0;
  }

  public Header getHeader() {
    return this.header;
  }

  public SendMsgReq setHeader(Header header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public int getPlatformID() {
    return this.platformID;
  }

  public SendMsgReq setPlatformID(int platformID) {
    this.platformID = platformID;
    setPlatformIDIsSet(true);
    return this;
  }

  public void unsetPlatformID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATFORMID_ISSET_ID);
  }

  /** Returns true if field platformID is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformID() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATFORMID_ISSET_ID);
  }

  public void setPlatformIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATFORMID_ISSET_ID, value);
  }

  public String getRecvID() {
    return this.recvID;
  }

  public SendMsgReq setRecvID(String recvID) {
    this.recvID = recvID;
    return this;
  }

  public void unsetRecvID() {
    this.recvID = null;
  }

  /** Returns true if field recvID is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvID() {
    return this.recvID != null;
  }

  public void setRecvIDIsSet(boolean value) {
    if (!value) {
      this.recvID = null;
    }
  }

  /**
   * 
   * @see thrift_gen.oasis_im.rpc.SESSION_TYPE
   */
  public thrift_gen.oasis_im.rpc.SESSION_TYPE getSessionType() {
    return this.sessionType;
  }

  /**
   * 
   * @see thrift_gen.oasis_im.rpc.SESSION_TYPE
   */
  public SendMsgReq setSessionType(thrift_gen.oasis_im.rpc.SESSION_TYPE sessionType) {
    this.sessionType = sessionType;
    return this;
  }

  public void unsetSessionType() {
    this.sessionType = null;
  }

  /** Returns true if field sessionType is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionType() {
    return this.sessionType != null;
  }

  public void setSessionTypeIsSet(boolean value) {
    if (!value) {
      this.sessionType = null;
    }
  }

  /**
   * 
   * @see thrift_gen.oasis_im.rpc.MSG_FROM
   */
  public thrift_gen.oasis_im.rpc.MSG_FROM getMsgFrom() {
    return this.msgFrom;
  }

  /**
   * 
   * @see thrift_gen.oasis_im.rpc.MSG_FROM
   */
  public SendMsgReq setMsgFrom(thrift_gen.oasis_im.rpc.MSG_FROM msgFrom) {
    this.msgFrom = msgFrom;
    return this;
  }

  public void unsetMsgFrom() {
    this.msgFrom = null;
  }

  /** Returns true if field msgFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgFrom() {
    return this.msgFrom != null;
  }

  public void setMsgFromIsSet(boolean value) {
    if (!value) {
      this.msgFrom = null;
    }
  }

  /**
   * 
   * @see thrift_gen.oasis_im.rpc.CONTENT_TYPE
   */
  public thrift_gen.oasis_im.rpc.CONTENT_TYPE getContentType() {
    return this.contentType;
  }

  /**
   * 
   * @see thrift_gen.oasis_im.rpc.CONTENT_TYPE
   */
  public SendMsgReq setContentType(thrift_gen.oasis_im.rpc.CONTENT_TYPE contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public SendMsgReq setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getClientMsgID() {
    return this.clientMsgID;
  }

  public SendMsgReq setClientMsgID(String clientMsgID) {
    this.clientMsgID = clientMsgID;
    return this;
  }

  public void unsetClientMsgID() {
    this.clientMsgID = null;
  }

  /** Returns true if field clientMsgID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientMsgID() {
    return this.clientMsgID != null;
  }

  public void setClientMsgIDIsSet(boolean value) {
    if (!value) {
      this.clientMsgID = null;
    }
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  public void putToOptions(String key, String val) {
    if (this.options == null) {
      this.options = new HashMap<String,String>();
    }
    this.options.put(key, val);
  }

  public Map<String,String> getOptions() {
    return this.options;
  }

  public SendMsgReq setOptions(Map<String,String> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public int getExtSize() {
    return (this.ext == null) ? 0 : this.ext.size();
  }

  public void putToExt(String key, String val) {
    if (this.ext == null) {
      this.ext = new HashMap<String,String>();
    }
    this.ext.put(key, val);
  }

  public Map<String,String> getExt() {
    return this.ext;
  }

  public SendMsgReq setExt(Map<String,String> ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public int getAtUsersSize() {
    return (this.atUsers == null) ? 0 : this.atUsers.size();
  }

  public java.util.Iterator<thrift_gen.oasis_im.rpc.AtUser> getAtUsersIterator() {
    return (this.atUsers == null) ? null : this.atUsers.iterator();
  }

  public void addToAtUsers(thrift_gen.oasis_im.rpc.AtUser elem) {
    if (this.atUsers == null) {
      this.atUsers = new ArrayList<thrift_gen.oasis_im.rpc.AtUser>();
    }
    this.atUsers.add(elem);
  }

  public List<thrift_gen.oasis_im.rpc.AtUser> getAtUsers() {
    return this.atUsers;
  }

  public SendMsgReq setAtUsers(List<thrift_gen.oasis_im.rpc.AtUser> atUsers) {
    this.atUsers = atUsers;
    return this;
  }

  public void unsetAtUsers() {
    this.atUsers = null;
  }

  /** Returns true if field atUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetAtUsers() {
    return this.atUsers != null;
  }

  public void setAtUsersIsSet(boolean value) {
    if (!value) {
      this.atUsers = null;
    }
  }

  public long getReplySeq() {
    return this.replySeq;
  }

  public SendMsgReq setReplySeq(long replySeq) {
    this.replySeq = replySeq;
    setReplySeqIsSet(true);
    return this;
  }

  public void unsetReplySeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLYSEQ_ISSET_ID);
  }

  /** Returns true if field replySeq is set (has been assigned a value) and false otherwise */
  public boolean isSetReplySeq() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLYSEQ_ISSET_ID);
  }

  public void setReplySeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLYSEQ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((Header)value);
      }
      break;

    case PLATFORM_ID:
      if (value == null) {
        unsetPlatformID();
      } else {
        setPlatformID((Integer)value);
      }
      break;

    case RECV_ID:
      if (value == null) {
        unsetRecvID();
      } else {
        setRecvID((String)value);
      }
      break;

    case SESSION_TYPE:
      if (value == null) {
        unsetSessionType();
      } else {
        setSessionType((thrift_gen.oasis_im.rpc.SESSION_TYPE)value);
      }
      break;

    case MSG_FROM:
      if (value == null) {
        unsetMsgFrom();
      } else {
        setMsgFrom((thrift_gen.oasis_im.rpc.MSG_FROM)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((thrift_gen.oasis_im.rpc.CONTENT_TYPE)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case CLIENT_MSG_ID:
      if (value == null) {
        unsetClientMsgID();
      } else {
        setClientMsgID((String)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((Map<String,String>)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((Map<String,String>)value);
      }
      break;

    case AT_USERS:
      if (value == null) {
        unsetAtUsers();
      } else {
        setAtUsers((List<thrift_gen.oasis_im.rpc.AtUser>)value);
      }
      break;

    case REPLY_SEQ:
      if (value == null) {
        unsetReplySeq();
      } else {
        setReplySeq((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADER:
      return getHeader();

    case PLATFORM_ID:
      return getPlatformID();

    case RECV_ID:
      return getRecvID();

    case SESSION_TYPE:
      return getSessionType();

    case MSG_FROM:
      return getMsgFrom();

    case CONTENT_TYPE:
      return getContentType();

    case CONTENT:
      return getContent();

    case CLIENT_MSG_ID:
      return getClientMsgID();

    case OPTIONS:
      return getOptions();

    case EXT:
      return getExt();

    case AT_USERS:
      return getAtUsers();

    case REPLY_SEQ:
      return getReplySeq();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADER:
      return isSetHeader();
    case PLATFORM_ID:
      return isSetPlatformID();
    case RECV_ID:
      return isSetRecvID();
    case SESSION_TYPE:
      return isSetSessionType();
    case MSG_FROM:
      return isSetMsgFrom();
    case CONTENT_TYPE:
      return isSetContentType();
    case CONTENT:
      return isSetContent();
    case CLIENT_MSG_ID:
      return isSetClientMsgID();
    case OPTIONS:
      return isSetOptions();
    case EXT:
      return isSetExt();
    case AT_USERS:
      return isSetAtUsers();
    case REPLY_SEQ:
      return isSetReplySeq();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SendMsgReq)
      return this.equals((SendMsgReq)that);
    return false;
  }

  public boolean equals(SendMsgReq that) {
    if (that == null)
      return false;

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_platformID = true;
    boolean that_present_platformID = true;
    if (this_present_platformID || that_present_platformID) {
      if (!(this_present_platformID && that_present_platformID))
        return false;
      if (this.platformID != that.platformID)
        return false;
    }

    boolean this_present_recvID = true && this.isSetRecvID();
    boolean that_present_recvID = true && that.isSetRecvID();
    if (this_present_recvID || that_present_recvID) {
      if (!(this_present_recvID && that_present_recvID))
        return false;
      if (!this.recvID.equals(that.recvID))
        return false;
    }

    boolean this_present_sessionType = true && this.isSetSessionType();
    boolean that_present_sessionType = true && that.isSetSessionType();
    if (this_present_sessionType || that_present_sessionType) {
      if (!(this_present_sessionType && that_present_sessionType))
        return false;
      if (!this.sessionType.equals(that.sessionType))
        return false;
    }

    boolean this_present_msgFrom = true && this.isSetMsgFrom();
    boolean that_present_msgFrom = true && that.isSetMsgFrom();
    if (this_present_msgFrom || that_present_msgFrom) {
      if (!(this_present_msgFrom && that_present_msgFrom))
        return false;
      if (!this.msgFrom.equals(that.msgFrom))
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_clientMsgID = true && this.isSetClientMsgID();
    boolean that_present_clientMsgID = true && that.isSetClientMsgID();
    if (this_present_clientMsgID || that_present_clientMsgID) {
      if (!(this_present_clientMsgID && that_present_clientMsgID))
        return false;
      if (!this.clientMsgID.equals(that.clientMsgID))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_atUsers = true && this.isSetAtUsers();
    boolean that_present_atUsers = true && that.isSetAtUsers();
    if (this_present_atUsers || that_present_atUsers) {
      if (!(this_present_atUsers && that_present_atUsers))
        return false;
      if (!this.atUsers.equals(that.atUsers))
        return false;
    }

    boolean this_present_replySeq = true;
    boolean that_present_replySeq = true;
    if (this_present_replySeq || that_present_replySeq) {
      if (!(this_present_replySeq && that_present_replySeq))
        return false;
      if (this.replySeq != that.replySeq)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_header = true && (isSetHeader());
    list.add(present_header);
    if (present_header)
      list.add(header);

    boolean present_platformID = true;
    list.add(present_platformID);
    if (present_platformID)
      list.add(platformID);

    boolean present_recvID = true && (isSetRecvID());
    list.add(present_recvID);
    if (present_recvID)
      list.add(recvID);

    boolean present_sessionType = true && (isSetSessionType());
    list.add(present_sessionType);
    if (present_sessionType)
      list.add(sessionType.getValue());

    boolean present_msgFrom = true && (isSetMsgFrom());
    list.add(present_msgFrom);
    if (present_msgFrom)
      list.add(msgFrom.getValue());

    boolean present_contentType = true && (isSetContentType());
    list.add(present_contentType);
    if (present_contentType)
      list.add(contentType.getValue());

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_clientMsgID = true && (isSetClientMsgID());
    list.add(present_clientMsgID);
    if (present_clientMsgID)
      list.add(clientMsgID);

    boolean present_options = true && (isSetOptions());
    list.add(present_options);
    if (present_options)
      list.add(options);

    boolean present_ext = true && (isSetExt());
    list.add(present_ext);
    if (present_ext)
      list.add(ext);

    boolean present_atUsers = true && (isSetAtUsers());
    list.add(present_atUsers);
    if (present_atUsers)
      list.add(atUsers);

    boolean present_replySeq = true;
    list.add(present_replySeq);
    if (present_replySeq)
      list.add(replySeq);

    return list.hashCode();
  }

  @Override
  public int compareTo(SendMsgReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformID()).compareTo(other.isSetPlatformID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformID, other.platformID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvID()).compareTo(other.isSetRecvID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvID, other.recvID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionType()).compareTo(other.isSetSessionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionType, other.sessionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgFrom()).compareTo(other.isSetMsgFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgFrom, other.msgFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientMsgID()).compareTo(other.isSetClientMsgID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientMsgID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientMsgID, other.clientMsgID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAtUsers()).compareTo(other.isSetAtUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atUsers, other.atUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplySeq()).compareTo(other.isSetReplySeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplySeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replySeq, other.replySeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SendMsgReq(");
    boolean first = true;

    sb.append("header:");
    if (this.header == null) {
      sb.append("null");
    } else {
      sb.append(this.header);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platformID:");
    sb.append(this.platformID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recvID:");
    if (this.recvID == null) {
      sb.append("null");
    } else {
      sb.append(this.recvID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionType:");
    if (this.sessionType == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgFrom:");
    if (this.msgFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.msgFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    if (this.contentType == null) {
      sb.append("null");
    } else {
      sb.append(this.contentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientMsgID:");
    if (this.clientMsgID == null) {
      sb.append("null");
    } else {
      sb.append(this.clientMsgID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ext:");
    if (this.ext == null) {
      sb.append("null");
    } else {
      sb.append(this.ext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("atUsers:");
    if (this.atUsers == null) {
      sb.append("null");
    } else {
      sb.append(this.atUsers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replySeq:");
    sb.append(this.replySeq);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SendMsgReqStandardSchemeFactory implements SchemeFactory {
    public SendMsgReqStandardScheme getScheme() {
      return new SendMsgReqStandardScheme();
    }
  }

  private static class SendMsgReqStandardScheme extends StandardScheme<SendMsgReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SendMsgReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new Header();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLATFORM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformID = iprot.readI32();
              struct.setPlatformIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECV_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recvID = iprot.readString();
              struct.setRecvIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionType = thrift_gen.oasis_im.rpc.SESSION_TYPE.findByValue(iprot.readI32());
              struct.setSessionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MSG_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgFrom = thrift_gen.oasis_im.rpc.MSG_FROM.findByValue(iprot.readI32());
              struct.setMsgFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentType = thrift_gen.oasis_im.rpc.CONTENT_TYPE.findByValue(iprot.readI32());
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLIENT_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientMsgID = iprot.readString();
              struct.setClientMsgIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.options = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.options.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.ext = new HashMap<String,String>(2*_map4.size);
                String _key5;
                String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.ext.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AT_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.atUsers = new ArrayList<thrift_gen.oasis_im.rpc.AtUser>(_list8.size);
                thrift_gen.oasis_im.rpc.AtUser _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new thrift_gen.oasis_im.rpc.AtUser();
                  _elem9.read(iprot);
                  struct.atUsers.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setAtUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REPLY_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.replySeq = iprot.readI64();
              struct.setReplySeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SendMsgReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.header != null) {
        oprot.writeFieldBegin(HEADER_FIELD_DESC);
        struct.header.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATFORM_ID_FIELD_DESC);
      oprot.writeI32(struct.platformID);
      oprot.writeFieldEnd();
      if (struct.recvID != null) {
        oprot.writeFieldBegin(RECV_ID_FIELD_DESC);
        oprot.writeString(struct.recvID);
        oprot.writeFieldEnd();
      }
      if (struct.sessionType != null) {
        oprot.writeFieldBegin(SESSION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sessionType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.msgFrom != null) {
        oprot.writeFieldBegin(MSG_FROM_FIELD_DESC);
        oprot.writeI32(struct.msgFrom.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.contentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.contentType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.clientMsgID != null) {
        oprot.writeFieldBegin(CLIENT_MSG_ID_FIELD_DESC);
        oprot.writeString(struct.clientMsgID);
        oprot.writeFieldEnd();
      }
      if (struct.options != null) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.options.size()));
          for (Map.Entry<String, String> _iter11 : struct.options.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ext != null) {
        oprot.writeFieldBegin(EXT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.ext.size()));
          for (Map.Entry<String, String> _iter12 : struct.ext.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.atUsers != null) {
        oprot.writeFieldBegin(AT_USERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.atUsers.size()));
          for (thrift_gen.oasis_im.rpc.AtUser _iter13 : struct.atUsers)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPLY_SEQ_FIELD_DESC);
      oprot.writeI64(struct.replySeq);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SendMsgReqTupleSchemeFactory implements SchemeFactory {
    public SendMsgReqTupleScheme getScheme() {
      return new SendMsgReqTupleScheme();
    }
  }

  private static class SendMsgReqTupleScheme extends TupleScheme<SendMsgReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SendMsgReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      if (struct.isSetPlatformID()) {
        optionals.set(1);
      }
      if (struct.isSetRecvID()) {
        optionals.set(2);
      }
      if (struct.isSetSessionType()) {
        optionals.set(3);
      }
      if (struct.isSetMsgFrom()) {
        optionals.set(4);
      }
      if (struct.isSetContentType()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetClientMsgID()) {
        optionals.set(7);
      }
      if (struct.isSetOptions()) {
        optionals.set(8);
      }
      if (struct.isSetExt()) {
        optionals.set(9);
      }
      if (struct.isSetAtUsers()) {
        optionals.set(10);
      }
      if (struct.isSetReplySeq()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
      if (struct.isSetPlatformID()) {
        oprot.writeI32(struct.platformID);
      }
      if (struct.isSetRecvID()) {
        oprot.writeString(struct.recvID);
      }
      if (struct.isSetSessionType()) {
        oprot.writeI32(struct.sessionType.getValue());
      }
      if (struct.isSetMsgFrom()) {
        oprot.writeI32(struct.msgFrom.getValue());
      }
      if (struct.isSetContentType()) {
        oprot.writeI32(struct.contentType.getValue());
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetClientMsgID()) {
        oprot.writeString(struct.clientMsgID);
      }
      if (struct.isSetOptions()) {
        {
          oprot.writeI32(struct.options.size());
          for (Map.Entry<String, String> _iter14 : struct.options.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
        }
      }
      if (struct.isSetExt()) {
        {
          oprot.writeI32(struct.ext.size());
          for (Map.Entry<String, String> _iter15 : struct.ext.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetAtUsers()) {
        {
          oprot.writeI32(struct.atUsers.size());
          for (thrift_gen.oasis_im.rpc.AtUser _iter16 : struct.atUsers)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetReplySeq()) {
        oprot.writeI64(struct.replySeq);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SendMsgReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.header = new Header();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.platformID = iprot.readI32();
        struct.setPlatformIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.recvID = iprot.readString();
        struct.setRecvIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sessionType = thrift_gen.oasis_im.rpc.SESSION_TYPE.findByValue(iprot.readI32());
        struct.setSessionTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.msgFrom = thrift_gen.oasis_im.rpc.MSG_FROM.findByValue(iprot.readI32());
        struct.setMsgFromIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contentType = thrift_gen.oasis_im.rpc.CONTENT_TYPE.findByValue(iprot.readI32());
        struct.setContentTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.clientMsgID = iprot.readString();
        struct.setClientMsgIDIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map17 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.options = new HashMap<String,String>(2*_map17.size);
          String _key18;
          String _val19;
          for (int _i20 = 0; _i20 < _map17.size; ++_i20)
          {
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.options.put(_key18, _val19);
          }
        }
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map21 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ext = new HashMap<String,String>(2*_map21.size);
          String _key22;
          String _val23;
          for (int _i24 = 0; _i24 < _map21.size; ++_i24)
          {
            _key22 = iprot.readString();
            _val23 = iprot.readString();
            struct.ext.put(_key22, _val23);
          }
        }
        struct.setExtIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.atUsers = new ArrayList<thrift_gen.oasis_im.rpc.AtUser>(_list25.size);
          thrift_gen.oasis_im.rpc.AtUser _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = new thrift_gen.oasis_im.rpc.AtUser();
            _elem26.read(iprot);
            struct.atUsers.add(_elem26);
          }
        }
        struct.setAtUsersIsSet(true);
      }
      if (incoming.get(11)) {
        struct.replySeq = iprot.readI64();
        struct.setReplySeqIsSet(true);
      }
    }
  }

}


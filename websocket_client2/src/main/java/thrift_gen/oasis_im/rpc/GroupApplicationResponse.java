/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-06")
public class GroupApplicationResponse implements org.apache.thrift.TBase<GroupApplicationResponse, GroupApplicationResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GroupApplicationResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupApplicationResponse");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUserID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FROM_USER_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUserNickName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FROM_USER_FACE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fromUserFaceUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TO_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toUserID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TO_USER_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toUserNickName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TO_USER_FACE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("toUserFaceUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ADD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField REQUEST_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("requestMsg", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HANDLED_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("handledMsg", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField HANDLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("handleStatus", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField HANDLE_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("handleResult", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupApplicationResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupApplicationResponseTupleSchemeFactory());
  }

  public long requestId; // required
  public String groupID; // required
  public String ownerID; // required
  public String fromUserID; // required
  public String fromUserNickName; // required
  public String fromUserFaceUrl; // required
  public String toUserID; // required
  public String toUserNickName; // required
  public String toUserFaceUrl; // required
  public long addTime; // required
  public String requestMsg; // required
  public String handledMsg; // required
  public int type; // required
  public int handleStatus; // required
  public int handleResult; // required
  public String serverID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "requestId"),
    GROUP_ID((short)2, "groupID"),
    OWNER_ID((short)3, "ownerID"),
    FROM_USER_ID((short)4, "fromUserID"),
    FROM_USER_NICK_NAME((short)5, "fromUserNickName"),
    FROM_USER_FACE_URL((short)6, "fromUserFaceUrl"),
    TO_USER_ID((short)7, "toUserID"),
    TO_USER_NICK_NAME((short)8, "toUserNickName"),
    TO_USER_FACE_URL((short)9, "toUserFaceUrl"),
    ADD_TIME((short)10, "addTime"),
    REQUEST_MSG((short)11, "requestMsg"),
    HANDLED_MSG((short)12, "handledMsg"),
    TYPE((short)13, "type"),
    HANDLE_STATUS((short)14, "handleStatus"),
    HANDLE_RESULT((short)15, "handleResult"),
    SERVER_ID((short)16, "serverID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // GROUP_ID
          return GROUP_ID;
        case 3: // OWNER_ID
          return OWNER_ID;
        case 4: // FROM_USER_ID
          return FROM_USER_ID;
        case 5: // FROM_USER_NICK_NAME
          return FROM_USER_NICK_NAME;
        case 6: // FROM_USER_FACE_URL
          return FROM_USER_FACE_URL;
        case 7: // TO_USER_ID
          return TO_USER_ID;
        case 8: // TO_USER_NICK_NAME
          return TO_USER_NICK_NAME;
        case 9: // TO_USER_FACE_URL
          return TO_USER_FACE_URL;
        case 10: // ADD_TIME
          return ADD_TIME;
        case 11: // REQUEST_MSG
          return REQUEST_MSG;
        case 12: // HANDLED_MSG
          return HANDLED_MSG;
        case 13: // TYPE
          return TYPE;
        case 14: // HANDLE_STATUS
          return HANDLE_STATUS;
        case 15: // HANDLE_RESULT
          return HANDLE_RESULT;
        case 16: // SERVER_ID
          return SERVER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUESTID_ISSET_ID = 0;
  private static final int __ADDTIME_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private static final int __HANDLESTATUS_ISSET_ID = 3;
  private static final int __HANDLERESULT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("fromUserID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_USER_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromUserNickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_USER_FACE_URL, new org.apache.thrift.meta_data.FieldMetaData("fromUserFaceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("toUserID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_USER_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("toUserNickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_USER_FACE_URL, new org.apache.thrift.meta_data.FieldMetaData("toUserFaceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_TIME, new org.apache.thrift.meta_data.FieldMetaData("addTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_MSG, new org.apache.thrift.meta_data.FieldMetaData("requestMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLED_MSG, new org.apache.thrift.meta_data.FieldMetaData("handledMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("handleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDLE_RESULT, new org.apache.thrift.meta_data.FieldMetaData("handleResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupApplicationResponse.class, metaDataMap);
  }

  public GroupApplicationResponse() {
  }

  public GroupApplicationResponse(
    long requestId,
    String groupID,
    String ownerID,
    String fromUserID,
    String fromUserNickName,
    String fromUserFaceUrl,
    String toUserID,
    String toUserNickName,
    String toUserFaceUrl,
    long addTime,
    String requestMsg,
    String handledMsg,
    int type,
    int handleStatus,
    int handleResult,
    String serverID)
  {
    this();
    this.requestId = requestId;
    setRequestIdIsSet(true);
    this.groupID = groupID;
    this.ownerID = ownerID;
    this.fromUserID = fromUserID;
    this.fromUserNickName = fromUserNickName;
    this.fromUserFaceUrl = fromUserFaceUrl;
    this.toUserID = toUserID;
    this.toUserNickName = toUserNickName;
    this.toUserFaceUrl = toUserFaceUrl;
    this.addTime = addTime;
    setAddTimeIsSet(true);
    this.requestMsg = requestMsg;
    this.handledMsg = handledMsg;
    this.type = type;
    setTypeIsSet(true);
    this.handleStatus = handleStatus;
    setHandleStatusIsSet(true);
    this.handleResult = handleResult;
    setHandleResultIsSet(true);
    this.serverID = serverID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupApplicationResponse(GroupApplicationResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.requestId = other.requestId;
    if (other.isSetGroupID()) {
      this.groupID = other.groupID;
    }
    if (other.isSetOwnerID()) {
      this.ownerID = other.ownerID;
    }
    if (other.isSetFromUserID()) {
      this.fromUserID = other.fromUserID;
    }
    if (other.isSetFromUserNickName()) {
      this.fromUserNickName = other.fromUserNickName;
    }
    if (other.isSetFromUserFaceUrl()) {
      this.fromUserFaceUrl = other.fromUserFaceUrl;
    }
    if (other.isSetToUserID()) {
      this.toUserID = other.toUserID;
    }
    if (other.isSetToUserNickName()) {
      this.toUserNickName = other.toUserNickName;
    }
    if (other.isSetToUserFaceUrl()) {
      this.toUserFaceUrl = other.toUserFaceUrl;
    }
    this.addTime = other.addTime;
    if (other.isSetRequestMsg()) {
      this.requestMsg = other.requestMsg;
    }
    if (other.isSetHandledMsg()) {
      this.handledMsg = other.handledMsg;
    }
    this.type = other.type;
    this.handleStatus = other.handleStatus;
    this.handleResult = other.handleResult;
    if (other.isSetServerID()) {
      this.serverID = other.serverID;
    }
  }

  public GroupApplicationResponse deepCopy() {
    return new GroupApplicationResponse(this);
  }

  @Override
  public void clear() {
    setRequestIdIsSet(false);
    this.requestId = 0;
    this.groupID = null;
    this.ownerID = null;
    this.fromUserID = null;
    this.fromUserNickName = null;
    this.fromUserFaceUrl = null;
    this.toUserID = null;
    this.toUserNickName = null;
    this.toUserFaceUrl = null;
    setAddTimeIsSet(false);
    this.addTime = 0;
    this.requestMsg = null;
    this.handledMsg = null;
    setTypeIsSet(false);
    this.type = 0;
    setHandleStatusIsSet(false);
    this.handleStatus = 0;
    setHandleResultIsSet(false);
    this.handleResult = 0;
    this.serverID = null;
  }

  public long getRequestId() {
    return this.requestId;
  }

  public GroupApplicationResponse setRequestId(long requestId) {
    this.requestId = requestId;
    setRequestIdIsSet(true);
    return this;
  }

  public void unsetRequestId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public String getGroupID() {
    return this.groupID;
  }

  public GroupApplicationResponse setGroupID(String groupID) {
    this.groupID = groupID;
    return this;
  }

  public void unsetGroupID() {
    this.groupID = null;
  }

  /** Returns true if field groupID is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupID() {
    return this.groupID != null;
  }

  public void setGroupIDIsSet(boolean value) {
    if (!value) {
      this.groupID = null;
    }
  }

  public String getOwnerID() {
    return this.ownerID;
  }

  public GroupApplicationResponse setOwnerID(String ownerID) {
    this.ownerID = ownerID;
    return this;
  }

  public void unsetOwnerID() {
    this.ownerID = null;
  }

  /** Returns true if field ownerID is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerID() {
    return this.ownerID != null;
  }

  public void setOwnerIDIsSet(boolean value) {
    if (!value) {
      this.ownerID = null;
    }
  }

  public String getFromUserID() {
    return this.fromUserID;
  }

  public GroupApplicationResponse setFromUserID(String fromUserID) {
    this.fromUserID = fromUserID;
    return this;
  }

  public void unsetFromUserID() {
    this.fromUserID = null;
  }

  /** Returns true if field fromUserID is set (has been assigned a value) and false otherwise */
  public boolean isSetFromUserID() {
    return this.fromUserID != null;
  }

  public void setFromUserIDIsSet(boolean value) {
    if (!value) {
      this.fromUserID = null;
    }
  }

  public String getFromUserNickName() {
    return this.fromUserNickName;
  }

  public GroupApplicationResponse setFromUserNickName(String fromUserNickName) {
    this.fromUserNickName = fromUserNickName;
    return this;
  }

  public void unsetFromUserNickName() {
    this.fromUserNickName = null;
  }

  /** Returns true if field fromUserNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromUserNickName() {
    return this.fromUserNickName != null;
  }

  public void setFromUserNickNameIsSet(boolean value) {
    if (!value) {
      this.fromUserNickName = null;
    }
  }

  public String getFromUserFaceUrl() {
    return this.fromUserFaceUrl;
  }

  public GroupApplicationResponse setFromUserFaceUrl(String fromUserFaceUrl) {
    this.fromUserFaceUrl = fromUserFaceUrl;
    return this;
  }

  public void unsetFromUserFaceUrl() {
    this.fromUserFaceUrl = null;
  }

  /** Returns true if field fromUserFaceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFromUserFaceUrl() {
    return this.fromUserFaceUrl != null;
  }

  public void setFromUserFaceUrlIsSet(boolean value) {
    if (!value) {
      this.fromUserFaceUrl = null;
    }
  }

  public String getToUserID() {
    return this.toUserID;
  }

  public GroupApplicationResponse setToUserID(String toUserID) {
    this.toUserID = toUserID;
    return this;
  }

  public void unsetToUserID() {
    this.toUserID = null;
  }

  /** Returns true if field toUserID is set (has been assigned a value) and false otherwise */
  public boolean isSetToUserID() {
    return this.toUserID != null;
  }

  public void setToUserIDIsSet(boolean value) {
    if (!value) {
      this.toUserID = null;
    }
  }

  public String getToUserNickName() {
    return this.toUserNickName;
  }

  public GroupApplicationResponse setToUserNickName(String toUserNickName) {
    this.toUserNickName = toUserNickName;
    return this;
  }

  public void unsetToUserNickName() {
    this.toUserNickName = null;
  }

  /** Returns true if field toUserNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetToUserNickName() {
    return this.toUserNickName != null;
  }

  public void setToUserNickNameIsSet(boolean value) {
    if (!value) {
      this.toUserNickName = null;
    }
  }

  public String getToUserFaceUrl() {
    return this.toUserFaceUrl;
  }

  public GroupApplicationResponse setToUserFaceUrl(String toUserFaceUrl) {
    this.toUserFaceUrl = toUserFaceUrl;
    return this;
  }

  public void unsetToUserFaceUrl() {
    this.toUserFaceUrl = null;
  }

  /** Returns true if field toUserFaceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetToUserFaceUrl() {
    return this.toUserFaceUrl != null;
  }

  public void setToUserFaceUrlIsSet(boolean value) {
    if (!value) {
      this.toUserFaceUrl = null;
    }
  }

  public long getAddTime() {
    return this.addTime;
  }

  public GroupApplicationResponse setAddTime(long addTime) {
    this.addTime = addTime;
    setAddTimeIsSet(true);
    return this;
  }

  public void unsetAddTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDTIME_ISSET_ID);
  }

  /** Returns true if field addTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDTIME_ISSET_ID);
  }

  public void setAddTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDTIME_ISSET_ID, value);
  }

  public String getRequestMsg() {
    return this.requestMsg;
  }

  public GroupApplicationResponse setRequestMsg(String requestMsg) {
    this.requestMsg = requestMsg;
    return this;
  }

  public void unsetRequestMsg() {
    this.requestMsg = null;
  }

  /** Returns true if field requestMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestMsg() {
    return this.requestMsg != null;
  }

  public void setRequestMsgIsSet(boolean value) {
    if (!value) {
      this.requestMsg = null;
    }
  }

  public String getHandledMsg() {
    return this.handledMsg;
  }

  public GroupApplicationResponse setHandledMsg(String handledMsg) {
    this.handledMsg = handledMsg;
    return this;
  }

  public void unsetHandledMsg() {
    this.handledMsg = null;
  }

  /** Returns true if field handledMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetHandledMsg() {
    return this.handledMsg != null;
  }

  public void setHandledMsgIsSet(boolean value) {
    if (!value) {
      this.handledMsg = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public GroupApplicationResponse setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getHandleStatus() {
    return this.handleStatus;
  }

  public GroupApplicationResponse setHandleStatus(int handleStatus) {
    this.handleStatus = handleStatus;
    setHandleStatusIsSet(true);
    return this;
  }

  public void unsetHandleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLESTATUS_ISSET_ID);
  }

  /** Returns true if field handleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLESTATUS_ISSET_ID);
  }

  public void setHandleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLESTATUS_ISSET_ID, value);
  }

  public int getHandleResult() {
    return this.handleResult;
  }

  public GroupApplicationResponse setHandleResult(int handleResult) {
    this.handleResult = handleResult;
    setHandleResultIsSet(true);
    return this;
  }

  public void unsetHandleResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLERESULT_ISSET_ID);
  }

  /** Returns true if field handleResult is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleResult() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLERESULT_ISSET_ID);
  }

  public void setHandleResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLERESULT_ISSET_ID, value);
  }

  public String getServerID() {
    return this.serverID;
  }

  public GroupApplicationResponse setServerID(String serverID) {
    this.serverID = serverID;
    return this;
  }

  public void unsetServerID() {
    this.serverID = null;
  }

  /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
  public boolean isSetServerID() {
    return this.serverID != null;
  }

  public void setServerIDIsSet(boolean value) {
    if (!value) {
      this.serverID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((Long)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupID();
      } else {
        setGroupID((String)value);
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerID();
      } else {
        setOwnerID((String)value);
      }
      break;

    case FROM_USER_ID:
      if (value == null) {
        unsetFromUserID();
      } else {
        setFromUserID((String)value);
      }
      break;

    case FROM_USER_NICK_NAME:
      if (value == null) {
        unsetFromUserNickName();
      } else {
        setFromUserNickName((String)value);
      }
      break;

    case FROM_USER_FACE_URL:
      if (value == null) {
        unsetFromUserFaceUrl();
      } else {
        setFromUserFaceUrl((String)value);
      }
      break;

    case TO_USER_ID:
      if (value == null) {
        unsetToUserID();
      } else {
        setToUserID((String)value);
      }
      break;

    case TO_USER_NICK_NAME:
      if (value == null) {
        unsetToUserNickName();
      } else {
        setToUserNickName((String)value);
      }
      break;

    case TO_USER_FACE_URL:
      if (value == null) {
        unsetToUserFaceUrl();
      } else {
        setToUserFaceUrl((String)value);
      }
      break;

    case ADD_TIME:
      if (value == null) {
        unsetAddTime();
      } else {
        setAddTime((Long)value);
      }
      break;

    case REQUEST_MSG:
      if (value == null) {
        unsetRequestMsg();
      } else {
        setRequestMsg((String)value);
      }
      break;

    case HANDLED_MSG:
      if (value == null) {
        unsetHandledMsg();
      } else {
        setHandledMsg((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case HANDLE_STATUS:
      if (value == null) {
        unsetHandleStatus();
      } else {
        setHandleStatus((Integer)value);
      }
      break;

    case HANDLE_RESULT:
      if (value == null) {
        unsetHandleResult();
      } else {
        setHandleResult((Integer)value);
      }
      break;

    case SERVER_ID:
      if (value == null) {
        unsetServerID();
      } else {
        setServerID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return getRequestId();

    case GROUP_ID:
      return getGroupID();

    case OWNER_ID:
      return getOwnerID();

    case FROM_USER_ID:
      return getFromUserID();

    case FROM_USER_NICK_NAME:
      return getFromUserNickName();

    case FROM_USER_FACE_URL:
      return getFromUserFaceUrl();

    case TO_USER_ID:
      return getToUserID();

    case TO_USER_NICK_NAME:
      return getToUserNickName();

    case TO_USER_FACE_URL:
      return getToUserFaceUrl();

    case ADD_TIME:
      return getAddTime();

    case REQUEST_MSG:
      return getRequestMsg();

    case HANDLED_MSG:
      return getHandledMsg();

    case TYPE:
      return getType();

    case HANDLE_STATUS:
      return getHandleStatus();

    case HANDLE_RESULT:
      return getHandleResult();

    case SERVER_ID:
      return getServerID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequestId();
    case GROUP_ID:
      return isSetGroupID();
    case OWNER_ID:
      return isSetOwnerID();
    case FROM_USER_ID:
      return isSetFromUserID();
    case FROM_USER_NICK_NAME:
      return isSetFromUserNickName();
    case FROM_USER_FACE_URL:
      return isSetFromUserFaceUrl();
    case TO_USER_ID:
      return isSetToUserID();
    case TO_USER_NICK_NAME:
      return isSetToUserNickName();
    case TO_USER_FACE_URL:
      return isSetToUserFaceUrl();
    case ADD_TIME:
      return isSetAddTime();
    case REQUEST_MSG:
      return isSetRequestMsg();
    case HANDLED_MSG:
      return isSetHandledMsg();
    case TYPE:
      return isSetType();
    case HANDLE_STATUS:
      return isSetHandleStatus();
    case HANDLE_RESULT:
      return isSetHandleResult();
    case SERVER_ID:
      return isSetServerID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupApplicationResponse)
      return this.equals((GroupApplicationResponse)that);
    return false;
  }

  public boolean equals(GroupApplicationResponse that) {
    if (that == null)
      return false;

    boolean this_present_requestId = true;
    boolean that_present_requestId = true;
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (this.requestId != that.requestId)
        return false;
    }

    boolean this_present_groupID = true && this.isSetGroupID();
    boolean that_present_groupID = true && that.isSetGroupID();
    if (this_present_groupID || that_present_groupID) {
      if (!(this_present_groupID && that_present_groupID))
        return false;
      if (!this.groupID.equals(that.groupID))
        return false;
    }

    boolean this_present_ownerID = true && this.isSetOwnerID();
    boolean that_present_ownerID = true && that.isSetOwnerID();
    if (this_present_ownerID || that_present_ownerID) {
      if (!(this_present_ownerID && that_present_ownerID))
        return false;
      if (!this.ownerID.equals(that.ownerID))
        return false;
    }

    boolean this_present_fromUserID = true && this.isSetFromUserID();
    boolean that_present_fromUserID = true && that.isSetFromUserID();
    if (this_present_fromUserID || that_present_fromUserID) {
      if (!(this_present_fromUserID && that_present_fromUserID))
        return false;
      if (!this.fromUserID.equals(that.fromUserID))
        return false;
    }

    boolean this_present_fromUserNickName = true && this.isSetFromUserNickName();
    boolean that_present_fromUserNickName = true && that.isSetFromUserNickName();
    if (this_present_fromUserNickName || that_present_fromUserNickName) {
      if (!(this_present_fromUserNickName && that_present_fromUserNickName))
        return false;
      if (!this.fromUserNickName.equals(that.fromUserNickName))
        return false;
    }

    boolean this_present_fromUserFaceUrl = true && this.isSetFromUserFaceUrl();
    boolean that_present_fromUserFaceUrl = true && that.isSetFromUserFaceUrl();
    if (this_present_fromUserFaceUrl || that_present_fromUserFaceUrl) {
      if (!(this_present_fromUserFaceUrl && that_present_fromUserFaceUrl))
        return false;
      if (!this.fromUserFaceUrl.equals(that.fromUserFaceUrl))
        return false;
    }

    boolean this_present_toUserID = true && this.isSetToUserID();
    boolean that_present_toUserID = true && that.isSetToUserID();
    if (this_present_toUserID || that_present_toUserID) {
      if (!(this_present_toUserID && that_present_toUserID))
        return false;
      if (!this.toUserID.equals(that.toUserID))
        return false;
    }

    boolean this_present_toUserNickName = true && this.isSetToUserNickName();
    boolean that_present_toUserNickName = true && that.isSetToUserNickName();
    if (this_present_toUserNickName || that_present_toUserNickName) {
      if (!(this_present_toUserNickName && that_present_toUserNickName))
        return false;
      if (!this.toUserNickName.equals(that.toUserNickName))
        return false;
    }

    boolean this_present_toUserFaceUrl = true && this.isSetToUserFaceUrl();
    boolean that_present_toUserFaceUrl = true && that.isSetToUserFaceUrl();
    if (this_present_toUserFaceUrl || that_present_toUserFaceUrl) {
      if (!(this_present_toUserFaceUrl && that_present_toUserFaceUrl))
        return false;
      if (!this.toUserFaceUrl.equals(that.toUserFaceUrl))
        return false;
    }

    boolean this_present_addTime = true;
    boolean that_present_addTime = true;
    if (this_present_addTime || that_present_addTime) {
      if (!(this_present_addTime && that_present_addTime))
        return false;
      if (this.addTime != that.addTime)
        return false;
    }

    boolean this_present_requestMsg = true && this.isSetRequestMsg();
    boolean that_present_requestMsg = true && that.isSetRequestMsg();
    if (this_present_requestMsg || that_present_requestMsg) {
      if (!(this_present_requestMsg && that_present_requestMsg))
        return false;
      if (!this.requestMsg.equals(that.requestMsg))
        return false;
    }

    boolean this_present_handledMsg = true && this.isSetHandledMsg();
    boolean that_present_handledMsg = true && that.isSetHandledMsg();
    if (this_present_handledMsg || that_present_handledMsg) {
      if (!(this_present_handledMsg && that_present_handledMsg))
        return false;
      if (!this.handledMsg.equals(that.handledMsg))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_handleStatus = true;
    boolean that_present_handleStatus = true;
    if (this_present_handleStatus || that_present_handleStatus) {
      if (!(this_present_handleStatus && that_present_handleStatus))
        return false;
      if (this.handleStatus != that.handleStatus)
        return false;
    }

    boolean this_present_handleResult = true;
    boolean that_present_handleResult = true;
    if (this_present_handleResult || that_present_handleResult) {
      if (!(this_present_handleResult && that_present_handleResult))
        return false;
      if (this.handleResult != that.handleResult)
        return false;
    }

    boolean this_present_serverID = true && this.isSetServerID();
    boolean that_present_serverID = true && that.isSetServerID();
    if (this_present_serverID || that_present_serverID) {
      if (!(this_present_serverID && that_present_serverID))
        return false;
      if (!this.serverID.equals(that.serverID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_requestId = true;
    list.add(present_requestId);
    if (present_requestId)
      list.add(requestId);

    boolean present_groupID = true && (isSetGroupID());
    list.add(present_groupID);
    if (present_groupID)
      list.add(groupID);

    boolean present_ownerID = true && (isSetOwnerID());
    list.add(present_ownerID);
    if (present_ownerID)
      list.add(ownerID);

    boolean present_fromUserID = true && (isSetFromUserID());
    list.add(present_fromUserID);
    if (present_fromUserID)
      list.add(fromUserID);

    boolean present_fromUserNickName = true && (isSetFromUserNickName());
    list.add(present_fromUserNickName);
    if (present_fromUserNickName)
      list.add(fromUserNickName);

    boolean present_fromUserFaceUrl = true && (isSetFromUserFaceUrl());
    list.add(present_fromUserFaceUrl);
    if (present_fromUserFaceUrl)
      list.add(fromUserFaceUrl);

    boolean present_toUserID = true && (isSetToUserID());
    list.add(present_toUserID);
    if (present_toUserID)
      list.add(toUserID);

    boolean present_toUserNickName = true && (isSetToUserNickName());
    list.add(present_toUserNickName);
    if (present_toUserNickName)
      list.add(toUserNickName);

    boolean present_toUserFaceUrl = true && (isSetToUserFaceUrl());
    list.add(present_toUserFaceUrl);
    if (present_toUserFaceUrl)
      list.add(toUserFaceUrl);

    boolean present_addTime = true;
    list.add(present_addTime);
    if (present_addTime)
      list.add(addTime);

    boolean present_requestMsg = true && (isSetRequestMsg());
    list.add(present_requestMsg);
    if (present_requestMsg)
      list.add(requestMsg);

    boolean present_handledMsg = true && (isSetHandledMsg());
    list.add(present_handledMsg);
    if (present_handledMsg)
      list.add(handledMsg);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_handleStatus = true;
    list.add(present_handleStatus);
    if (present_handleStatus)
      list.add(handleStatus);

    boolean present_handleResult = true;
    list.add(present_handleResult);
    if (present_handleResult)
      list.add(handleResult);

    boolean present_serverID = true && (isSetServerID());
    list.add(present_serverID);
    if (present_serverID)
      list.add(serverID);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupApplicationResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupID()).compareTo(other.isSetGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupID, other.groupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerID()).compareTo(other.isSetOwnerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerID, other.ownerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromUserID()).compareTo(other.isSetFromUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUserID, other.fromUserID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromUserNickName()).compareTo(other.isSetFromUserNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromUserNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUserNickName, other.fromUserNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromUserFaceUrl()).compareTo(other.isSetFromUserFaceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromUserFaceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromUserFaceUrl, other.fromUserFaceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUserID()).compareTo(other.isSetToUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUserID, other.toUserID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUserNickName()).compareTo(other.isSetToUserNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUserNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUserNickName, other.toUserNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUserFaceUrl()).compareTo(other.isSetToUserFaceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUserFaceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUserFaceUrl, other.toUserFaceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddTime()).compareTo(other.isSetAddTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addTime, other.addTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestMsg()).compareTo(other.isSetRequestMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestMsg, other.requestMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandledMsg()).compareTo(other.isSetHandledMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandledMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handledMsg, other.handledMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleStatus()).compareTo(other.isSetHandleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleStatus, other.handleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleResult()).compareTo(other.isSetHandleResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleResult, other.handleResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupApplicationResponse(");
    boolean first = true;

    sb.append("requestId:");
    sb.append(this.requestId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupID:");
    if (this.groupID == null) {
      sb.append("null");
    } else {
      sb.append(this.groupID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerID:");
    if (this.ownerID == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromUserID:");
    if (this.fromUserID == null) {
      sb.append("null");
    } else {
      sb.append(this.fromUserID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromUserNickName:");
    if (this.fromUserNickName == null) {
      sb.append("null");
    } else {
      sb.append(this.fromUserNickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromUserFaceUrl:");
    if (this.fromUserFaceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.fromUserFaceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toUserID:");
    if (this.toUserID == null) {
      sb.append("null");
    } else {
      sb.append(this.toUserID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toUserNickName:");
    if (this.toUserNickName == null) {
      sb.append("null");
    } else {
      sb.append(this.toUserNickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toUserFaceUrl:");
    if (this.toUserFaceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.toUserFaceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addTime:");
    sb.append(this.addTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestMsg:");
    if (this.requestMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.requestMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handledMsg:");
    if (this.handledMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.handledMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleStatus:");
    sb.append(this.handleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleResult:");
    sb.append(this.handleResult);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverID:");
    if (this.serverID == null) {
      sb.append("null");
    } else {
      sb.append(this.serverID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupApplicationResponseStandardSchemeFactory implements SchemeFactory {
    public GroupApplicationResponseStandardScheme getScheme() {
      return new GroupApplicationResponseStandardScheme();
    }
  }

  private static class GroupApplicationResponseStandardScheme extends StandardScheme<GroupApplicationResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupApplicationResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestId = iprot.readI64();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupID = iprot.readString();
              struct.setGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerID = iprot.readString();
              struct.setOwnerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromUserID = iprot.readString();
              struct.setFromUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FROM_USER_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromUserNickName = iprot.readString();
              struct.setFromUserNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FROM_USER_FACE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromUserFaceUrl = iprot.readString();
              struct.setFromUserFaceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TO_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toUserID = iprot.readString();
              struct.setToUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TO_USER_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toUserNickName = iprot.readString();
              struct.setToUserNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TO_USER_FACE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toUserFaceUrl = iprot.readString();
              struct.setToUserFaceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ADD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.addTime = iprot.readI64();
              struct.setAddTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REQUEST_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestMsg = iprot.readString();
              struct.setRequestMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HANDLED_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handledMsg = iprot.readString();
              struct.setHandledMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HANDLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleStatus = iprot.readI32();
              struct.setHandleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HANDLE_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleResult = iprot.readI32();
              struct.setHandleResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverID = iprot.readString();
              struct.setServerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupApplicationResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI64(struct.requestId);
      oprot.writeFieldEnd();
      if (struct.groupID != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.groupID);
        oprot.writeFieldEnd();
      }
      if (struct.ownerID != null) {
        oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
        oprot.writeString(struct.ownerID);
        oprot.writeFieldEnd();
      }
      if (struct.fromUserID != null) {
        oprot.writeFieldBegin(FROM_USER_ID_FIELD_DESC);
        oprot.writeString(struct.fromUserID);
        oprot.writeFieldEnd();
      }
      if (struct.fromUserNickName != null) {
        oprot.writeFieldBegin(FROM_USER_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.fromUserNickName);
        oprot.writeFieldEnd();
      }
      if (struct.fromUserFaceUrl != null) {
        oprot.writeFieldBegin(FROM_USER_FACE_URL_FIELD_DESC);
        oprot.writeString(struct.fromUserFaceUrl);
        oprot.writeFieldEnd();
      }
      if (struct.toUserID != null) {
        oprot.writeFieldBegin(TO_USER_ID_FIELD_DESC);
        oprot.writeString(struct.toUserID);
        oprot.writeFieldEnd();
      }
      if (struct.toUserNickName != null) {
        oprot.writeFieldBegin(TO_USER_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.toUserNickName);
        oprot.writeFieldEnd();
      }
      if (struct.toUserFaceUrl != null) {
        oprot.writeFieldBegin(TO_USER_FACE_URL_FIELD_DESC);
        oprot.writeString(struct.toUserFaceUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
      oprot.writeI64(struct.addTime);
      oprot.writeFieldEnd();
      if (struct.requestMsg != null) {
        oprot.writeFieldBegin(REQUEST_MSG_FIELD_DESC);
        oprot.writeString(struct.requestMsg);
        oprot.writeFieldEnd();
      }
      if (struct.handledMsg != null) {
        oprot.writeFieldBegin(HANDLED_MSG_FIELD_DESC);
        oprot.writeString(struct.handledMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.handleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HANDLE_RESULT_FIELD_DESC);
      oprot.writeI32(struct.handleResult);
      oprot.writeFieldEnd();
      if (struct.serverID != null) {
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.serverID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupApplicationResponseTupleSchemeFactory implements SchemeFactory {
    public GroupApplicationResponseTupleScheme getScheme() {
      return new GroupApplicationResponseTupleScheme();
    }
  }

  private static class GroupApplicationResponseTupleScheme extends TupleScheme<GroupApplicationResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupApplicationResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRequestId()) {
        optionals.set(0);
      }
      if (struct.isSetGroupID()) {
        optionals.set(1);
      }
      if (struct.isSetOwnerID()) {
        optionals.set(2);
      }
      if (struct.isSetFromUserID()) {
        optionals.set(3);
      }
      if (struct.isSetFromUserNickName()) {
        optionals.set(4);
      }
      if (struct.isSetFromUserFaceUrl()) {
        optionals.set(5);
      }
      if (struct.isSetToUserID()) {
        optionals.set(6);
      }
      if (struct.isSetToUserNickName()) {
        optionals.set(7);
      }
      if (struct.isSetToUserFaceUrl()) {
        optionals.set(8);
      }
      if (struct.isSetAddTime()) {
        optionals.set(9);
      }
      if (struct.isSetRequestMsg()) {
        optionals.set(10);
      }
      if (struct.isSetHandledMsg()) {
        optionals.set(11);
      }
      if (struct.isSetType()) {
        optionals.set(12);
      }
      if (struct.isSetHandleStatus()) {
        optionals.set(13);
      }
      if (struct.isSetHandleResult()) {
        optionals.set(14);
      }
      if (struct.isSetServerID()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetRequestId()) {
        oprot.writeI64(struct.requestId);
      }
      if (struct.isSetGroupID()) {
        oprot.writeString(struct.groupID);
      }
      if (struct.isSetOwnerID()) {
        oprot.writeString(struct.ownerID);
      }
      if (struct.isSetFromUserID()) {
        oprot.writeString(struct.fromUserID);
      }
      if (struct.isSetFromUserNickName()) {
        oprot.writeString(struct.fromUserNickName);
      }
      if (struct.isSetFromUserFaceUrl()) {
        oprot.writeString(struct.fromUserFaceUrl);
      }
      if (struct.isSetToUserID()) {
        oprot.writeString(struct.toUserID);
      }
      if (struct.isSetToUserNickName()) {
        oprot.writeString(struct.toUserNickName);
      }
      if (struct.isSetToUserFaceUrl()) {
        oprot.writeString(struct.toUserFaceUrl);
      }
      if (struct.isSetAddTime()) {
        oprot.writeI64(struct.addTime);
      }
      if (struct.isSetRequestMsg()) {
        oprot.writeString(struct.requestMsg);
      }
      if (struct.isSetHandledMsg()) {
        oprot.writeString(struct.handledMsg);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetHandleStatus()) {
        oprot.writeI32(struct.handleStatus);
      }
      if (struct.isSetHandleResult()) {
        oprot.writeI32(struct.handleResult);
      }
      if (struct.isSetServerID()) {
        oprot.writeString(struct.serverID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupApplicationResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.requestId = iprot.readI64();
        struct.setRequestIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groupID = iprot.readString();
        struct.setGroupIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ownerID = iprot.readString();
        struct.setOwnerIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromUserID = iprot.readString();
        struct.setFromUserIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fromUserNickName = iprot.readString();
        struct.setFromUserNickNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fromUserFaceUrl = iprot.readString();
        struct.setFromUserFaceUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.toUserID = iprot.readString();
        struct.setToUserIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.toUserNickName = iprot.readString();
        struct.setToUserNickNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.toUserFaceUrl = iprot.readString();
        struct.setToUserFaceUrlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.addTime = iprot.readI64();
        struct.setAddTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.requestMsg = iprot.readString();
        struct.setRequestMsgIsSet(true);
      }
      if (incoming.get(11)) {
        struct.handledMsg = iprot.readString();
        struct.setHandledMsgIsSet(true);
      }
      if (incoming.get(12)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.handleStatus = iprot.readI32();
        struct.setHandleStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.handleResult = iprot.readI32();
        struct.setHandleResultIsSet(true);
      }
      if (incoming.get(15)) {
        struct.serverID = iprot.readString();
        struct.setServerIDIsSet(true);
      }
    }
  }

}


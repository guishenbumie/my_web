/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-06")
public class ApplyUserInfo implements org.apache.thrift.TBase<ApplyUserInfo, ApplyUserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyUserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyUserInfo");

  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("applyTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REQ_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("reqMessage", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplyUserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplyUserInfoTupleSchemeFactory());
  }

  public UserInfo user; // required
  public int flag; // required
  public String applyTime; // required
  public String reqMessage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER((short)1, "user"),
    FLAG((short)2, "flag"),
    APPLY_TIME((short)3, "applyTime"),
    REQ_MESSAGE((short)4, "reqMessage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // FLAG
          return FLAG;
        case 3: // APPLY_TIME
          return APPLY_TIME;
        case 4: // REQ_MESSAGE
          return REQ_MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLAG_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("reqMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyUserInfo.class, metaDataMap);
  }

  public ApplyUserInfo() {
  }

  public ApplyUserInfo(
    UserInfo user,
    int flag,
    String applyTime,
    String reqMessage)
  {
    this();
    this.user = user;
    this.flag = flag;
    setFlagIsSet(true);
    this.applyTime = applyTime;
    this.reqMessage = reqMessage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplyUserInfo(ApplyUserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUser()) {
      this.user = new UserInfo(other.user);
    }
    this.flag = other.flag;
    if (other.isSetApplyTime()) {
      this.applyTime = other.applyTime;
    }
    if (other.isSetReqMessage()) {
      this.reqMessage = other.reqMessage;
    }
  }

  public ApplyUserInfo deepCopy() {
    return new ApplyUserInfo(this);
  }

  @Override
  public void clear() {
    this.user = null;
    setFlagIsSet(false);
    this.flag = 0;
    this.applyTime = null;
    this.reqMessage = null;
  }

  public UserInfo getUser() {
    return this.user;
  }

  public ApplyUserInfo setUser(UserInfo user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public int getFlag() {
    return this.flag;
  }

  public ApplyUserInfo setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public String getApplyTime() {
    return this.applyTime;
  }

  public ApplyUserInfo setApplyTime(String applyTime) {
    this.applyTime = applyTime;
    return this;
  }

  public void unsetApplyTime() {
    this.applyTime = null;
  }

  /** Returns true if field applyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyTime() {
    return this.applyTime != null;
  }

  public void setApplyTimeIsSet(boolean value) {
    if (!value) {
      this.applyTime = null;
    }
  }

  public String getReqMessage() {
    return this.reqMessage;
  }

  public ApplyUserInfo setReqMessage(String reqMessage) {
    this.reqMessage = reqMessage;
    return this;
  }

  public void unsetReqMessage() {
    this.reqMessage = null;
  }

  /** Returns true if field reqMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetReqMessage() {
    return this.reqMessage != null;
  }

  public void setReqMessageIsSet(boolean value) {
    if (!value) {
      this.reqMessage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((UserInfo)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    case APPLY_TIME:
      if (value == null) {
        unsetApplyTime();
      } else {
        setApplyTime((String)value);
      }
      break;

    case REQ_MESSAGE:
      if (value == null) {
        unsetReqMessage();
      } else {
        setReqMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER:
      return getUser();

    case FLAG:
      return getFlag();

    case APPLY_TIME:
      return getApplyTime();

    case REQ_MESSAGE:
      return getReqMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER:
      return isSetUser();
    case FLAG:
      return isSetFlag();
    case APPLY_TIME:
      return isSetApplyTime();
    case REQ_MESSAGE:
      return isSetReqMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplyUserInfo)
      return this.equals((ApplyUserInfo)that);
    return false;
  }

  public boolean equals(ApplyUserInfo that) {
    if (that == null)
      return false;

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_applyTime = true && this.isSetApplyTime();
    boolean that_present_applyTime = true && that.isSetApplyTime();
    if (this_present_applyTime || that_present_applyTime) {
      if (!(this_present_applyTime && that_present_applyTime))
        return false;
      if (!this.applyTime.equals(that.applyTime))
        return false;
    }

    boolean this_present_reqMessage = true && this.isSetReqMessage();
    boolean that_present_reqMessage = true && that.isSetReqMessage();
    if (this_present_reqMessage || that_present_reqMessage) {
      if (!(this_present_reqMessage && that_present_reqMessage))
        return false;
      if (!this.reqMessage.equals(that.reqMessage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_flag = true;
    list.add(present_flag);
    if (present_flag)
      list.add(flag);

    boolean present_applyTime = true && (isSetApplyTime());
    list.add(present_applyTime);
    if (present_applyTime)
      list.add(applyTime);

    boolean present_reqMessage = true && (isSetReqMessage());
    list.add(present_reqMessage);
    if (present_reqMessage)
      list.add(reqMessage);

    return list.hashCode();
  }

  @Override
  public int compareTo(ApplyUserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqMessage()).compareTo(other.isSetReqMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqMessage, other.reqMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplyUserInfo(");
    boolean first = true;

    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyTime:");
    if (this.applyTime == null) {
      sb.append("null");
    } else {
      sb.append(this.applyTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqMessage:");
    if (this.reqMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.reqMessage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (user != null) {
      user.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplyUserInfoStandardSchemeFactory implements SchemeFactory {
    public ApplyUserInfoStandardScheme getScheme() {
      return new ApplyUserInfoStandardScheme();
    }
  }

  private static class ApplyUserInfoStandardScheme extends StandardScheme<ApplyUserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyUserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new UserInfo();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPLY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyTime = iprot.readString();
              struct.setApplyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQ_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqMessage = iprot.readString();
              struct.setReqMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyUserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      if (struct.applyTime != null) {
        oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
        oprot.writeString(struct.applyTime);
        oprot.writeFieldEnd();
      }
      if (struct.reqMessage != null) {
        oprot.writeFieldBegin(REQ_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.reqMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplyUserInfoTupleSchemeFactory implements SchemeFactory {
    public ApplyUserInfoTupleScheme getScheme() {
      return new ApplyUserInfoTupleScheme();
    }
  }

  private static class ApplyUserInfoTupleScheme extends TupleScheme<ApplyUserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplyUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUser()) {
        optionals.set(0);
      }
      if (struct.isSetFlag()) {
        optionals.set(1);
      }
      if (struct.isSetApplyTime()) {
        optionals.set(2);
      }
      if (struct.isSetReqMessage()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
      if (struct.isSetApplyTime()) {
        oprot.writeString(struct.applyTime);
      }
      if (struct.isSetReqMessage()) {
        oprot.writeString(struct.reqMessage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplyUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.user = new UserInfo();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(2)) {
        struct.applyTime = iprot.readString();
        struct.setApplyTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reqMessage = iprot.readString();
        struct.setReqMessageIsSet(true);
      }
    }
  }

}


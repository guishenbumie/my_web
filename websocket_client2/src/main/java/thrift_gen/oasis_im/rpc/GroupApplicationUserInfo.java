/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-06")
public class GroupApplicationUserInfo implements org.apache.thrift.TBase<GroupApplicationUserInfo, GroupApplicationUserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<GroupApplicationUserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupApplicationUserInfo");

  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REQ_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("reqMsg", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField APPLICATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HANDLED_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("handledMsg", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupApplicationUserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupApplicationUserInfoTupleSchemeFactory());
  }

  public String groupID; // required
  public String uid; // required
  public String name; // required
  public String icon; // required
  public String reqMsg; // required
  public long applicationTime; // required
  public int flag; // required
  public String operatorID; // required
  public String handledMsg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_ID((short)1, "groupID"),
    UID((short)2, "uid"),
    NAME((short)3, "name"),
    ICON((short)4, "icon"),
    REQ_MSG((short)5, "reqMsg"),
    APPLICATION_TIME((short)6, "applicationTime"),
    FLAG((short)7, "flag"),
    OPERATOR_ID((short)8, "operatorID"),
    HANDLED_MSG((short)9, "handledMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_ID
          return GROUP_ID;
        case 2: // UID
          return UID;
        case 3: // NAME
          return NAME;
        case 4: // ICON
          return ICON;
        case 5: // REQ_MSG
          return REQ_MSG;
        case 6: // APPLICATION_TIME
          return APPLICATION_TIME;
        case 7: // FLAG
          return FLAG;
        case 8: // OPERATOR_ID
          return OPERATOR_ID;
        case 9: // HANDLED_MSG
          return HANDLED_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPLICATIONTIME_ISSET_ID = 0;
  private static final int __FLAG_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_MSG, new org.apache.thrift.meta_data.FieldMetaData("reqMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("applicationTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLED_MSG, new org.apache.thrift.meta_data.FieldMetaData("handledMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupApplicationUserInfo.class, metaDataMap);
  }

  public GroupApplicationUserInfo() {
  }

  public GroupApplicationUserInfo(
    String groupID,
    String uid,
    String name,
    String icon,
    String reqMsg,
    long applicationTime,
    int flag,
    String operatorID,
    String handledMsg)
  {
    this();
    this.groupID = groupID;
    this.uid = uid;
    this.name = name;
    this.icon = icon;
    this.reqMsg = reqMsg;
    this.applicationTime = applicationTime;
    setApplicationTimeIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
    this.operatorID = operatorID;
    this.handledMsg = handledMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupApplicationUserInfo(GroupApplicationUserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGroupID()) {
      this.groupID = other.groupID;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    if (other.isSetReqMsg()) {
      this.reqMsg = other.reqMsg;
    }
    this.applicationTime = other.applicationTime;
    this.flag = other.flag;
    if (other.isSetOperatorID()) {
      this.operatorID = other.operatorID;
    }
    if (other.isSetHandledMsg()) {
      this.handledMsg = other.handledMsg;
    }
  }

  public GroupApplicationUserInfo deepCopy() {
    return new GroupApplicationUserInfo(this);
  }

  @Override
  public void clear() {
    this.groupID = null;
    this.uid = null;
    this.name = null;
    this.icon = null;
    this.reqMsg = null;
    setApplicationTimeIsSet(false);
    this.applicationTime = 0;
    setFlagIsSet(false);
    this.flag = 0;
    this.operatorID = null;
    this.handledMsg = null;
  }

  public String getGroupID() {
    return this.groupID;
  }

  public GroupApplicationUserInfo setGroupID(String groupID) {
    this.groupID = groupID;
    return this;
  }

  public void unsetGroupID() {
    this.groupID = null;
  }

  /** Returns true if field groupID is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupID() {
    return this.groupID != null;
  }

  public void setGroupIDIsSet(boolean value) {
    if (!value) {
      this.groupID = null;
    }
  }

  public String getUid() {
    return this.uid;
  }

  public GroupApplicationUserInfo setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public GroupApplicationUserInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getIcon() {
    return this.icon;
  }

  public GroupApplicationUserInfo setIcon(String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  public String getReqMsg() {
    return this.reqMsg;
  }

  public GroupApplicationUserInfo setReqMsg(String reqMsg) {
    this.reqMsg = reqMsg;
    return this;
  }

  public void unsetReqMsg() {
    this.reqMsg = null;
  }

  /** Returns true if field reqMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetReqMsg() {
    return this.reqMsg != null;
  }

  public void setReqMsgIsSet(boolean value) {
    if (!value) {
      this.reqMsg = null;
    }
  }

  public long getApplicationTime() {
    return this.applicationTime;
  }

  public GroupApplicationUserInfo setApplicationTime(long applicationTime) {
    this.applicationTime = applicationTime;
    setApplicationTimeIsSet(true);
    return this;
  }

  public void unsetApplicationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLICATIONTIME_ISSET_ID);
  }

  /** Returns true if field applicationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLICATIONTIME_ISSET_ID);
  }

  public void setApplicationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLICATIONTIME_ISSET_ID, value);
  }

  public int getFlag() {
    return this.flag;
  }

  public GroupApplicationUserInfo setFlag(int flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public String getOperatorID() {
    return this.operatorID;
  }

  public GroupApplicationUserInfo setOperatorID(String operatorID) {
    this.operatorID = operatorID;
    return this;
  }

  public void unsetOperatorID() {
    this.operatorID = null;
  }

  /** Returns true if field operatorID is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorID() {
    return this.operatorID != null;
  }

  public void setOperatorIDIsSet(boolean value) {
    if (!value) {
      this.operatorID = null;
    }
  }

  public String getHandledMsg() {
    return this.handledMsg;
  }

  public GroupApplicationUserInfo setHandledMsg(String handledMsg) {
    this.handledMsg = handledMsg;
    return this;
  }

  public void unsetHandledMsg() {
    this.handledMsg = null;
  }

  /** Returns true if field handledMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetHandledMsg() {
    return this.handledMsg != null;
  }

  public void setHandledMsgIsSet(boolean value) {
    if (!value) {
      this.handledMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_ID:
      if (value == null) {
        unsetGroupID();
      } else {
        setGroupID((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case REQ_MSG:
      if (value == null) {
        unsetReqMsg();
      } else {
        setReqMsg((String)value);
      }
      break;

    case APPLICATION_TIME:
      if (value == null) {
        unsetApplicationTime();
      } else {
        setApplicationTime((Long)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Integer)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorID();
      } else {
        setOperatorID((String)value);
      }
      break;

    case HANDLED_MSG:
      if (value == null) {
        unsetHandledMsg();
      } else {
        setHandledMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_ID:
      return getGroupID();

    case UID:
      return getUid();

    case NAME:
      return getName();

    case ICON:
      return getIcon();

    case REQ_MSG:
      return getReqMsg();

    case APPLICATION_TIME:
      return getApplicationTime();

    case FLAG:
      return getFlag();

    case OPERATOR_ID:
      return getOperatorID();

    case HANDLED_MSG:
      return getHandledMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_ID:
      return isSetGroupID();
    case UID:
      return isSetUid();
    case NAME:
      return isSetName();
    case ICON:
      return isSetIcon();
    case REQ_MSG:
      return isSetReqMsg();
    case APPLICATION_TIME:
      return isSetApplicationTime();
    case FLAG:
      return isSetFlag();
    case OPERATOR_ID:
      return isSetOperatorID();
    case HANDLED_MSG:
      return isSetHandledMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupApplicationUserInfo)
      return this.equals((GroupApplicationUserInfo)that);
    return false;
  }

  public boolean equals(GroupApplicationUserInfo that) {
    if (that == null)
      return false;

    boolean this_present_groupID = true && this.isSetGroupID();
    boolean that_present_groupID = true && that.isSetGroupID();
    if (this_present_groupID || that_present_groupID) {
      if (!(this_present_groupID && that_present_groupID))
        return false;
      if (!this.groupID.equals(that.groupID))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_reqMsg = true && this.isSetReqMsg();
    boolean that_present_reqMsg = true && that.isSetReqMsg();
    if (this_present_reqMsg || that_present_reqMsg) {
      if (!(this_present_reqMsg && that_present_reqMsg))
        return false;
      if (!this.reqMsg.equals(that.reqMsg))
        return false;
    }

    boolean this_present_applicationTime = true;
    boolean that_present_applicationTime = true;
    if (this_present_applicationTime || that_present_applicationTime) {
      if (!(this_present_applicationTime && that_present_applicationTime))
        return false;
      if (this.applicationTime != that.applicationTime)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_operatorID = true && this.isSetOperatorID();
    boolean that_present_operatorID = true && that.isSetOperatorID();
    if (this_present_operatorID || that_present_operatorID) {
      if (!(this_present_operatorID && that_present_operatorID))
        return false;
      if (!this.operatorID.equals(that.operatorID))
        return false;
    }

    boolean this_present_handledMsg = true && this.isSetHandledMsg();
    boolean that_present_handledMsg = true && that.isSetHandledMsg();
    if (this_present_handledMsg || that_present_handledMsg) {
      if (!(this_present_handledMsg && that_present_handledMsg))
        return false;
      if (!this.handledMsg.equals(that.handledMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_groupID = true && (isSetGroupID());
    list.add(present_groupID);
    if (present_groupID)
      list.add(groupID);

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_icon = true && (isSetIcon());
    list.add(present_icon);
    if (present_icon)
      list.add(icon);

    boolean present_reqMsg = true && (isSetReqMsg());
    list.add(present_reqMsg);
    if (present_reqMsg)
      list.add(reqMsg);

    boolean present_applicationTime = true;
    list.add(present_applicationTime);
    if (present_applicationTime)
      list.add(applicationTime);

    boolean present_flag = true;
    list.add(present_flag);
    if (present_flag)
      list.add(flag);

    boolean present_operatorID = true && (isSetOperatorID());
    list.add(present_operatorID);
    if (present_operatorID)
      list.add(operatorID);

    boolean present_handledMsg = true && (isSetHandledMsg());
    list.add(present_handledMsg);
    if (present_handledMsg)
      list.add(handledMsg);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupApplicationUserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroupID()).compareTo(other.isSetGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupID, other.groupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqMsg()).compareTo(other.isSetReqMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqMsg, other.reqMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationTime()).compareTo(other.isSetApplicationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationTime, other.applicationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorID()).compareTo(other.isSetOperatorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorID, other.operatorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandledMsg()).compareTo(other.isSetHandledMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandledMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handledMsg, other.handledMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupApplicationUserInfo(");
    boolean first = true;

    sb.append("groupID:");
    if (this.groupID == null) {
      sb.append("null");
    } else {
      sb.append(this.groupID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("icon:");
    if (this.icon == null) {
      sb.append("null");
    } else {
      sb.append(this.icon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqMsg:");
    if (this.reqMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.reqMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationTime:");
    sb.append(this.applicationTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorID:");
    if (this.operatorID == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handledMsg:");
    if (this.handledMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.handledMsg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupApplicationUserInfoStandardSchemeFactory implements SchemeFactory {
    public GroupApplicationUserInfoStandardScheme getScheme() {
      return new GroupApplicationUserInfoStandardScheme();
    }
  }

  private static class GroupApplicationUserInfoStandardScheme extends StandardScheme<GroupApplicationUserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupApplicationUserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupID = iprot.readString();
              struct.setGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQ_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqMsg = iprot.readString();
              struct.setReqMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPLICATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.applicationTime = iprot.readI64();
              struct.setApplicationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flag = iprot.readI32();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorID = iprot.readString();
              struct.setOperatorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HANDLED_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handledMsg = iprot.readString();
              struct.setHandledMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupApplicationUserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupID != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.groupID);
        oprot.writeFieldEnd();
      }
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.icon != null) {
        oprot.writeFieldBegin(ICON_FIELD_DESC);
        oprot.writeString(struct.icon);
        oprot.writeFieldEnd();
      }
      if (struct.reqMsg != null) {
        oprot.writeFieldBegin(REQ_MSG_FIELD_DESC);
        oprot.writeString(struct.reqMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLICATION_TIME_FIELD_DESC);
      oprot.writeI64(struct.applicationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI32(struct.flag);
      oprot.writeFieldEnd();
      if (struct.operatorID != null) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeString(struct.operatorID);
        oprot.writeFieldEnd();
      }
      if (struct.handledMsg != null) {
        oprot.writeFieldBegin(HANDLED_MSG_FIELD_DESC);
        oprot.writeString(struct.handledMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupApplicationUserInfoTupleSchemeFactory implements SchemeFactory {
    public GroupApplicationUserInfoTupleScheme getScheme() {
      return new GroupApplicationUserInfoTupleScheme();
    }
  }

  private static class GroupApplicationUserInfoTupleScheme extends TupleScheme<GroupApplicationUserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupApplicationUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupID()) {
        optionals.set(0);
      }
      if (struct.isSetUid()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetIcon()) {
        optionals.set(3);
      }
      if (struct.isSetReqMsg()) {
        optionals.set(4);
      }
      if (struct.isSetApplicationTime()) {
        optionals.set(5);
      }
      if (struct.isSetFlag()) {
        optionals.set(6);
      }
      if (struct.isSetOperatorID()) {
        optionals.set(7);
      }
      if (struct.isSetHandledMsg()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetGroupID()) {
        oprot.writeString(struct.groupID);
      }
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetReqMsg()) {
        oprot.writeString(struct.reqMsg);
      }
      if (struct.isSetApplicationTime()) {
        oprot.writeI64(struct.applicationTime);
      }
      if (struct.isSetFlag()) {
        oprot.writeI32(struct.flag);
      }
      if (struct.isSetOperatorID()) {
        oprot.writeString(struct.operatorID);
      }
      if (struct.isSetHandledMsg()) {
        oprot.writeString(struct.handledMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupApplicationUserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.groupID = iprot.readString();
        struct.setGroupIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reqMsg = iprot.readString();
        struct.setReqMsgIsSet(true);
      }
      if (incoming.get(5)) {
        struct.applicationTime = iprot.readI64();
        struct.setApplicationTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.flag = iprot.readI32();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(7)) {
        struct.operatorID = iprot.readString();
        struct.setOperatorIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.handledMsg = iprot.readString();
        struct.setHandledMsgIsSet(true);
      }
    }
  }

}


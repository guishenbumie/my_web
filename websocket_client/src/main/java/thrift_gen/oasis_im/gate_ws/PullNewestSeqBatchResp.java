/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.gate_ws;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class PullNewestSeqBatchResp implements org.apache.thrift.TBase<PullNewestSeqBatchResp, PullNewestSeqBatchResp._Fields>, java.io.Serializable, Cloneable, Comparable<PullNewestSeqBatchResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PullNewestSeqBatchResp");

  private static final org.apache.thrift.protocol.TField MSG_INCR_FIELD_DESC = new org.apache.thrift.protocol.TField("msgIncr", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errMsg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SINGLE_SEQ_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("singleSeqMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_SEQ_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("groupSeqMap", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField GLOBAL_SEQ_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("globalSeqMap", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField CROSS_SEQ_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("crossSeqMap", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PullNewestSeqBatchRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PullNewestSeqBatchRespTupleSchemeFactory());
  }

  public int msgIncr; // required
  public int errCode; // required
  public String errMsg; // required
  public Map<String,Long> singleSeqMap; // required
  public Map<String,Long> groupSeqMap; // required
  public Map<String,Long> globalSeqMap; // required
  public Map<String,Long> crossSeqMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_INCR((short)1, "msgIncr"),
    ERR_CODE((short)2, "errCode"),
    ERR_MSG((short)3, "errMsg"),
    SINGLE_SEQ_MAP((short)4, "singleSeqMap"),
    GROUP_SEQ_MAP((short)5, "groupSeqMap"),
    GLOBAL_SEQ_MAP((short)6, "globalSeqMap"),
    CROSS_SEQ_MAP((short)7, "crossSeqMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_INCR
          return MSG_INCR;
        case 2: // ERR_CODE
          return ERR_CODE;
        case 3: // ERR_MSG
          return ERR_MSG;
        case 4: // SINGLE_SEQ_MAP
          return SINGLE_SEQ_MAP;
        case 5: // GROUP_SEQ_MAP
          return GROUP_SEQ_MAP;
        case 6: // GLOBAL_SEQ_MAP
          return GLOBAL_SEQ_MAP;
        case 7: // CROSS_SEQ_MAP
          return CROSS_SEQ_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGINCR_ISSET_ID = 0;
  private static final int __ERRCODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_INCR, new org.apache.thrift.meta_data.FieldMetaData("msgIncr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINGLE_SEQ_MAP, new org.apache.thrift.meta_data.FieldMetaData("singleSeqMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.GROUP_SEQ_MAP, new org.apache.thrift.meta_data.FieldMetaData("groupSeqMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.GLOBAL_SEQ_MAP, new org.apache.thrift.meta_data.FieldMetaData("globalSeqMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CROSS_SEQ_MAP, new org.apache.thrift.meta_data.FieldMetaData("crossSeqMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PullNewestSeqBatchResp.class, metaDataMap);
  }

  public PullNewestSeqBatchResp() {
  }

  public PullNewestSeqBatchResp(
    int msgIncr,
    int errCode,
    String errMsg,
    Map<String,Long> singleSeqMap,
    Map<String,Long> groupSeqMap,
    Map<String,Long> globalSeqMap,
    Map<String,Long> crossSeqMap)
  {
    this();
    this.msgIncr = msgIncr;
    setMsgIncrIsSet(true);
    this.errCode = errCode;
    setErrCodeIsSet(true);
    this.errMsg = errMsg;
    this.singleSeqMap = singleSeqMap;
    this.groupSeqMap = groupSeqMap;
    this.globalSeqMap = globalSeqMap;
    this.crossSeqMap = crossSeqMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PullNewestSeqBatchResp(PullNewestSeqBatchResp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgIncr = other.msgIncr;
    this.errCode = other.errCode;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
    if (other.isSetSingleSeqMap()) {
      Map<String,Long> __this__singleSeqMap = new HashMap<String,Long>(other.singleSeqMap);
      this.singleSeqMap = __this__singleSeqMap;
    }
    if (other.isSetGroupSeqMap()) {
      Map<String,Long> __this__groupSeqMap = new HashMap<String,Long>(other.groupSeqMap);
      this.groupSeqMap = __this__groupSeqMap;
    }
    if (other.isSetGlobalSeqMap()) {
      Map<String,Long> __this__globalSeqMap = new HashMap<String,Long>(other.globalSeqMap);
      this.globalSeqMap = __this__globalSeqMap;
    }
    if (other.isSetCrossSeqMap()) {
      Map<String,Long> __this__crossSeqMap = new HashMap<String,Long>(other.crossSeqMap);
      this.crossSeqMap = __this__crossSeqMap;
    }
  }

  public PullNewestSeqBatchResp deepCopy() {
    return new PullNewestSeqBatchResp(this);
  }

  @Override
  public void clear() {
    setMsgIncrIsSet(false);
    this.msgIncr = 0;
    setErrCodeIsSet(false);
    this.errCode = 0;
    this.errMsg = null;
    this.singleSeqMap = null;
    this.groupSeqMap = null;
    this.globalSeqMap = null;
    this.crossSeqMap = null;
  }

  public int getMsgIncr() {
    return this.msgIncr;
  }

  public PullNewestSeqBatchResp setMsgIncr(int msgIncr) {
    this.msgIncr = msgIncr;
    setMsgIncrIsSet(true);
    return this;
  }

  public void unsetMsgIncr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGINCR_ISSET_ID);
  }

  /** Returns true if field msgIncr is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgIncr() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGINCR_ISSET_ID);
  }

  public void setMsgIncrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGINCR_ISSET_ID, value);
  }

  public int getErrCode() {
    return this.errCode;
  }

  public PullNewestSeqBatchResp setErrCode(int errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  public String getErrMsg() {
    return this.errMsg;
  }

  public PullNewestSeqBatchResp setErrMsg(String errMsg) {
    this.errMsg = errMsg;
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public int getSingleSeqMapSize() {
    return (this.singleSeqMap == null) ? 0 : this.singleSeqMap.size();
  }

  public void putToSingleSeqMap(String key, long val) {
    if (this.singleSeqMap == null) {
      this.singleSeqMap = new HashMap<String,Long>();
    }
    this.singleSeqMap.put(key, val);
  }

  public Map<String,Long> getSingleSeqMap() {
    return this.singleSeqMap;
  }

  public PullNewestSeqBatchResp setSingleSeqMap(Map<String,Long> singleSeqMap) {
    this.singleSeqMap = singleSeqMap;
    return this;
  }

  public void unsetSingleSeqMap() {
    this.singleSeqMap = null;
  }

  /** Returns true if field singleSeqMap is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleSeqMap() {
    return this.singleSeqMap != null;
  }

  public void setSingleSeqMapIsSet(boolean value) {
    if (!value) {
      this.singleSeqMap = null;
    }
  }

  public int getGroupSeqMapSize() {
    return (this.groupSeqMap == null) ? 0 : this.groupSeqMap.size();
  }

  public void putToGroupSeqMap(String key, long val) {
    if (this.groupSeqMap == null) {
      this.groupSeqMap = new HashMap<String,Long>();
    }
    this.groupSeqMap.put(key, val);
  }

  public Map<String,Long> getGroupSeqMap() {
    return this.groupSeqMap;
  }

  public PullNewestSeqBatchResp setGroupSeqMap(Map<String,Long> groupSeqMap) {
    this.groupSeqMap = groupSeqMap;
    return this;
  }

  public void unsetGroupSeqMap() {
    this.groupSeqMap = null;
  }

  /** Returns true if field groupSeqMap is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupSeqMap() {
    return this.groupSeqMap != null;
  }

  public void setGroupSeqMapIsSet(boolean value) {
    if (!value) {
      this.groupSeqMap = null;
    }
  }

  public int getGlobalSeqMapSize() {
    return (this.globalSeqMap == null) ? 0 : this.globalSeqMap.size();
  }

  public void putToGlobalSeqMap(String key, long val) {
    if (this.globalSeqMap == null) {
      this.globalSeqMap = new HashMap<String,Long>();
    }
    this.globalSeqMap.put(key, val);
  }

  public Map<String,Long> getGlobalSeqMap() {
    return this.globalSeqMap;
  }

  public PullNewestSeqBatchResp setGlobalSeqMap(Map<String,Long> globalSeqMap) {
    this.globalSeqMap = globalSeqMap;
    return this;
  }

  public void unsetGlobalSeqMap() {
    this.globalSeqMap = null;
  }

  /** Returns true if field globalSeqMap is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalSeqMap() {
    return this.globalSeqMap != null;
  }

  public void setGlobalSeqMapIsSet(boolean value) {
    if (!value) {
      this.globalSeqMap = null;
    }
  }

  public int getCrossSeqMapSize() {
    return (this.crossSeqMap == null) ? 0 : this.crossSeqMap.size();
  }

  public void putToCrossSeqMap(String key, long val) {
    if (this.crossSeqMap == null) {
      this.crossSeqMap = new HashMap<String,Long>();
    }
    this.crossSeqMap.put(key, val);
  }

  public Map<String,Long> getCrossSeqMap() {
    return this.crossSeqMap;
  }

  public PullNewestSeqBatchResp setCrossSeqMap(Map<String,Long> crossSeqMap) {
    this.crossSeqMap = crossSeqMap;
    return this;
  }

  public void unsetCrossSeqMap() {
    this.crossSeqMap = null;
  }

  /** Returns true if field crossSeqMap is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossSeqMap() {
    return this.crossSeqMap != null;
  }

  public void setCrossSeqMapIsSet(boolean value) {
    if (!value) {
      this.crossSeqMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSG_INCR:
      if (value == null) {
        unsetMsgIncr();
      } else {
        setMsgIncr((Integer)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((Integer)value);
      }
      break;

    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;

    case SINGLE_SEQ_MAP:
      if (value == null) {
        unsetSingleSeqMap();
      } else {
        setSingleSeqMap((Map<String,Long>)value);
      }
      break;

    case GROUP_SEQ_MAP:
      if (value == null) {
        unsetGroupSeqMap();
      } else {
        setGroupSeqMap((Map<String,Long>)value);
      }
      break;

    case GLOBAL_SEQ_MAP:
      if (value == null) {
        unsetGlobalSeqMap();
      } else {
        setGlobalSeqMap((Map<String,Long>)value);
      }
      break;

    case CROSS_SEQ_MAP:
      if (value == null) {
        unsetCrossSeqMap();
      } else {
        setCrossSeqMap((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_INCR:
      return getMsgIncr();

    case ERR_CODE:
      return getErrCode();

    case ERR_MSG:
      return getErrMsg();

    case SINGLE_SEQ_MAP:
      return getSingleSeqMap();

    case GROUP_SEQ_MAP:
      return getGroupSeqMap();

    case GLOBAL_SEQ_MAP:
      return getGlobalSeqMap();

    case CROSS_SEQ_MAP:
      return getCrossSeqMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_INCR:
      return isSetMsgIncr();
    case ERR_CODE:
      return isSetErrCode();
    case ERR_MSG:
      return isSetErrMsg();
    case SINGLE_SEQ_MAP:
      return isSetSingleSeqMap();
    case GROUP_SEQ_MAP:
      return isSetGroupSeqMap();
    case GLOBAL_SEQ_MAP:
      return isSetGlobalSeqMap();
    case CROSS_SEQ_MAP:
      return isSetCrossSeqMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PullNewestSeqBatchResp)
      return this.equals((PullNewestSeqBatchResp)that);
    return false;
  }

  public boolean equals(PullNewestSeqBatchResp that) {
    if (that == null)
      return false;

    boolean this_present_msgIncr = true;
    boolean that_present_msgIncr = true;
    if (this_present_msgIncr || that_present_msgIncr) {
      if (!(this_present_msgIncr && that_present_msgIncr))
        return false;
      if (this.msgIncr != that.msgIncr)
        return false;
    }

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }

    boolean this_present_singleSeqMap = true && this.isSetSingleSeqMap();
    boolean that_present_singleSeqMap = true && that.isSetSingleSeqMap();
    if (this_present_singleSeqMap || that_present_singleSeqMap) {
      if (!(this_present_singleSeqMap && that_present_singleSeqMap))
        return false;
      if (!this.singleSeqMap.equals(that.singleSeqMap))
        return false;
    }

    boolean this_present_groupSeqMap = true && this.isSetGroupSeqMap();
    boolean that_present_groupSeqMap = true && that.isSetGroupSeqMap();
    if (this_present_groupSeqMap || that_present_groupSeqMap) {
      if (!(this_present_groupSeqMap && that_present_groupSeqMap))
        return false;
      if (!this.groupSeqMap.equals(that.groupSeqMap))
        return false;
    }

    boolean this_present_globalSeqMap = true && this.isSetGlobalSeqMap();
    boolean that_present_globalSeqMap = true && that.isSetGlobalSeqMap();
    if (this_present_globalSeqMap || that_present_globalSeqMap) {
      if (!(this_present_globalSeqMap && that_present_globalSeqMap))
        return false;
      if (!this.globalSeqMap.equals(that.globalSeqMap))
        return false;
    }

    boolean this_present_crossSeqMap = true && this.isSetCrossSeqMap();
    boolean that_present_crossSeqMap = true && that.isSetCrossSeqMap();
    if (this_present_crossSeqMap || that_present_crossSeqMap) {
      if (!(this_present_crossSeqMap && that_present_crossSeqMap))
        return false;
      if (!this.crossSeqMap.equals(that.crossSeqMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_msgIncr = true;
    list.add(present_msgIncr);
    if (present_msgIncr)
      list.add(msgIncr);

    boolean present_errCode = true;
    list.add(present_errCode);
    if (present_errCode)
      list.add(errCode);

    boolean present_errMsg = true && (isSetErrMsg());
    list.add(present_errMsg);
    if (present_errMsg)
      list.add(errMsg);

    boolean present_singleSeqMap = true && (isSetSingleSeqMap());
    list.add(present_singleSeqMap);
    if (present_singleSeqMap)
      list.add(singleSeqMap);

    boolean present_groupSeqMap = true && (isSetGroupSeqMap());
    list.add(present_groupSeqMap);
    if (present_groupSeqMap)
      list.add(groupSeqMap);

    boolean present_globalSeqMap = true && (isSetGlobalSeqMap());
    list.add(present_globalSeqMap);
    if (present_globalSeqMap)
      list.add(globalSeqMap);

    boolean present_crossSeqMap = true && (isSetCrossSeqMap());
    list.add(present_crossSeqMap);
    if (present_crossSeqMap)
      list.add(crossSeqMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(PullNewestSeqBatchResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMsgIncr()).compareTo(other.isSetMsgIncr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgIncr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgIncr, other.msgIncr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(other.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errMsg, other.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleSeqMap()).compareTo(other.isSetSingleSeqMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleSeqMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleSeqMap, other.singleSeqMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupSeqMap()).compareTo(other.isSetGroupSeqMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupSeqMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupSeqMap, other.groupSeqMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlobalSeqMap()).compareTo(other.isSetGlobalSeqMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalSeqMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalSeqMap, other.globalSeqMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossSeqMap()).compareTo(other.isSetCrossSeqMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossSeqMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossSeqMap, other.crossSeqMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PullNewestSeqBatchResp(");
    boolean first = true;

    sb.append("msgIncr:");
    sb.append(this.msgIncr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errMsg:");
    if (this.errMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleSeqMap:");
    if (this.singleSeqMap == null) {
      sb.append("null");
    } else {
      sb.append(this.singleSeqMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupSeqMap:");
    if (this.groupSeqMap == null) {
      sb.append("null");
    } else {
      sb.append(this.groupSeqMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("globalSeqMap:");
    if (this.globalSeqMap == null) {
      sb.append("null");
    } else {
      sb.append(this.globalSeqMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossSeqMap:");
    if (this.crossSeqMap == null) {
      sb.append("null");
    } else {
      sb.append(this.crossSeqMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PullNewestSeqBatchRespStandardSchemeFactory implements SchemeFactory {
    public PullNewestSeqBatchRespStandardScheme getScheme() {
      return new PullNewestSeqBatchRespStandardScheme();
    }
  }

  private static class PullNewestSeqBatchRespStandardScheme extends StandardScheme<PullNewestSeqBatchResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PullNewestSeqBatchResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_INCR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgIncr = iprot.readI32();
              struct.setMsgIncrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errCode = iprot.readI32();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errMsg = iprot.readString();
              struct.setErrMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SINGLE_SEQ_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.singleSeqMap = new HashMap<String,Long>(2*_map64.size);
                String _key65;
                long _val66;
                for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                {
                  _key65 = iprot.readString();
                  _val66 = iprot.readI64();
                  struct.singleSeqMap.put(_key65, _val66);
                }
                iprot.readMapEnd();
              }
              struct.setSingleSeqMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP_SEQ_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                struct.groupSeqMap = new HashMap<String,Long>(2*_map68.size);
                String _key69;
                long _val70;
                for (int _i71 = 0; _i71 < _map68.size; ++_i71)
                {
                  _key69 = iprot.readString();
                  _val70 = iprot.readI64();
                  struct.groupSeqMap.put(_key69, _val70);
                }
                iprot.readMapEnd();
              }
              struct.setGroupSeqMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GLOBAL_SEQ_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin();
                struct.globalSeqMap = new HashMap<String,Long>(2*_map72.size);
                String _key73;
                long _val74;
                for (int _i75 = 0; _i75 < _map72.size; ++_i75)
                {
                  _key73 = iprot.readString();
                  _val74 = iprot.readI64();
                  struct.globalSeqMap.put(_key73, _val74);
                }
                iprot.readMapEnd();
              }
              struct.setGlobalSeqMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CROSS_SEQ_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map76 = iprot.readMapBegin();
                struct.crossSeqMap = new HashMap<String,Long>(2*_map76.size);
                String _key77;
                long _val78;
                for (int _i79 = 0; _i79 < _map76.size; ++_i79)
                {
                  _key77 = iprot.readString();
                  _val78 = iprot.readI64();
                  struct.crossSeqMap.put(_key77, _val78);
                }
                iprot.readMapEnd();
              }
              struct.setCrossSeqMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PullNewestSeqBatchResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_INCR_FIELD_DESC);
      oprot.writeI32(struct.msgIncr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI32(struct.errCode);
      oprot.writeFieldEnd();
      if (struct.errMsg != null) {
        oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
        oprot.writeString(struct.errMsg);
        oprot.writeFieldEnd();
      }
      if (struct.singleSeqMap != null) {
        oprot.writeFieldBegin(SINGLE_SEQ_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.singleSeqMap.size()));
          for (Map.Entry<String, Long> _iter80 : struct.singleSeqMap.entrySet())
          {
            oprot.writeString(_iter80.getKey());
            oprot.writeI64(_iter80.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groupSeqMap != null) {
        oprot.writeFieldBegin(GROUP_SEQ_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.groupSeqMap.size()));
          for (Map.Entry<String, Long> _iter81 : struct.groupSeqMap.entrySet())
          {
            oprot.writeString(_iter81.getKey());
            oprot.writeI64(_iter81.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.globalSeqMap != null) {
        oprot.writeFieldBegin(GLOBAL_SEQ_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.globalSeqMap.size()));
          for (Map.Entry<String, Long> _iter82 : struct.globalSeqMap.entrySet())
          {
            oprot.writeString(_iter82.getKey());
            oprot.writeI64(_iter82.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.crossSeqMap != null) {
        oprot.writeFieldBegin(CROSS_SEQ_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.crossSeqMap.size()));
          for (Map.Entry<String, Long> _iter83 : struct.crossSeqMap.entrySet())
          {
            oprot.writeString(_iter83.getKey());
            oprot.writeI64(_iter83.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PullNewestSeqBatchRespTupleSchemeFactory implements SchemeFactory {
    public PullNewestSeqBatchRespTupleScheme getScheme() {
      return new PullNewestSeqBatchRespTupleScheme();
    }
  }

  private static class PullNewestSeqBatchRespTupleScheme extends TupleScheme<PullNewestSeqBatchResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PullNewestSeqBatchResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMsgIncr()) {
        optionals.set(0);
      }
      if (struct.isSetErrCode()) {
        optionals.set(1);
      }
      if (struct.isSetErrMsg()) {
        optionals.set(2);
      }
      if (struct.isSetSingleSeqMap()) {
        optionals.set(3);
      }
      if (struct.isSetGroupSeqMap()) {
        optionals.set(4);
      }
      if (struct.isSetGlobalSeqMap()) {
        optionals.set(5);
      }
      if (struct.isSetCrossSeqMap()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMsgIncr()) {
        oprot.writeI32(struct.msgIncr);
      }
      if (struct.isSetErrCode()) {
        oprot.writeI32(struct.errCode);
      }
      if (struct.isSetErrMsg()) {
        oprot.writeString(struct.errMsg);
      }
      if (struct.isSetSingleSeqMap()) {
        {
          oprot.writeI32(struct.singleSeqMap.size());
          for (Map.Entry<String, Long> _iter84 : struct.singleSeqMap.entrySet())
          {
            oprot.writeString(_iter84.getKey());
            oprot.writeI64(_iter84.getValue());
          }
        }
      }
      if (struct.isSetGroupSeqMap()) {
        {
          oprot.writeI32(struct.groupSeqMap.size());
          for (Map.Entry<String, Long> _iter85 : struct.groupSeqMap.entrySet())
          {
            oprot.writeString(_iter85.getKey());
            oprot.writeI64(_iter85.getValue());
          }
        }
      }
      if (struct.isSetGlobalSeqMap()) {
        {
          oprot.writeI32(struct.globalSeqMap.size());
          for (Map.Entry<String, Long> _iter86 : struct.globalSeqMap.entrySet())
          {
            oprot.writeString(_iter86.getKey());
            oprot.writeI64(_iter86.getValue());
          }
        }
      }
      if (struct.isSetCrossSeqMap()) {
        {
          oprot.writeI32(struct.crossSeqMap.size());
          for (Map.Entry<String, Long> _iter87 : struct.crossSeqMap.entrySet())
          {
            oprot.writeString(_iter87.getKey());
            oprot.writeI64(_iter87.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PullNewestSeqBatchResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.msgIncr = iprot.readI32();
        struct.setMsgIncrIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errCode = iprot.readI32();
        struct.setErrCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.errMsg = iprot.readString();
        struct.setErrMsgIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map88 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.singleSeqMap = new HashMap<String,Long>(2*_map88.size);
          String _key89;
          long _val90;
          for (int _i91 = 0; _i91 < _map88.size; ++_i91)
          {
            _key89 = iprot.readString();
            _val90 = iprot.readI64();
            struct.singleSeqMap.put(_key89, _val90);
          }
        }
        struct.setSingleSeqMapIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.groupSeqMap = new HashMap<String,Long>(2*_map92.size);
          String _key93;
          long _val94;
          for (int _i95 = 0; _i95 < _map92.size; ++_i95)
          {
            _key93 = iprot.readString();
            _val94 = iprot.readI64();
            struct.groupSeqMap.put(_key93, _val94);
          }
        }
        struct.setGroupSeqMapIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.globalSeqMap = new HashMap<String,Long>(2*_map96.size);
          String _key97;
          long _val98;
          for (int _i99 = 0; _i99 < _map96.size; ++_i99)
          {
            _key97 = iprot.readString();
            _val98 = iprot.readI64();
            struct.globalSeqMap.put(_key97, _val98);
          }
        }
        struct.setGlobalSeqMapIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.crossSeqMap = new HashMap<String,Long>(2*_map100.size);
          String _key101;
          long _val102;
          for (int _i103 = 0; _i103 < _map100.size; ++_i103)
          {
            _key101 = iprot.readString();
            _val102 = iprot.readI64();
            struct.crossSeqMap.put(_key101, _val102);
          }
        }
        struct.setCrossSeqMapIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class UserSendMsgResp implements org.apache.thrift.TBase<UserSendMsgResp, UserSendMsgResp._Fields>, java.io.Serializable, Cloneable, Comparable<UserSendMsgResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserSendMsgResp");

  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverMsgID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientMsgID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PUNISH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("punishInfo", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserSendMsgRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserSendMsgRespTupleSchemeFactory());
  }

  public BaseResp base; // required
  public long sendTime; // required
  public String serverMsgID; // required
  public String clientMsgID; // required
  public String punishInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASE((short)1, "base"),
    SEND_TIME((short)2, "sendTime"),
    SERVER_MSG_ID((short)3, "serverMsgID"),
    CLIENT_MSG_ID((short)4, "clientMsgID"),
    PUNISH_INFO((short)5, "punishInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASE
          return BASE;
        case 2: // SEND_TIME
          return SEND_TIME;
        case 3: // SERVER_MSG_ID
          return SERVER_MSG_ID;
        case 4: // CLIENT_MSG_ID
          return CLIENT_MSG_ID;
        case 5: // PUNISH_INFO
          return PUNISH_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENDTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseResp.class)));
    tmpMap.put(_Fields.SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERVER_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("serverMsgID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("clientMsgID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUNISH_INFO, new org.apache.thrift.meta_data.FieldMetaData("punishInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserSendMsgResp.class, metaDataMap);
  }

  public UserSendMsgResp() {
  }

  public UserSendMsgResp(
    BaseResp base,
    long sendTime,
    String serverMsgID,
    String clientMsgID,
    String punishInfo)
  {
    this();
    this.base = base;
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
    this.serverMsgID = serverMsgID;
    this.clientMsgID = clientMsgID;
    this.punishInfo = punishInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserSendMsgResp(UserSendMsgResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBase()) {
      this.base = new BaseResp(other.base);
    }
    this.sendTime = other.sendTime;
    if (other.isSetServerMsgID()) {
      this.serverMsgID = other.serverMsgID;
    }
    if (other.isSetClientMsgID()) {
      this.clientMsgID = other.clientMsgID;
    }
    if (other.isSetPunishInfo()) {
      this.punishInfo = other.punishInfo;
    }
  }

  public UserSendMsgResp deepCopy() {
    return new UserSendMsgResp(this);
  }

  @Override
  public void clear() {
    this.base = null;
    setSendTimeIsSet(false);
    this.sendTime = 0;
    this.serverMsgID = null;
    this.clientMsgID = null;
    this.punishInfo = null;
  }

  public BaseResp getBase() {
    return this.base;
  }

  public UserSendMsgResp setBase(BaseResp base) {
    this.base = base;
    return this;
  }

  public void unsetBase() {
    this.base = null;
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.base = null;
    }
  }

  public long getSendTime() {
    return this.sendTime;
  }

  public UserSendMsgResp setSendTime(long sendTime) {
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
    return this;
  }

  public void unsetSendTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  /** Returns true if field sendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  public void setSendTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTIME_ISSET_ID, value);
  }

  public String getServerMsgID() {
    return this.serverMsgID;
  }

  public UserSendMsgResp setServerMsgID(String serverMsgID) {
    this.serverMsgID = serverMsgID;
    return this;
  }

  public void unsetServerMsgID() {
    this.serverMsgID = null;
  }

  /** Returns true if field serverMsgID is set (has been assigned a value) and false otherwise */
  public boolean isSetServerMsgID() {
    return this.serverMsgID != null;
  }

  public void setServerMsgIDIsSet(boolean value) {
    if (!value) {
      this.serverMsgID = null;
    }
  }

  public String getClientMsgID() {
    return this.clientMsgID;
  }

  public UserSendMsgResp setClientMsgID(String clientMsgID) {
    this.clientMsgID = clientMsgID;
    return this;
  }

  public void unsetClientMsgID() {
    this.clientMsgID = null;
  }

  /** Returns true if field clientMsgID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientMsgID() {
    return this.clientMsgID != null;
  }

  public void setClientMsgIDIsSet(boolean value) {
    if (!value) {
      this.clientMsgID = null;
    }
  }

  public String getPunishInfo() {
    return this.punishInfo;
  }

  public UserSendMsgResp setPunishInfo(String punishInfo) {
    this.punishInfo = punishInfo;
    return this;
  }

  public void unsetPunishInfo() {
    this.punishInfo = null;
  }

  /** Returns true if field punishInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPunishInfo() {
    return this.punishInfo != null;
  }

  public void setPunishInfoIsSet(boolean value) {
    if (!value) {
      this.punishInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((BaseResp)value);
      }
      break;

    case SEND_TIME:
      if (value == null) {
        unsetSendTime();
      } else {
        setSendTime((Long)value);
      }
      break;

    case SERVER_MSG_ID:
      if (value == null) {
        unsetServerMsgID();
      } else {
        setServerMsgID((String)value);
      }
      break;

    case CLIENT_MSG_ID:
      if (value == null) {
        unsetClientMsgID();
      } else {
        setClientMsgID((String)value);
      }
      break;

    case PUNISH_INFO:
      if (value == null) {
        unsetPunishInfo();
      } else {
        setPunishInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BASE:
      return getBase();

    case SEND_TIME:
      return getSendTime();

    case SERVER_MSG_ID:
      return getServerMsgID();

    case CLIENT_MSG_ID:
      return getClientMsgID();

    case PUNISH_INFO:
      return getPunishInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BASE:
      return isSetBase();
    case SEND_TIME:
      return isSetSendTime();
    case SERVER_MSG_ID:
      return isSetServerMsgID();
    case CLIENT_MSG_ID:
      return isSetClientMsgID();
    case PUNISH_INFO:
      return isSetPunishInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserSendMsgResp)
      return this.equals((UserSendMsgResp)that);
    return false;
  }

  public boolean equals(UserSendMsgResp that) {
    if (that == null)
      return false;

    boolean this_present_base = true && this.isSetBase();
    boolean that_present_base = true && that.isSetBase();
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (!this.base.equals(that.base))
        return false;
    }

    boolean this_present_sendTime = true;
    boolean that_present_sendTime = true;
    if (this_present_sendTime || that_present_sendTime) {
      if (!(this_present_sendTime && that_present_sendTime))
        return false;
      if (this.sendTime != that.sendTime)
        return false;
    }

    boolean this_present_serverMsgID = true && this.isSetServerMsgID();
    boolean that_present_serverMsgID = true && that.isSetServerMsgID();
    if (this_present_serverMsgID || that_present_serverMsgID) {
      if (!(this_present_serverMsgID && that_present_serverMsgID))
        return false;
      if (!this.serverMsgID.equals(that.serverMsgID))
        return false;
    }

    boolean this_present_clientMsgID = true && this.isSetClientMsgID();
    boolean that_present_clientMsgID = true && that.isSetClientMsgID();
    if (this_present_clientMsgID || that_present_clientMsgID) {
      if (!(this_present_clientMsgID && that_present_clientMsgID))
        return false;
      if (!this.clientMsgID.equals(that.clientMsgID))
        return false;
    }

    boolean this_present_punishInfo = true && this.isSetPunishInfo();
    boolean that_present_punishInfo = true && that.isSetPunishInfo();
    if (this_present_punishInfo || that_present_punishInfo) {
      if (!(this_present_punishInfo && that_present_punishInfo))
        return false;
      if (!this.punishInfo.equals(that.punishInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_base = true && (isSetBase());
    list.add(present_base);
    if (present_base)
      list.add(base);

    boolean present_sendTime = true;
    list.add(present_sendTime);
    if (present_sendTime)
      list.add(sendTime);

    boolean present_serverMsgID = true && (isSetServerMsgID());
    list.add(present_serverMsgID);
    if (present_serverMsgID)
      list.add(serverMsgID);

    boolean present_clientMsgID = true && (isSetClientMsgID());
    list.add(present_clientMsgID);
    if (present_clientMsgID)
      list.add(clientMsgID);

    boolean present_punishInfo = true && (isSetPunishInfo());
    list.add(present_punishInfo);
    if (present_punishInfo)
      list.add(punishInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserSendMsgResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendTime()).compareTo(other.isSetSendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, other.sendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerMsgID()).compareTo(other.isSetServerMsgID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerMsgID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverMsgID, other.serverMsgID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientMsgID()).compareTo(other.isSetClientMsgID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientMsgID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientMsgID, other.clientMsgID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPunishInfo()).compareTo(other.isSetPunishInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPunishInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.punishInfo, other.punishInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserSendMsgResp(");
    boolean first = true;

    sb.append("base:");
    if (this.base == null) {
      sb.append("null");
    } else {
      sb.append(this.base);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendTime:");
    sb.append(this.sendTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverMsgID:");
    if (this.serverMsgID == null) {
      sb.append("null");
    } else {
      sb.append(this.serverMsgID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientMsgID:");
    if (this.clientMsgID == null) {
      sb.append("null");
    } else {
      sb.append(this.clientMsgID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("punishInfo:");
    if (this.punishInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.punishInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (base != null) {
      base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserSendMsgRespStandardSchemeFactory implements SchemeFactory {
    public UserSendMsgRespStandardScheme getScheme() {
      return new UserSendMsgRespStandardScheme();
    }
  }

  private static class UserSendMsgRespStandardScheme extends StandardScheme<UserSendMsgResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserSendMsgResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base = new BaseResp();
              struct.base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sendTime = iprot.readI64();
              struct.setSendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVER_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverMsgID = iprot.readString();
              struct.setServerMsgIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientMsgID = iprot.readString();
              struct.setClientMsgIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PUNISH_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.punishInfo = iprot.readString();
              struct.setPunishInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserSendMsgResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.base.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
      oprot.writeI64(struct.sendTime);
      oprot.writeFieldEnd();
      if (struct.serverMsgID != null) {
        oprot.writeFieldBegin(SERVER_MSG_ID_FIELD_DESC);
        oprot.writeString(struct.serverMsgID);
        oprot.writeFieldEnd();
      }
      if (struct.clientMsgID != null) {
        oprot.writeFieldBegin(CLIENT_MSG_ID_FIELD_DESC);
        oprot.writeString(struct.clientMsgID);
        oprot.writeFieldEnd();
      }
      if (struct.punishInfo != null) {
        oprot.writeFieldBegin(PUNISH_INFO_FIELD_DESC);
        oprot.writeString(struct.punishInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserSendMsgRespTupleSchemeFactory implements SchemeFactory {
    public UserSendMsgRespTupleScheme getScheme() {
      return new UserSendMsgRespTupleScheme();
    }
  }

  private static class UserSendMsgRespTupleScheme extends TupleScheme<UserSendMsgResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserSendMsgResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBase()) {
        optionals.set(0);
      }
      if (struct.isSetSendTime()) {
        optionals.set(1);
      }
      if (struct.isSetServerMsgID()) {
        optionals.set(2);
      }
      if (struct.isSetClientMsgID()) {
        optionals.set(3);
      }
      if (struct.isSetPunishInfo()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetBase()) {
        struct.base.write(oprot);
      }
      if (struct.isSetSendTime()) {
        oprot.writeI64(struct.sendTime);
      }
      if (struct.isSetServerMsgID()) {
        oprot.writeString(struct.serverMsgID);
      }
      if (struct.isSetClientMsgID()) {
        oprot.writeString(struct.clientMsgID);
      }
      if (struct.isSetPunishInfo()) {
        oprot.writeString(struct.punishInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserSendMsgResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.base = new BaseResp();
        struct.base.read(iprot);
        struct.setBaseIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sendTime = iprot.readI64();
        struct.setSendTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serverMsgID = iprot.readString();
        struct.setServerMsgIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clientMsgID = iprot.readString();
        struct.setClientMsgIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.punishInfo = iprot.readString();
        struct.setPunishInfoIsSet(true);
      }
    }
  }

}


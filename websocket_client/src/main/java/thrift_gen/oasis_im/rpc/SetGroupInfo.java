/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class SetGroupInfo implements org.apache.thrift.TBase<SetGroupInfo, SetGroupInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SetGroupInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetGroupInfo");

  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notification", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("introduction", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FACE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("faceUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NEW_OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newOwnerId", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SetGroupInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SetGroupInfoTupleSchemeFactory());
  }

  public String groupID; // required
  public String groupName; // required
  public String notification; // required
  public String introduction; // required
  public String faceUrl; // required
  public String serverID; // required
  public String newOwnerId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_ID((short)1, "groupID"),
    GROUP_NAME((short)2, "groupName"),
    NOTIFICATION((short)3, "notification"),
    INTRODUCTION((short)4, "introduction"),
    FACE_URL((short)5, "faceUrl"),
    SERVER_ID((short)6, "serverID"),
    NEW_OWNER_ID((short)7, "newOwnerId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_ID
          return GROUP_ID;
        case 2: // GROUP_NAME
          return GROUP_NAME;
        case 3: // NOTIFICATION
          return NOTIFICATION;
        case 4: // INTRODUCTION
          return INTRODUCTION;
        case 5: // FACE_URL
          return FACE_URL;
        case 6: // SERVER_ID
          return SERVER_ID;
        case 7: // NEW_OWNER_ID
          return NEW_OWNER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("notification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("introduction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACE_URL, new org.apache.thrift.meta_data.FieldMetaData("faceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("newOwnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetGroupInfo.class, metaDataMap);
  }

  public SetGroupInfo() {
  }

  public SetGroupInfo(
    String groupID,
    String groupName,
    String notification,
    String introduction,
    String faceUrl,
    String serverID,
    String newOwnerId)
  {
    this();
    this.groupID = groupID;
    this.groupName = groupName;
    this.notification = notification;
    this.introduction = introduction;
    this.faceUrl = faceUrl;
    this.serverID = serverID;
    this.newOwnerId = newOwnerId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SetGroupInfo(SetGroupInfo other) {
    if (other.isSetGroupID()) {
      this.groupID = other.groupID;
    }
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetNotification()) {
      this.notification = other.notification;
    }
    if (other.isSetIntroduction()) {
      this.introduction = other.introduction;
    }
    if (other.isSetFaceUrl()) {
      this.faceUrl = other.faceUrl;
    }
    if (other.isSetServerID()) {
      this.serverID = other.serverID;
    }
    if (other.isSetNewOwnerId()) {
      this.newOwnerId = other.newOwnerId;
    }
  }

  public SetGroupInfo deepCopy() {
    return new SetGroupInfo(this);
  }

  @Override
  public void clear() {
    this.groupID = null;
    this.groupName = null;
    this.notification = null;
    this.introduction = null;
    this.faceUrl = null;
    this.serverID = null;
    this.newOwnerId = null;
  }

  public String getGroupID() {
    return this.groupID;
  }

  public SetGroupInfo setGroupID(String groupID) {
    this.groupID = groupID;
    return this;
  }

  public void unsetGroupID() {
    this.groupID = null;
  }

  /** Returns true if field groupID is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupID() {
    return this.groupID != null;
  }

  public void setGroupIDIsSet(boolean value) {
    if (!value) {
      this.groupID = null;
    }
  }

  public String getGroupName() {
    return this.groupName;
  }

  public SetGroupInfo setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public String getNotification() {
    return this.notification;
  }

  public SetGroupInfo setNotification(String notification) {
    this.notification = notification;
    return this;
  }

  public void unsetNotification() {
    this.notification = null;
  }

  /** Returns true if field notification is set (has been assigned a value) and false otherwise */
  public boolean isSetNotification() {
    return this.notification != null;
  }

  public void setNotificationIsSet(boolean value) {
    if (!value) {
      this.notification = null;
    }
  }

  public String getIntroduction() {
    return this.introduction;
  }

  public SetGroupInfo setIntroduction(String introduction) {
    this.introduction = introduction;
    return this;
  }

  public void unsetIntroduction() {
    this.introduction = null;
  }

  /** Returns true if field introduction is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroduction() {
    return this.introduction != null;
  }

  public void setIntroductionIsSet(boolean value) {
    if (!value) {
      this.introduction = null;
    }
  }

  public String getFaceUrl() {
    return this.faceUrl;
  }

  public SetGroupInfo setFaceUrl(String faceUrl) {
    this.faceUrl = faceUrl;
    return this;
  }

  public void unsetFaceUrl() {
    this.faceUrl = null;
  }

  /** Returns true if field faceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceUrl() {
    return this.faceUrl != null;
  }

  public void setFaceUrlIsSet(boolean value) {
    if (!value) {
      this.faceUrl = null;
    }
  }

  public String getServerID() {
    return this.serverID;
  }

  public SetGroupInfo setServerID(String serverID) {
    this.serverID = serverID;
    return this;
  }

  public void unsetServerID() {
    this.serverID = null;
  }

  /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
  public boolean isSetServerID() {
    return this.serverID != null;
  }

  public void setServerIDIsSet(boolean value) {
    if (!value) {
      this.serverID = null;
    }
  }

  public String getNewOwnerId() {
    return this.newOwnerId;
  }

  public SetGroupInfo setNewOwnerId(String newOwnerId) {
    this.newOwnerId = newOwnerId;
    return this;
  }

  public void unsetNewOwnerId() {
    this.newOwnerId = null;
  }

  /** Returns true if field newOwnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetNewOwnerId() {
    return this.newOwnerId != null;
  }

  public void setNewOwnerIdIsSet(boolean value) {
    if (!value) {
      this.newOwnerId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_ID:
      if (value == null) {
        unsetGroupID();
      } else {
        setGroupID((String)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case NOTIFICATION:
      if (value == null) {
        unsetNotification();
      } else {
        setNotification((String)value);
      }
      break;

    case INTRODUCTION:
      if (value == null) {
        unsetIntroduction();
      } else {
        setIntroduction((String)value);
      }
      break;

    case FACE_URL:
      if (value == null) {
        unsetFaceUrl();
      } else {
        setFaceUrl((String)value);
      }
      break;

    case SERVER_ID:
      if (value == null) {
        unsetServerID();
      } else {
        setServerID((String)value);
      }
      break;

    case NEW_OWNER_ID:
      if (value == null) {
        unsetNewOwnerId();
      } else {
        setNewOwnerId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_ID:
      return getGroupID();

    case GROUP_NAME:
      return getGroupName();

    case NOTIFICATION:
      return getNotification();

    case INTRODUCTION:
      return getIntroduction();

    case FACE_URL:
      return getFaceUrl();

    case SERVER_ID:
      return getServerID();

    case NEW_OWNER_ID:
      return getNewOwnerId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_ID:
      return isSetGroupID();
    case GROUP_NAME:
      return isSetGroupName();
    case NOTIFICATION:
      return isSetNotification();
    case INTRODUCTION:
      return isSetIntroduction();
    case FACE_URL:
      return isSetFaceUrl();
    case SERVER_ID:
      return isSetServerID();
    case NEW_OWNER_ID:
      return isSetNewOwnerId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SetGroupInfo)
      return this.equals((SetGroupInfo)that);
    return false;
  }

  public boolean equals(SetGroupInfo that) {
    if (that == null)
      return false;

    boolean this_present_groupID = true && this.isSetGroupID();
    boolean that_present_groupID = true && that.isSetGroupID();
    if (this_present_groupID || that_present_groupID) {
      if (!(this_present_groupID && that_present_groupID))
        return false;
      if (!this.groupID.equals(that.groupID))
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_notification = true && this.isSetNotification();
    boolean that_present_notification = true && that.isSetNotification();
    if (this_present_notification || that_present_notification) {
      if (!(this_present_notification && that_present_notification))
        return false;
      if (!this.notification.equals(that.notification))
        return false;
    }

    boolean this_present_introduction = true && this.isSetIntroduction();
    boolean that_present_introduction = true && that.isSetIntroduction();
    if (this_present_introduction || that_present_introduction) {
      if (!(this_present_introduction && that_present_introduction))
        return false;
      if (!this.introduction.equals(that.introduction))
        return false;
    }

    boolean this_present_faceUrl = true && this.isSetFaceUrl();
    boolean that_present_faceUrl = true && that.isSetFaceUrl();
    if (this_present_faceUrl || that_present_faceUrl) {
      if (!(this_present_faceUrl && that_present_faceUrl))
        return false;
      if (!this.faceUrl.equals(that.faceUrl))
        return false;
    }

    boolean this_present_serverID = true && this.isSetServerID();
    boolean that_present_serverID = true && that.isSetServerID();
    if (this_present_serverID || that_present_serverID) {
      if (!(this_present_serverID && that_present_serverID))
        return false;
      if (!this.serverID.equals(that.serverID))
        return false;
    }

    boolean this_present_newOwnerId = true && this.isSetNewOwnerId();
    boolean that_present_newOwnerId = true && that.isSetNewOwnerId();
    if (this_present_newOwnerId || that_present_newOwnerId) {
      if (!(this_present_newOwnerId && that_present_newOwnerId))
        return false;
      if (!this.newOwnerId.equals(that.newOwnerId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_groupID = true && (isSetGroupID());
    list.add(present_groupID);
    if (present_groupID)
      list.add(groupID);

    boolean present_groupName = true && (isSetGroupName());
    list.add(present_groupName);
    if (present_groupName)
      list.add(groupName);

    boolean present_notification = true && (isSetNotification());
    list.add(present_notification);
    if (present_notification)
      list.add(notification);

    boolean present_introduction = true && (isSetIntroduction());
    list.add(present_introduction);
    if (present_introduction)
      list.add(introduction);

    boolean present_faceUrl = true && (isSetFaceUrl());
    list.add(present_faceUrl);
    if (present_faceUrl)
      list.add(faceUrl);

    boolean present_serverID = true && (isSetServerID());
    list.add(present_serverID);
    if (present_serverID)
      list.add(serverID);

    boolean present_newOwnerId = true && (isSetNewOwnerId());
    list.add(present_newOwnerId);
    if (present_newOwnerId)
      list.add(newOwnerId);

    return list.hashCode();
  }

  @Override
  public int compareTo(SetGroupInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroupID()).compareTo(other.isSetGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupID, other.groupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotification()).compareTo(other.isSetNotification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notification, other.notification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroduction()).compareTo(other.isSetIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introduction, other.introduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceUrl()).compareTo(other.isSetFaceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceUrl, other.faceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewOwnerId()).compareTo(other.isSetNewOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newOwnerId, other.newOwnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SetGroupInfo(");
    boolean first = true;

    sb.append("groupID:");
    if (this.groupID == null) {
      sb.append("null");
    } else {
      sb.append(this.groupID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notification:");
    if (this.notification == null) {
      sb.append("null");
    } else {
      sb.append(this.notification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("introduction:");
    if (this.introduction == null) {
      sb.append("null");
    } else {
      sb.append(this.introduction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceUrl:");
    if (this.faceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.faceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverID:");
    if (this.serverID == null) {
      sb.append("null");
    } else {
      sb.append(this.serverID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newOwnerId:");
    if (this.newOwnerId == null) {
      sb.append("null");
    } else {
      sb.append(this.newOwnerId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SetGroupInfoStandardSchemeFactory implements SchemeFactory {
    public SetGroupInfoStandardScheme getScheme() {
      return new SetGroupInfoStandardScheme();
    }
  }

  private static class SetGroupInfoStandardScheme extends StandardScheme<SetGroupInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SetGroupInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupID = iprot.readString();
              struct.setGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notification = iprot.readString();
              struct.setNotificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introduction = iprot.readString();
              struct.setIntroductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FACE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faceUrl = iprot.readString();
              struct.setFaceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverID = iprot.readString();
              struct.setServerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEW_OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newOwnerId = iprot.readString();
              struct.setNewOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SetGroupInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupID != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.groupID);
        oprot.writeFieldEnd();
      }
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      if (struct.notification != null) {
        oprot.writeFieldBegin(NOTIFICATION_FIELD_DESC);
        oprot.writeString(struct.notification);
        oprot.writeFieldEnd();
      }
      if (struct.introduction != null) {
        oprot.writeFieldBegin(INTRODUCTION_FIELD_DESC);
        oprot.writeString(struct.introduction);
        oprot.writeFieldEnd();
      }
      if (struct.faceUrl != null) {
        oprot.writeFieldBegin(FACE_URL_FIELD_DESC);
        oprot.writeString(struct.faceUrl);
        oprot.writeFieldEnd();
      }
      if (struct.serverID != null) {
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.serverID);
        oprot.writeFieldEnd();
      }
      if (struct.newOwnerId != null) {
        oprot.writeFieldBegin(NEW_OWNER_ID_FIELD_DESC);
        oprot.writeString(struct.newOwnerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SetGroupInfoTupleSchemeFactory implements SchemeFactory {
    public SetGroupInfoTupleScheme getScheme() {
      return new SetGroupInfoTupleScheme();
    }
  }

  private static class SetGroupInfoTupleScheme extends TupleScheme<SetGroupInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SetGroupInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupID()) {
        optionals.set(0);
      }
      if (struct.isSetGroupName()) {
        optionals.set(1);
      }
      if (struct.isSetNotification()) {
        optionals.set(2);
      }
      if (struct.isSetIntroduction()) {
        optionals.set(3);
      }
      if (struct.isSetFaceUrl()) {
        optionals.set(4);
      }
      if (struct.isSetServerID()) {
        optionals.set(5);
      }
      if (struct.isSetNewOwnerId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetGroupID()) {
        oprot.writeString(struct.groupID);
      }
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.groupName);
      }
      if (struct.isSetNotification()) {
        oprot.writeString(struct.notification);
      }
      if (struct.isSetIntroduction()) {
        oprot.writeString(struct.introduction);
      }
      if (struct.isSetFaceUrl()) {
        oprot.writeString(struct.faceUrl);
      }
      if (struct.isSetServerID()) {
        oprot.writeString(struct.serverID);
      }
      if (struct.isSetNewOwnerId()) {
        oprot.writeString(struct.newOwnerId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SetGroupInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.groupID = iprot.readString();
        struct.setGroupIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notification = iprot.readString();
        struct.setNotificationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.introduction = iprot.readString();
        struct.setIntroductionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.faceUrl = iprot.readString();
        struct.setFaceUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.serverID = iprot.readString();
        struct.setServerIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.newOwnerId = iprot.readString();
        struct.setNewOwnerIdIsSet(true);
      }
    }
  }

}


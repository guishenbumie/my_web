/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class CreateGroup implements org.apache.thrift.TBase<CreateGroup, CreateGroup._Fields>, java.io.Serializable, Cloneable, Comparable<CreateGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateGroup");

  private static final org.apache.thrift.protocol.TField MEMBER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("memberList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("introduction", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notification", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FACE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("faceUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OWNER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerUid", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ALLIANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("allianceId", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreateGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreateGroupTupleSchemeFactory());
  }

  public List<GroupAddMemberInfo> memberList; // required
  public String groupName; // required
  public String introduction; // required
  public String notification; // required
  public String faceUrl; // required
  public String ex; // required
  public String serverID; // required
  public String groupType; // required
  public String ownerUid; // required
  public String allianceId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEMBER_LIST((short)1, "memberList"),
    GROUP_NAME((short)2, "groupName"),
    INTRODUCTION((short)3, "introduction"),
    NOTIFICATION((short)4, "notification"),
    FACE_URL((short)5, "faceUrl"),
    EX((short)6, "ex"),
    SERVER_ID((short)7, "serverID"),
    GROUP_TYPE((short)8, "groupType"),
    OWNER_UID((short)9, "ownerUid"),
    ALLIANCE_ID((short)10, "allianceId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMBER_LIST
          return MEMBER_LIST;
        case 2: // GROUP_NAME
          return GROUP_NAME;
        case 3: // INTRODUCTION
          return INTRODUCTION;
        case 4: // NOTIFICATION
          return NOTIFICATION;
        case 5: // FACE_URL
          return FACE_URL;
        case 6: // EX
          return EX;
        case 7: // SERVER_ID
          return SERVER_ID;
        case 8: // GROUP_TYPE
          return GROUP_TYPE;
        case 9: // OWNER_UID
          return OWNER_UID;
        case 10: // ALLIANCE_ID
          return ALLIANCE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMBER_LIST, new org.apache.thrift.meta_data.FieldMetaData("memberList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupAddMemberInfo.class))));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("introduction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("notification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACE_URL, new org.apache.thrift.meta_data.FieldMetaData("faceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_UID, new org.apache.thrift.meta_data.FieldMetaData("ownerUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLIANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("allianceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateGroup.class, metaDataMap);
  }

  public CreateGroup() {
  }

  public CreateGroup(
    List<GroupAddMemberInfo> memberList,
    String groupName,
    String introduction,
    String notification,
    String faceUrl,
    String ex,
    String serverID,
    String groupType,
    String ownerUid,
    String allianceId)
  {
    this();
    this.memberList = memberList;
    this.groupName = groupName;
    this.introduction = introduction;
    this.notification = notification;
    this.faceUrl = faceUrl;
    this.ex = ex;
    this.serverID = serverID;
    this.groupType = groupType;
    this.ownerUid = ownerUid;
    this.allianceId = allianceId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateGroup(CreateGroup other) {
    if (other.isSetMemberList()) {
      List<GroupAddMemberInfo> __this__memberList = new ArrayList<GroupAddMemberInfo>(other.memberList.size());
      for (GroupAddMemberInfo other_element : other.memberList) {
        __this__memberList.add(new GroupAddMemberInfo(other_element));
      }
      this.memberList = __this__memberList;
    }
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetIntroduction()) {
      this.introduction = other.introduction;
    }
    if (other.isSetNotification()) {
      this.notification = other.notification;
    }
    if (other.isSetFaceUrl()) {
      this.faceUrl = other.faceUrl;
    }
    if (other.isSetEx()) {
      this.ex = other.ex;
    }
    if (other.isSetServerID()) {
      this.serverID = other.serverID;
    }
    if (other.isSetGroupType()) {
      this.groupType = other.groupType;
    }
    if (other.isSetOwnerUid()) {
      this.ownerUid = other.ownerUid;
    }
    if (other.isSetAllianceId()) {
      this.allianceId = other.allianceId;
    }
  }

  public CreateGroup deepCopy() {
    return new CreateGroup(this);
  }

  @Override
  public void clear() {
    this.memberList = null;
    this.groupName = null;
    this.introduction = null;
    this.notification = null;
    this.faceUrl = null;
    this.ex = null;
    this.serverID = null;
    this.groupType = null;
    this.ownerUid = null;
    this.allianceId = null;
  }

  public int getMemberListSize() {
    return (this.memberList == null) ? 0 : this.memberList.size();
  }

  public java.util.Iterator<GroupAddMemberInfo> getMemberListIterator() {
    return (this.memberList == null) ? null : this.memberList.iterator();
  }

  public void addToMemberList(GroupAddMemberInfo elem) {
    if (this.memberList == null) {
      this.memberList = new ArrayList<GroupAddMemberInfo>();
    }
    this.memberList.add(elem);
  }

  public List<GroupAddMemberInfo> getMemberList() {
    return this.memberList;
  }

  public CreateGroup setMemberList(List<GroupAddMemberInfo> memberList) {
    this.memberList = memberList;
    return this;
  }

  public void unsetMemberList() {
    this.memberList = null;
  }

  /** Returns true if field memberList is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberList() {
    return this.memberList != null;
  }

  public void setMemberListIsSet(boolean value) {
    if (!value) {
      this.memberList = null;
    }
  }

  public String getGroupName() {
    return this.groupName;
  }

  public CreateGroup setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public String getIntroduction() {
    return this.introduction;
  }

  public CreateGroup setIntroduction(String introduction) {
    this.introduction = introduction;
    return this;
  }

  public void unsetIntroduction() {
    this.introduction = null;
  }

  /** Returns true if field introduction is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroduction() {
    return this.introduction != null;
  }

  public void setIntroductionIsSet(boolean value) {
    if (!value) {
      this.introduction = null;
    }
  }

  public String getNotification() {
    return this.notification;
  }

  public CreateGroup setNotification(String notification) {
    this.notification = notification;
    return this;
  }

  public void unsetNotification() {
    this.notification = null;
  }

  /** Returns true if field notification is set (has been assigned a value) and false otherwise */
  public boolean isSetNotification() {
    return this.notification != null;
  }

  public void setNotificationIsSet(boolean value) {
    if (!value) {
      this.notification = null;
    }
  }

  public String getFaceUrl() {
    return this.faceUrl;
  }

  public CreateGroup setFaceUrl(String faceUrl) {
    this.faceUrl = faceUrl;
    return this;
  }

  public void unsetFaceUrl() {
    this.faceUrl = null;
  }

  /** Returns true if field faceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceUrl() {
    return this.faceUrl != null;
  }

  public void setFaceUrlIsSet(boolean value) {
    if (!value) {
      this.faceUrl = null;
    }
  }

  public String getEx() {
    return this.ex;
  }

  public CreateGroup setEx(String ex) {
    this.ex = ex;
    return this;
  }

  public void unsetEx() {
    this.ex = null;
  }

  /** Returns true if field ex is set (has been assigned a value) and false otherwise */
  public boolean isSetEx() {
    return this.ex != null;
  }

  public void setExIsSet(boolean value) {
    if (!value) {
      this.ex = null;
    }
  }

  public String getServerID() {
    return this.serverID;
  }

  public CreateGroup setServerID(String serverID) {
    this.serverID = serverID;
    return this;
  }

  public void unsetServerID() {
    this.serverID = null;
  }

  /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
  public boolean isSetServerID() {
    return this.serverID != null;
  }

  public void setServerIDIsSet(boolean value) {
    if (!value) {
      this.serverID = null;
    }
  }

  public String getGroupType() {
    return this.groupType;
  }

  public CreateGroup setGroupType(String groupType) {
    this.groupType = groupType;
    return this;
  }

  public void unsetGroupType() {
    this.groupType = null;
  }

  /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupType() {
    return this.groupType != null;
  }

  public void setGroupTypeIsSet(boolean value) {
    if (!value) {
      this.groupType = null;
    }
  }

  public String getOwnerUid() {
    return this.ownerUid;
  }

  public CreateGroup setOwnerUid(String ownerUid) {
    this.ownerUid = ownerUid;
    return this;
  }

  public void unsetOwnerUid() {
    this.ownerUid = null;
  }

  /** Returns true if field ownerUid is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerUid() {
    return this.ownerUid != null;
  }

  public void setOwnerUidIsSet(boolean value) {
    if (!value) {
      this.ownerUid = null;
    }
  }

  public String getAllianceId() {
    return this.allianceId;
  }

  public CreateGroup setAllianceId(String allianceId) {
    this.allianceId = allianceId;
    return this;
  }

  public void unsetAllianceId() {
    this.allianceId = null;
  }

  /** Returns true if field allianceId is set (has been assigned a value) and false otherwise */
  public boolean isSetAllianceId() {
    return this.allianceId != null;
  }

  public void setAllianceIdIsSet(boolean value) {
    if (!value) {
      this.allianceId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMBER_LIST:
      if (value == null) {
        unsetMemberList();
      } else {
        setMemberList((List<GroupAddMemberInfo>)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case INTRODUCTION:
      if (value == null) {
        unsetIntroduction();
      } else {
        setIntroduction((String)value);
      }
      break;

    case NOTIFICATION:
      if (value == null) {
        unsetNotification();
      } else {
        setNotification((String)value);
      }
      break;

    case FACE_URL:
      if (value == null) {
        unsetFaceUrl();
      } else {
        setFaceUrl((String)value);
      }
      break;

    case EX:
      if (value == null) {
        unsetEx();
      } else {
        setEx((String)value);
      }
      break;

    case SERVER_ID:
      if (value == null) {
        unsetServerID();
      } else {
        setServerID((String)value);
      }
      break;

    case GROUP_TYPE:
      if (value == null) {
        unsetGroupType();
      } else {
        setGroupType((String)value);
      }
      break;

    case OWNER_UID:
      if (value == null) {
        unsetOwnerUid();
      } else {
        setOwnerUid((String)value);
      }
      break;

    case ALLIANCE_ID:
      if (value == null) {
        unsetAllianceId();
      } else {
        setAllianceId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMBER_LIST:
      return getMemberList();

    case GROUP_NAME:
      return getGroupName();

    case INTRODUCTION:
      return getIntroduction();

    case NOTIFICATION:
      return getNotification();

    case FACE_URL:
      return getFaceUrl();

    case EX:
      return getEx();

    case SERVER_ID:
      return getServerID();

    case GROUP_TYPE:
      return getGroupType();

    case OWNER_UID:
      return getOwnerUid();

    case ALLIANCE_ID:
      return getAllianceId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMBER_LIST:
      return isSetMemberList();
    case GROUP_NAME:
      return isSetGroupName();
    case INTRODUCTION:
      return isSetIntroduction();
    case NOTIFICATION:
      return isSetNotification();
    case FACE_URL:
      return isSetFaceUrl();
    case EX:
      return isSetEx();
    case SERVER_ID:
      return isSetServerID();
    case GROUP_TYPE:
      return isSetGroupType();
    case OWNER_UID:
      return isSetOwnerUid();
    case ALLIANCE_ID:
      return isSetAllianceId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateGroup)
      return this.equals((CreateGroup)that);
    return false;
  }

  public boolean equals(CreateGroup that) {
    if (that == null)
      return false;

    boolean this_present_memberList = true && this.isSetMemberList();
    boolean that_present_memberList = true && that.isSetMemberList();
    if (this_present_memberList || that_present_memberList) {
      if (!(this_present_memberList && that_present_memberList))
        return false;
      if (!this.memberList.equals(that.memberList))
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_introduction = true && this.isSetIntroduction();
    boolean that_present_introduction = true && that.isSetIntroduction();
    if (this_present_introduction || that_present_introduction) {
      if (!(this_present_introduction && that_present_introduction))
        return false;
      if (!this.introduction.equals(that.introduction))
        return false;
    }

    boolean this_present_notification = true && this.isSetNotification();
    boolean that_present_notification = true && that.isSetNotification();
    if (this_present_notification || that_present_notification) {
      if (!(this_present_notification && that_present_notification))
        return false;
      if (!this.notification.equals(that.notification))
        return false;
    }

    boolean this_present_faceUrl = true && this.isSetFaceUrl();
    boolean that_present_faceUrl = true && that.isSetFaceUrl();
    if (this_present_faceUrl || that_present_faceUrl) {
      if (!(this_present_faceUrl && that_present_faceUrl))
        return false;
      if (!this.faceUrl.equals(that.faceUrl))
        return false;
    }

    boolean this_present_ex = true && this.isSetEx();
    boolean that_present_ex = true && that.isSetEx();
    if (this_present_ex || that_present_ex) {
      if (!(this_present_ex && that_present_ex))
        return false;
      if (!this.ex.equals(that.ex))
        return false;
    }

    boolean this_present_serverID = true && this.isSetServerID();
    boolean that_present_serverID = true && that.isSetServerID();
    if (this_present_serverID || that_present_serverID) {
      if (!(this_present_serverID && that_present_serverID))
        return false;
      if (!this.serverID.equals(that.serverID))
        return false;
    }

    boolean this_present_groupType = true && this.isSetGroupType();
    boolean that_present_groupType = true && that.isSetGroupType();
    if (this_present_groupType || that_present_groupType) {
      if (!(this_present_groupType && that_present_groupType))
        return false;
      if (!this.groupType.equals(that.groupType))
        return false;
    }

    boolean this_present_ownerUid = true && this.isSetOwnerUid();
    boolean that_present_ownerUid = true && that.isSetOwnerUid();
    if (this_present_ownerUid || that_present_ownerUid) {
      if (!(this_present_ownerUid && that_present_ownerUid))
        return false;
      if (!this.ownerUid.equals(that.ownerUid))
        return false;
    }

    boolean this_present_allianceId = true && this.isSetAllianceId();
    boolean that_present_allianceId = true && that.isSetAllianceId();
    if (this_present_allianceId || that_present_allianceId) {
      if (!(this_present_allianceId && that_present_allianceId))
        return false;
      if (!this.allianceId.equals(that.allianceId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_memberList = true && (isSetMemberList());
    list.add(present_memberList);
    if (present_memberList)
      list.add(memberList);

    boolean present_groupName = true && (isSetGroupName());
    list.add(present_groupName);
    if (present_groupName)
      list.add(groupName);

    boolean present_introduction = true && (isSetIntroduction());
    list.add(present_introduction);
    if (present_introduction)
      list.add(introduction);

    boolean present_notification = true && (isSetNotification());
    list.add(present_notification);
    if (present_notification)
      list.add(notification);

    boolean present_faceUrl = true && (isSetFaceUrl());
    list.add(present_faceUrl);
    if (present_faceUrl)
      list.add(faceUrl);

    boolean present_ex = true && (isSetEx());
    list.add(present_ex);
    if (present_ex)
      list.add(ex);

    boolean present_serverID = true && (isSetServerID());
    list.add(present_serverID);
    if (present_serverID)
      list.add(serverID);

    boolean present_groupType = true && (isSetGroupType());
    list.add(present_groupType);
    if (present_groupType)
      list.add(groupType);

    boolean present_ownerUid = true && (isSetOwnerUid());
    list.add(present_ownerUid);
    if (present_ownerUid)
      list.add(ownerUid);

    boolean present_allianceId = true && (isSetAllianceId());
    list.add(present_allianceId);
    if (present_allianceId)
      list.add(allianceId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreateGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMemberList()).compareTo(other.isSetMemberList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberList, other.memberList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroduction()).compareTo(other.isSetIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introduction, other.introduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotification()).compareTo(other.isSetNotification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notification, other.notification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceUrl()).compareTo(other.isSetFaceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceUrl, other.faceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(other.isSetGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, other.groupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerUid()).compareTo(other.isSetOwnerUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerUid, other.ownerUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllianceId()).compareTo(other.isSetAllianceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllianceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allianceId, other.allianceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreateGroup(");
    boolean first = true;

    sb.append("memberList:");
    if (this.memberList == null) {
      sb.append("null");
    } else {
      sb.append(this.memberList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("introduction:");
    if (this.introduction == null) {
      sb.append("null");
    } else {
      sb.append(this.introduction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notification:");
    if (this.notification == null) {
      sb.append("null");
    } else {
      sb.append(this.notification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceUrl:");
    if (this.faceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.faceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ex:");
    if (this.ex == null) {
      sb.append("null");
    } else {
      sb.append(this.ex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverID:");
    if (this.serverID == null) {
      sb.append("null");
    } else {
      sb.append(this.serverID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupType:");
    if (this.groupType == null) {
      sb.append("null");
    } else {
      sb.append(this.groupType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerUid:");
    if (this.ownerUid == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allianceId:");
    if (this.allianceId == null) {
      sb.append("null");
    } else {
      sb.append(this.allianceId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreateGroupStandardSchemeFactory implements SchemeFactory {
    public CreateGroupStandardScheme getScheme() {
      return new CreateGroupStandardScheme();
    }
  }

  private static class CreateGroupStandardScheme extends StandardScheme<CreateGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreateGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMBER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list348 = iprot.readListBegin();
                struct.memberList = new ArrayList<GroupAddMemberInfo>(_list348.size);
                GroupAddMemberInfo _elem349;
                for (int _i350 = 0; _i350 < _list348.size; ++_i350)
                {
                  _elem349 = new GroupAddMemberInfo();
                  _elem349.read(iprot);
                  struct.memberList.add(_elem349);
                }
                iprot.readListEnd();
              }
              struct.setMemberListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introduction = iprot.readString();
              struct.setIntroductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOTIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notification = iprot.readString();
              struct.setNotificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FACE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faceUrl = iprot.readString();
              struct.setFaceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ex = iprot.readString();
              struct.setExIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverID = iprot.readString();
              struct.setServerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupType = iprot.readString();
              struct.setGroupTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OWNER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerUid = iprot.readString();
              struct.setOwnerUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ALLIANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allianceId = iprot.readString();
              struct.setAllianceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreateGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.memberList != null) {
        oprot.writeFieldBegin(MEMBER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.memberList.size()));
          for (GroupAddMemberInfo _iter351 : struct.memberList)
          {
            _iter351.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      if (struct.introduction != null) {
        oprot.writeFieldBegin(INTRODUCTION_FIELD_DESC);
        oprot.writeString(struct.introduction);
        oprot.writeFieldEnd();
      }
      if (struct.notification != null) {
        oprot.writeFieldBegin(NOTIFICATION_FIELD_DESC);
        oprot.writeString(struct.notification);
        oprot.writeFieldEnd();
      }
      if (struct.faceUrl != null) {
        oprot.writeFieldBegin(FACE_URL_FIELD_DESC);
        oprot.writeString(struct.faceUrl);
        oprot.writeFieldEnd();
      }
      if (struct.ex != null) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        oprot.writeString(struct.ex);
        oprot.writeFieldEnd();
      }
      if (struct.serverID != null) {
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.serverID);
        oprot.writeFieldEnd();
      }
      if (struct.groupType != null) {
        oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
        oprot.writeString(struct.groupType);
        oprot.writeFieldEnd();
      }
      if (struct.ownerUid != null) {
        oprot.writeFieldBegin(OWNER_UID_FIELD_DESC);
        oprot.writeString(struct.ownerUid);
        oprot.writeFieldEnd();
      }
      if (struct.allianceId != null) {
        oprot.writeFieldBegin(ALLIANCE_ID_FIELD_DESC);
        oprot.writeString(struct.allianceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreateGroupTupleSchemeFactory implements SchemeFactory {
    public CreateGroupTupleScheme getScheme() {
      return new CreateGroupTupleScheme();
    }
  }

  private static class CreateGroupTupleScheme extends TupleScheme<CreateGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreateGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMemberList()) {
        optionals.set(0);
      }
      if (struct.isSetGroupName()) {
        optionals.set(1);
      }
      if (struct.isSetIntroduction()) {
        optionals.set(2);
      }
      if (struct.isSetNotification()) {
        optionals.set(3);
      }
      if (struct.isSetFaceUrl()) {
        optionals.set(4);
      }
      if (struct.isSetEx()) {
        optionals.set(5);
      }
      if (struct.isSetServerID()) {
        optionals.set(6);
      }
      if (struct.isSetGroupType()) {
        optionals.set(7);
      }
      if (struct.isSetOwnerUid()) {
        optionals.set(8);
      }
      if (struct.isSetAllianceId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetMemberList()) {
        {
          oprot.writeI32(struct.memberList.size());
          for (GroupAddMemberInfo _iter352 : struct.memberList)
          {
            _iter352.write(oprot);
          }
        }
      }
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.groupName);
      }
      if (struct.isSetIntroduction()) {
        oprot.writeString(struct.introduction);
      }
      if (struct.isSetNotification()) {
        oprot.writeString(struct.notification);
      }
      if (struct.isSetFaceUrl()) {
        oprot.writeString(struct.faceUrl);
      }
      if (struct.isSetEx()) {
        oprot.writeString(struct.ex);
      }
      if (struct.isSetServerID()) {
        oprot.writeString(struct.serverID);
      }
      if (struct.isSetGroupType()) {
        oprot.writeString(struct.groupType);
      }
      if (struct.isSetOwnerUid()) {
        oprot.writeString(struct.ownerUid);
      }
      if (struct.isSetAllianceId()) {
        oprot.writeString(struct.allianceId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreateGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.memberList = new ArrayList<GroupAddMemberInfo>(_list353.size);
          GroupAddMemberInfo _elem354;
          for (int _i355 = 0; _i355 < _list353.size; ++_i355)
          {
            _elem354 = new GroupAddMemberInfo();
            _elem354.read(iprot);
            struct.memberList.add(_elem354);
          }
        }
        struct.setMemberListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.introduction = iprot.readString();
        struct.setIntroductionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.notification = iprot.readString();
        struct.setNotificationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.faceUrl = iprot.readString();
        struct.setFaceUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ex = iprot.readString();
        struct.setExIsSet(true);
      }
      if (incoming.get(6)) {
        struct.serverID = iprot.readString();
        struct.setServerIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.groupType = iprot.readString();
        struct.setGroupTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ownerUid = iprot.readString();
        struct.setOwnerUidIsSet(true);
      }
      if (incoming.get(9)) {
        struct.allianceId = iprot.readString();
        struct.setAllianceIdIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class UserSendMsgReq implements org.apache.thrift.TBase<UserSendMsgReq, UserSendMsgReq._Fields>, java.io.Serializable, Cloneable, Comparable<UserSendMsgReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserSendMsgReq");

  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TO_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("toIdList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SENDER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("senderInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("Base", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserSendMsgReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserSendMsgReqTupleSchemeFactory());
  }

  public String token; // required
  public ChatMsg data; // required
  public List<String> toIdList; // required
  public SenderInfo senderInfo; // required
  public thrift_gen.base.Base Base; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOKEN((short)1, "token"),
    DATA((short)2, "data"),
    TO_ID_LIST((short)3, "toIdList"),
    SENDER_INFO((short)4, "senderInfo"),
    BASE((short)255, "Base");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN
          return TOKEN;
        case 2: // DATA
          return DATA;
        case 3: // TO_ID_LIST
          return TO_ID_LIST;
        case 4: // SENDER_INFO
          return SENDER_INFO;
        case 255: // BASE
          return BASE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BASE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatMsg.class)));
    tmpMap.put(_Fields.TO_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("toIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SENDER_INFO, new org.apache.thrift.meta_data.FieldMetaData("senderInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "SenderInfo")));
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("Base", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, thrift_gen.base.Base.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserSendMsgReq.class, metaDataMap);
  }

  public UserSendMsgReq() {
  }

  public UserSendMsgReq(
    String token,
    ChatMsg data,
    List<String> toIdList,
    SenderInfo senderInfo)
  {
    this();
    this.token = token;
    this.data = data;
    this.toIdList = toIdList;
    this.senderInfo = senderInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserSendMsgReq(UserSendMsgReq other) {
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetData()) {
      this.data = new ChatMsg(other.data);
    }
    if (other.isSetToIdList()) {
      List<String> __this__toIdList = new ArrayList<String>(other.toIdList);
      this.toIdList = __this__toIdList;
    }
    if (other.isSetSenderInfo()) {
      this.senderInfo = other.senderInfo;
    }
    if (other.isSetBase()) {
      this.Base = new thrift_gen.base.Base(other.Base);
    }
  }

  public UserSendMsgReq deepCopy() {
    return new UserSendMsgReq(this);
  }

  @Override
  public void clear() {
    this.token = null;
    this.data = null;
    this.toIdList = null;
    this.senderInfo = null;
    this.Base = null;
  }

  public String getToken() {
    return this.token;
  }

  public UserSendMsgReq setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public ChatMsg getData() {
    return this.data;
  }

  public UserSendMsgReq setData(ChatMsg data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getToIdListSize() {
    return (this.toIdList == null) ? 0 : this.toIdList.size();
  }

  public java.util.Iterator<String> getToIdListIterator() {
    return (this.toIdList == null) ? null : this.toIdList.iterator();
  }

  public void addToToIdList(String elem) {
    if (this.toIdList == null) {
      this.toIdList = new ArrayList<String>();
    }
    this.toIdList.add(elem);
  }

  public List<String> getToIdList() {
    return this.toIdList;
  }

  public UserSendMsgReq setToIdList(List<String> toIdList) {
    this.toIdList = toIdList;
    return this;
  }

  public void unsetToIdList() {
    this.toIdList = null;
  }

  /** Returns true if field toIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetToIdList() {
    return this.toIdList != null;
  }

  public void setToIdListIsSet(boolean value) {
    if (!value) {
      this.toIdList = null;
    }
  }

  public SenderInfo getSenderInfo() {
    return this.senderInfo;
  }

  public UserSendMsgReq setSenderInfo(SenderInfo senderInfo) {
    this.senderInfo = senderInfo;
    return this;
  }

  public void unsetSenderInfo() {
    this.senderInfo = null;
  }

  /** Returns true if field senderInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderInfo() {
    return this.senderInfo != null;
  }

  public void setSenderInfoIsSet(boolean value) {
    if (!value) {
      this.senderInfo = null;
    }
  }

  public thrift_gen.base.Base getBase() {
    return this.Base;
  }

  public UserSendMsgReq setBase(thrift_gen.base.Base Base) {
    this.Base = Base;
    return this;
  }

  public void unsetBase() {
    this.Base = null;
  }

  /** Returns true if field Base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.Base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.Base = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((ChatMsg)value);
      }
      break;

    case TO_ID_LIST:
      if (value == null) {
        unsetToIdList();
      } else {
        setToIdList((List<String>)value);
      }
      break;

    case SENDER_INFO:
      if (value == null) {
        unsetSenderInfo();
      } else {
        setSenderInfo((SenderInfo)value);
      }
      break;

    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((thrift_gen.base.Base)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN:
      return getToken();

    case DATA:
      return getData();

    case TO_ID_LIST:
      return getToIdList();

    case SENDER_INFO:
      return getSenderInfo();

    case BASE:
      return getBase();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKEN:
      return isSetToken();
    case DATA:
      return isSetData();
    case TO_ID_LIST:
      return isSetToIdList();
    case SENDER_INFO:
      return isSetSenderInfo();
    case BASE:
      return isSetBase();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserSendMsgReq)
      return this.equals((UserSendMsgReq)that);
    return false;
  }

  public boolean equals(UserSendMsgReq that) {
    if (that == null)
      return false;

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_toIdList = true && this.isSetToIdList();
    boolean that_present_toIdList = true && that.isSetToIdList();
    if (this_present_toIdList || that_present_toIdList) {
      if (!(this_present_toIdList && that_present_toIdList))
        return false;
      if (!this.toIdList.equals(that.toIdList))
        return false;
    }

    boolean this_present_senderInfo = true && this.isSetSenderInfo();
    boolean that_present_senderInfo = true && that.isSetSenderInfo();
    if (this_present_senderInfo || that_present_senderInfo) {
      if (!(this_present_senderInfo && that_present_senderInfo))
        return false;
      if (!this.senderInfo.equals(that.senderInfo))
        return false;
    }

    boolean this_present_Base = true && this.isSetBase();
    boolean that_present_Base = true && that.isSetBase();
    if (this_present_Base || that_present_Base) {
      if (!(this_present_Base && that_present_Base))
        return false;
      if (!this.Base.equals(that.Base))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    boolean present_toIdList = true && (isSetToIdList());
    list.add(present_toIdList);
    if (present_toIdList)
      list.add(toIdList);

    boolean present_senderInfo = true && (isSetSenderInfo());
    list.add(present_senderInfo);
    if (present_senderInfo)
      list.add(senderInfo);

    boolean present_Base = true && (isSetBase());
    list.add(present_Base);
    if (present_Base)
      list.add(Base);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserSendMsgReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToIdList()).compareTo(other.isSetToIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toIdList, other.toIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderInfo()).compareTo(other.isSetSenderInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderInfo, other.senderInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Base, other.Base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserSendMsgReq(");
    boolean first = true;

    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toIdList:");
    if (this.toIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.toIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderInfo:");
    if (this.senderInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.senderInfo);
    }
    first = false;
    if (isSetBase()) {
      if (!first) sb.append(", ");
      sb.append("Base:");
      if (this.Base == null) {
        sb.append("null");
      } else {
        sb.append(this.Base);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (data != null) {
      data.validate();
    }
    if (Base != null) {
      Base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserSendMsgReqStandardSchemeFactory implements SchemeFactory {
    public UserSendMsgReqStandardScheme getScheme() {
      return new UserSendMsgReqStandardScheme();
    }
  }

  private static class UserSendMsgReqStandardScheme extends StandardScheme<UserSendMsgReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserSendMsgReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data = new ChatMsg();
              struct.data.read(iprot);
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TO_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                struct.toIdList = new ArrayList<String>(_list172.size);
                String _elem173;
                for (int _i174 = 0; _i174 < _list172.size; ++_i174)
                {
                  _elem173 = iprot.readString();
                  struct.toIdList.add(_elem173);
                }
                iprot.readListEnd();
              }
              struct.setToIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENDER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.senderInfo = new SenderInfo();
              struct.senderInfo.read(iprot);
              struct.setSenderInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Base = new thrift_gen.base.Base();
              struct.Base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserSendMsgReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        struct.data.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.toIdList != null) {
        oprot.writeFieldBegin(TO_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.toIdList.size()));
          for (String _iter175 : struct.toIdList)
          {
            oprot.writeString(_iter175);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.senderInfo != null) {
        oprot.writeFieldBegin(SENDER_INFO_FIELD_DESC);
        struct.senderInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Base != null) {
        if (struct.isSetBase()) {
          oprot.writeFieldBegin(BASE_FIELD_DESC);
          struct.Base.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserSendMsgReqTupleSchemeFactory implements SchemeFactory {
    public UserSendMsgReqTupleScheme getScheme() {
      return new UserSendMsgReqTupleScheme();
    }
  }

  private static class UserSendMsgReqTupleScheme extends TupleScheme<UserSendMsgReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserSendMsgReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetToken()) {
        optionals.set(0);
      }
      if (struct.isSetData()) {
        optionals.set(1);
      }
      if (struct.isSetToIdList()) {
        optionals.set(2);
      }
      if (struct.isSetSenderInfo()) {
        optionals.set(3);
      }
      if (struct.isSetBase()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetData()) {
        struct.data.write(oprot);
      }
      if (struct.isSetToIdList()) {
        {
          oprot.writeI32(struct.toIdList.size());
          for (String _iter176 : struct.toIdList)
          {
            oprot.writeString(_iter176);
          }
        }
      }
      if (struct.isSetSenderInfo()) {
        struct.senderInfo.write(oprot);
      }
      if (struct.isSetBase()) {
        struct.Base.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserSendMsgReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.data = new ChatMsg();
        struct.data.read(iprot);
        struct.setDataIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list177 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.toIdList = new ArrayList<String>(_list177.size);
          String _elem178;
          for (int _i179 = 0; _i179 < _list177.size; ++_i179)
          {
            _elem178 = iprot.readString();
            struct.toIdList.add(_elem178);
          }
        }
        struct.setToIdListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.senderInfo = new SenderInfo();
        struct.senderInfo.read(iprot);
        struct.setSenderInfoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Base = new thrift_gen.base.Base();
        struct.Base.read(iprot);
        struct.setBaseIsSet(true);
      }
    }
  }

}


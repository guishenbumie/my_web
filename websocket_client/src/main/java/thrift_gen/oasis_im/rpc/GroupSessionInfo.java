/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class GroupSessionInfo implements org.apache.thrift.TBase<GroupSessionInfo, GroupSessionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<GroupSessionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupSessionInfo");

  private static final org.apache.thrift.protocol.TField GROUP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("groupInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SETTING_FIELD_DESC = new org.apache.thrift.protocol.TField("setting", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_MSG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastMsgTime", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupSessionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupSessionInfoTupleSchemeFactory());
  }

  public GroupInfo groupInfo; // required
  public String setting; // required
  public long seq; // required
  public long lastMsgTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_INFO((short)1, "groupInfo"),
    SETTING((short)2, "setting"),
    SEQ((short)3, "seq"),
    LAST_MSG_TIME((short)4, "lastMsgTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_INFO
          return GROUP_INFO;
        case 2: // SETTING
          return SETTING;
        case 3: // SEQ
          return SEQ;
        case 4: // LAST_MSG_TIME
          return LAST_MSG_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQ_ISSET_ID = 0;
  private static final int __LASTMSGTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_INFO, new org.apache.thrift.meta_data.FieldMetaData("groupInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "GroupInfo")));
    tmpMap.put(_Fields.SETTING, new org.apache.thrift.meta_data.FieldMetaData("setting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MSG_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastMsgTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupSessionInfo.class, metaDataMap);
  }

  public GroupSessionInfo() {
  }

  public GroupSessionInfo(
    GroupInfo groupInfo,
    String setting,
    long seq,
    long lastMsgTime)
  {
    this();
    this.groupInfo = groupInfo;
    this.setting = setting;
    this.seq = seq;
    setSeqIsSet(true);
    this.lastMsgTime = lastMsgTime;
    setLastMsgTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupSessionInfo(GroupSessionInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGroupInfo()) {
      this.groupInfo = other.groupInfo;
    }
    if (other.isSetSetting()) {
      this.setting = other.setting;
    }
    this.seq = other.seq;
    this.lastMsgTime = other.lastMsgTime;
  }

  public GroupSessionInfo deepCopy() {
    return new GroupSessionInfo(this);
  }

  @Override
  public void clear() {
    this.groupInfo = null;
    this.setting = null;
    setSeqIsSet(false);
    this.seq = 0;
    setLastMsgTimeIsSet(false);
    this.lastMsgTime = 0;
  }

  public GroupInfo getGroupInfo() {
    return this.groupInfo;
  }

  public GroupSessionInfo setGroupInfo(GroupInfo groupInfo) {
    this.groupInfo = groupInfo;
    return this;
  }

  public void unsetGroupInfo() {
    this.groupInfo = null;
  }

  /** Returns true if field groupInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupInfo() {
    return this.groupInfo != null;
  }

  public void setGroupInfoIsSet(boolean value) {
    if (!value) {
      this.groupInfo = null;
    }
  }

  public String getSetting() {
    return this.setting;
  }

  public GroupSessionInfo setSetting(String setting) {
    this.setting = setting;
    return this;
  }

  public void unsetSetting() {
    this.setting = null;
  }

  /** Returns true if field setting is set (has been assigned a value) and false otherwise */
  public boolean isSetSetting() {
    return this.setting != null;
  }

  public void setSettingIsSet(boolean value) {
    if (!value) {
      this.setting = null;
    }
  }

  public long getSeq() {
    return this.seq;
  }

  public GroupSessionInfo setSeq(long seq) {
    this.seq = seq;
    setSeqIsSet(true);
    return this;
  }

  public void unsetSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  /** Returns true if field seq is set (has been assigned a value) and false otherwise */
  public boolean isSetSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  public void setSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
  }

  public long getLastMsgTime() {
    return this.lastMsgTime;
  }

  public GroupSessionInfo setLastMsgTime(long lastMsgTime) {
    this.lastMsgTime = lastMsgTime;
    setLastMsgTimeIsSet(true);
    return this;
  }

  public void unsetLastMsgTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMSGTIME_ISSET_ID);
  }

  /** Returns true if field lastMsgTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastMsgTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMSGTIME_ISSET_ID);
  }

  public void setLastMsgTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMSGTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_INFO:
      if (value == null) {
        unsetGroupInfo();
      } else {
        setGroupInfo((GroupInfo)value);
      }
      break;

    case SETTING:
      if (value == null) {
        unsetSetting();
      } else {
        setSetting((String)value);
      }
      break;

    case SEQ:
      if (value == null) {
        unsetSeq();
      } else {
        setSeq((Long)value);
      }
      break;

    case LAST_MSG_TIME:
      if (value == null) {
        unsetLastMsgTime();
      } else {
        setLastMsgTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_INFO:
      return getGroupInfo();

    case SETTING:
      return getSetting();

    case SEQ:
      return getSeq();

    case LAST_MSG_TIME:
      return getLastMsgTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_INFO:
      return isSetGroupInfo();
    case SETTING:
      return isSetSetting();
    case SEQ:
      return isSetSeq();
    case LAST_MSG_TIME:
      return isSetLastMsgTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupSessionInfo)
      return this.equals((GroupSessionInfo)that);
    return false;
  }

  public boolean equals(GroupSessionInfo that) {
    if (that == null)
      return false;

    boolean this_present_groupInfo = true && this.isSetGroupInfo();
    boolean that_present_groupInfo = true && that.isSetGroupInfo();
    if (this_present_groupInfo || that_present_groupInfo) {
      if (!(this_present_groupInfo && that_present_groupInfo))
        return false;
      if (!this.groupInfo.equals(that.groupInfo))
        return false;
    }

    boolean this_present_setting = true && this.isSetSetting();
    boolean that_present_setting = true && that.isSetSetting();
    if (this_present_setting || that_present_setting) {
      if (!(this_present_setting && that_present_setting))
        return false;
      if (!this.setting.equals(that.setting))
        return false;
    }

    boolean this_present_seq = true;
    boolean that_present_seq = true;
    if (this_present_seq || that_present_seq) {
      if (!(this_present_seq && that_present_seq))
        return false;
      if (this.seq != that.seq)
        return false;
    }

    boolean this_present_lastMsgTime = true;
    boolean that_present_lastMsgTime = true;
    if (this_present_lastMsgTime || that_present_lastMsgTime) {
      if (!(this_present_lastMsgTime && that_present_lastMsgTime))
        return false;
      if (this.lastMsgTime != that.lastMsgTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_groupInfo = true && (isSetGroupInfo());
    list.add(present_groupInfo);
    if (present_groupInfo)
      list.add(groupInfo);

    boolean present_setting = true && (isSetSetting());
    list.add(present_setting);
    if (present_setting)
      list.add(setting);

    boolean present_seq = true;
    list.add(present_seq);
    if (present_seq)
      list.add(seq);

    boolean present_lastMsgTime = true;
    list.add(present_lastMsgTime);
    if (present_lastMsgTime)
      list.add(lastMsgTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupSessionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroupInfo()).compareTo(other.isSetGroupInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupInfo, other.groupInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetting()).compareTo(other.isSetSetting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setting, other.setting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastMsgTime()).compareTo(other.isSetLastMsgTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastMsgTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastMsgTime, other.lastMsgTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupSessionInfo(");
    boolean first = true;

    sb.append("groupInfo:");
    if (this.groupInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.groupInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setting:");
    if (this.setting == null) {
      sb.append("null");
    } else {
      sb.append(this.setting);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seq:");
    sb.append(this.seq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastMsgTime:");
    sb.append(this.lastMsgTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupSessionInfoStandardSchemeFactory implements SchemeFactory {
    public GroupSessionInfoStandardScheme getScheme() {
      return new GroupSessionInfoStandardScheme();
    }
  }

  private static class GroupSessionInfoStandardScheme extends StandardScheme<GroupSessionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupSessionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupInfo = new GroupInfo();
              struct.groupInfo.read(iprot);
              struct.setGroupInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SETTING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.setting = iprot.readString();
              struct.setSettingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seq = iprot.readI64();
              struct.setSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_MSG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastMsgTime = iprot.readI64();
              struct.setLastMsgTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupSessionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupInfo != null) {
        oprot.writeFieldBegin(GROUP_INFO_FIELD_DESC);
        struct.groupInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.setting != null) {
        oprot.writeFieldBegin(SETTING_FIELD_DESC);
        oprot.writeString(struct.setting);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI64(struct.seq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MSG_TIME_FIELD_DESC);
      oprot.writeI64(struct.lastMsgTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupSessionInfoTupleSchemeFactory implements SchemeFactory {
    public GroupSessionInfoTupleScheme getScheme() {
      return new GroupSessionInfoTupleScheme();
    }
  }

  private static class GroupSessionInfoTupleScheme extends TupleScheme<GroupSessionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupSessionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupInfo()) {
        optionals.set(0);
      }
      if (struct.isSetSetting()) {
        optionals.set(1);
      }
      if (struct.isSetSeq()) {
        optionals.set(2);
      }
      if (struct.isSetLastMsgTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGroupInfo()) {
        struct.groupInfo.write(oprot);
      }
      if (struct.isSetSetting()) {
        oprot.writeString(struct.setting);
      }
      if (struct.isSetSeq()) {
        oprot.writeI64(struct.seq);
      }
      if (struct.isSetLastMsgTime()) {
        oprot.writeI64(struct.lastMsgTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupSessionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.groupInfo = new GroupInfo();
        struct.groupInfo.read(iprot);
        struct.setGroupInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.setting = iprot.readString();
        struct.setSettingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.seq = iprot.readI64();
        struct.setSeqIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastMsgTime = iprot.readI64();
        struct.setLastMsgTimeIsSet(true);
      }
    }
  }

}


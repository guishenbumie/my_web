/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class PullSessionListResp implements org.apache.thrift.TBase<PullSessionListResp, PullSessionListResp._Fields>, java.io.Serializable, Cloneable, Comparable<PullSessionListResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PullSessionListResp");

  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField GLOBAL_CHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("globalChat", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_CHATS_FIELD_DESC = new org.apache.thrift.protocol.TField("groupChats", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SINGLE_CHATS_FIELD_DESC = new org.apache.thrift.protocol.TField("singleChats", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CROSS_GLOBAL_CHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("crossGlobalChat", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField BLACKLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("blacklist", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PullSessionListRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PullSessionListRespTupleSchemeFactory());
  }

  public BaseResp base; // required
  public GlobalSessionInfo globalChat; // required
  public List<GroupSessionInfo> groupChats; // required
  public List<SingleSessionInfo> singleChats; // required
  public CrossGlobalSessionInfo crossGlobalChat; // required
  public List<UserInfo> blacklist; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASE((short)1, "base"),
    GLOBAL_CHAT((short)2, "globalChat"),
    GROUP_CHATS((short)3, "groupChats"),
    SINGLE_CHATS((short)4, "singleChats"),
    CROSS_GLOBAL_CHAT((short)5, "crossGlobalChat"),
    BLACKLIST((short)10, "blacklist");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASE
          return BASE;
        case 2: // GLOBAL_CHAT
          return GLOBAL_CHAT;
        case 3: // GROUP_CHATS
          return GROUP_CHATS;
        case 4: // SINGLE_CHATS
          return SINGLE_CHATS;
        case 5: // CROSS_GLOBAL_CHAT
          return CROSS_GLOBAL_CHAT;
        case 10: // BLACKLIST
          return BLACKLIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseResp.class)));
    tmpMap.put(_Fields.GLOBAL_CHAT, new org.apache.thrift.meta_data.FieldMetaData("globalChat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalSessionInfo.class)));
    tmpMap.put(_Fields.GROUP_CHATS, new org.apache.thrift.meta_data.FieldMetaData("groupChats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupSessionInfo.class))));
    tmpMap.put(_Fields.SINGLE_CHATS, new org.apache.thrift.meta_data.FieldMetaData("singleChats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SingleSessionInfo.class))));
    tmpMap.put(_Fields.CROSS_GLOBAL_CHAT, new org.apache.thrift.meta_data.FieldMetaData("crossGlobalChat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossGlobalSessionInfo.class)));
    tmpMap.put(_Fields.BLACKLIST, new org.apache.thrift.meta_data.FieldMetaData("blacklist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PullSessionListResp.class, metaDataMap);
  }

  public PullSessionListResp() {
  }

  public PullSessionListResp(
    BaseResp base,
    GlobalSessionInfo globalChat,
    List<GroupSessionInfo> groupChats,
    List<SingleSessionInfo> singleChats,
    CrossGlobalSessionInfo crossGlobalChat,
    List<UserInfo> blacklist)
  {
    this();
    this.base = base;
    this.globalChat = globalChat;
    this.groupChats = groupChats;
    this.singleChats = singleChats;
    this.crossGlobalChat = crossGlobalChat;
    this.blacklist = blacklist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PullSessionListResp(PullSessionListResp other) {
    if (other.isSetBase()) {
      this.base = new BaseResp(other.base);
    }
    if (other.isSetGlobalChat()) {
      this.globalChat = new GlobalSessionInfo(other.globalChat);
    }
    if (other.isSetGroupChats()) {
      List<GroupSessionInfo> __this__groupChats = new ArrayList<GroupSessionInfo>(other.groupChats.size());
      for (GroupSessionInfo other_element : other.groupChats) {
        __this__groupChats.add(new GroupSessionInfo(other_element));
      }
      this.groupChats = __this__groupChats;
    }
    if (other.isSetSingleChats()) {
      List<SingleSessionInfo> __this__singleChats = new ArrayList<SingleSessionInfo>(other.singleChats.size());
      for (SingleSessionInfo other_element : other.singleChats) {
        __this__singleChats.add(new SingleSessionInfo(other_element));
      }
      this.singleChats = __this__singleChats;
    }
    if (other.isSetCrossGlobalChat()) {
      this.crossGlobalChat = new CrossGlobalSessionInfo(other.crossGlobalChat);
    }
    if (other.isSetBlacklist()) {
      List<UserInfo> __this__blacklist = new ArrayList<UserInfo>(other.blacklist.size());
      for (UserInfo other_element : other.blacklist) {
        __this__blacklist.add(new UserInfo(other_element));
      }
      this.blacklist = __this__blacklist;
    }
  }

  public PullSessionListResp deepCopy() {
    return new PullSessionListResp(this);
  }

  @Override
  public void clear() {
    this.base = null;
    this.globalChat = null;
    this.groupChats = null;
    this.singleChats = null;
    this.crossGlobalChat = null;
    this.blacklist = null;
  }

  public BaseResp getBase() {
    return this.base;
  }

  public PullSessionListResp setBase(BaseResp base) {
    this.base = base;
    return this;
  }

  public void unsetBase() {
    this.base = null;
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.base = null;
    }
  }

  public GlobalSessionInfo getGlobalChat() {
    return this.globalChat;
  }

  public PullSessionListResp setGlobalChat(GlobalSessionInfo globalChat) {
    this.globalChat = globalChat;
    return this;
  }

  public void unsetGlobalChat() {
    this.globalChat = null;
  }

  /** Returns true if field globalChat is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalChat() {
    return this.globalChat != null;
  }

  public void setGlobalChatIsSet(boolean value) {
    if (!value) {
      this.globalChat = null;
    }
  }

  public int getGroupChatsSize() {
    return (this.groupChats == null) ? 0 : this.groupChats.size();
  }

  public java.util.Iterator<GroupSessionInfo> getGroupChatsIterator() {
    return (this.groupChats == null) ? null : this.groupChats.iterator();
  }

  public void addToGroupChats(GroupSessionInfo elem) {
    if (this.groupChats == null) {
      this.groupChats = new ArrayList<GroupSessionInfo>();
    }
    this.groupChats.add(elem);
  }

  public List<GroupSessionInfo> getGroupChats() {
    return this.groupChats;
  }

  public PullSessionListResp setGroupChats(List<GroupSessionInfo> groupChats) {
    this.groupChats = groupChats;
    return this;
  }

  public void unsetGroupChats() {
    this.groupChats = null;
  }

  /** Returns true if field groupChats is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupChats() {
    return this.groupChats != null;
  }

  public void setGroupChatsIsSet(boolean value) {
    if (!value) {
      this.groupChats = null;
    }
  }

  public int getSingleChatsSize() {
    return (this.singleChats == null) ? 0 : this.singleChats.size();
  }

  public java.util.Iterator<SingleSessionInfo> getSingleChatsIterator() {
    return (this.singleChats == null) ? null : this.singleChats.iterator();
  }

  public void addToSingleChats(SingleSessionInfo elem) {
    if (this.singleChats == null) {
      this.singleChats = new ArrayList<SingleSessionInfo>();
    }
    this.singleChats.add(elem);
  }

  public List<SingleSessionInfo> getSingleChats() {
    return this.singleChats;
  }

  public PullSessionListResp setSingleChats(List<SingleSessionInfo> singleChats) {
    this.singleChats = singleChats;
    return this;
  }

  public void unsetSingleChats() {
    this.singleChats = null;
  }

  /** Returns true if field singleChats is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleChats() {
    return this.singleChats != null;
  }

  public void setSingleChatsIsSet(boolean value) {
    if (!value) {
      this.singleChats = null;
    }
  }

  public CrossGlobalSessionInfo getCrossGlobalChat() {
    return this.crossGlobalChat;
  }

  public PullSessionListResp setCrossGlobalChat(CrossGlobalSessionInfo crossGlobalChat) {
    this.crossGlobalChat = crossGlobalChat;
    return this;
  }

  public void unsetCrossGlobalChat() {
    this.crossGlobalChat = null;
  }

  /** Returns true if field crossGlobalChat is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossGlobalChat() {
    return this.crossGlobalChat != null;
  }

  public void setCrossGlobalChatIsSet(boolean value) {
    if (!value) {
      this.crossGlobalChat = null;
    }
  }

  public int getBlacklistSize() {
    return (this.blacklist == null) ? 0 : this.blacklist.size();
  }

  public java.util.Iterator<UserInfo> getBlacklistIterator() {
    return (this.blacklist == null) ? null : this.blacklist.iterator();
  }

  public void addToBlacklist(UserInfo elem) {
    if (this.blacklist == null) {
      this.blacklist = new ArrayList<UserInfo>();
    }
    this.blacklist.add(elem);
  }

  public List<UserInfo> getBlacklist() {
    return this.blacklist;
  }

  public PullSessionListResp setBlacklist(List<UserInfo> blacklist) {
    this.blacklist = blacklist;
    return this;
  }

  public void unsetBlacklist() {
    this.blacklist = null;
  }

  /** Returns true if field blacklist is set (has been assigned a value) and false otherwise */
  public boolean isSetBlacklist() {
    return this.blacklist != null;
  }

  public void setBlacklistIsSet(boolean value) {
    if (!value) {
      this.blacklist = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((BaseResp)value);
      }
      break;

    case GLOBAL_CHAT:
      if (value == null) {
        unsetGlobalChat();
      } else {
        setGlobalChat((GlobalSessionInfo)value);
      }
      break;

    case GROUP_CHATS:
      if (value == null) {
        unsetGroupChats();
      } else {
        setGroupChats((List<GroupSessionInfo>)value);
      }
      break;

    case SINGLE_CHATS:
      if (value == null) {
        unsetSingleChats();
      } else {
        setSingleChats((List<SingleSessionInfo>)value);
      }
      break;

    case CROSS_GLOBAL_CHAT:
      if (value == null) {
        unsetCrossGlobalChat();
      } else {
        setCrossGlobalChat((CrossGlobalSessionInfo)value);
      }
      break;

    case BLACKLIST:
      if (value == null) {
        unsetBlacklist();
      } else {
        setBlacklist((List<UserInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BASE:
      return getBase();

    case GLOBAL_CHAT:
      return getGlobalChat();

    case GROUP_CHATS:
      return getGroupChats();

    case SINGLE_CHATS:
      return getSingleChats();

    case CROSS_GLOBAL_CHAT:
      return getCrossGlobalChat();

    case BLACKLIST:
      return getBlacklist();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BASE:
      return isSetBase();
    case GLOBAL_CHAT:
      return isSetGlobalChat();
    case GROUP_CHATS:
      return isSetGroupChats();
    case SINGLE_CHATS:
      return isSetSingleChats();
    case CROSS_GLOBAL_CHAT:
      return isSetCrossGlobalChat();
    case BLACKLIST:
      return isSetBlacklist();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PullSessionListResp)
      return this.equals((PullSessionListResp)that);
    return false;
  }

  public boolean equals(PullSessionListResp that) {
    if (that == null)
      return false;

    boolean this_present_base = true && this.isSetBase();
    boolean that_present_base = true && that.isSetBase();
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (!this.base.equals(that.base))
        return false;
    }

    boolean this_present_globalChat = true && this.isSetGlobalChat();
    boolean that_present_globalChat = true && that.isSetGlobalChat();
    if (this_present_globalChat || that_present_globalChat) {
      if (!(this_present_globalChat && that_present_globalChat))
        return false;
      if (!this.globalChat.equals(that.globalChat))
        return false;
    }

    boolean this_present_groupChats = true && this.isSetGroupChats();
    boolean that_present_groupChats = true && that.isSetGroupChats();
    if (this_present_groupChats || that_present_groupChats) {
      if (!(this_present_groupChats && that_present_groupChats))
        return false;
      if (!this.groupChats.equals(that.groupChats))
        return false;
    }

    boolean this_present_singleChats = true && this.isSetSingleChats();
    boolean that_present_singleChats = true && that.isSetSingleChats();
    if (this_present_singleChats || that_present_singleChats) {
      if (!(this_present_singleChats && that_present_singleChats))
        return false;
      if (!this.singleChats.equals(that.singleChats))
        return false;
    }

    boolean this_present_crossGlobalChat = true && this.isSetCrossGlobalChat();
    boolean that_present_crossGlobalChat = true && that.isSetCrossGlobalChat();
    if (this_present_crossGlobalChat || that_present_crossGlobalChat) {
      if (!(this_present_crossGlobalChat && that_present_crossGlobalChat))
        return false;
      if (!this.crossGlobalChat.equals(that.crossGlobalChat))
        return false;
    }

    boolean this_present_blacklist = true && this.isSetBlacklist();
    boolean that_present_blacklist = true && that.isSetBlacklist();
    if (this_present_blacklist || that_present_blacklist) {
      if (!(this_present_blacklist && that_present_blacklist))
        return false;
      if (!this.blacklist.equals(that.blacklist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_base = true && (isSetBase());
    list.add(present_base);
    if (present_base)
      list.add(base);

    boolean present_globalChat = true && (isSetGlobalChat());
    list.add(present_globalChat);
    if (present_globalChat)
      list.add(globalChat);

    boolean present_groupChats = true && (isSetGroupChats());
    list.add(present_groupChats);
    if (present_groupChats)
      list.add(groupChats);

    boolean present_singleChats = true && (isSetSingleChats());
    list.add(present_singleChats);
    if (present_singleChats)
      list.add(singleChats);

    boolean present_crossGlobalChat = true && (isSetCrossGlobalChat());
    list.add(present_crossGlobalChat);
    if (present_crossGlobalChat)
      list.add(crossGlobalChat);

    boolean present_blacklist = true && (isSetBlacklist());
    list.add(present_blacklist);
    if (present_blacklist)
      list.add(blacklist);

    return list.hashCode();
  }

  @Override
  public int compareTo(PullSessionListResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlobalChat()).compareTo(other.isSetGlobalChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalChat, other.globalChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupChats()).compareTo(other.isSetGroupChats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupChats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupChats, other.groupChats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleChats()).compareTo(other.isSetSingleChats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleChats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleChats, other.singleChats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossGlobalChat()).compareTo(other.isSetCrossGlobalChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossGlobalChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossGlobalChat, other.crossGlobalChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlacklist()).compareTo(other.isSetBlacklist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlacklist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blacklist, other.blacklist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PullSessionListResp(");
    boolean first = true;

    sb.append("base:");
    if (this.base == null) {
      sb.append("null");
    } else {
      sb.append(this.base);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("globalChat:");
    if (this.globalChat == null) {
      sb.append("null");
    } else {
      sb.append(this.globalChat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupChats:");
    if (this.groupChats == null) {
      sb.append("null");
    } else {
      sb.append(this.groupChats);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleChats:");
    if (this.singleChats == null) {
      sb.append("null");
    } else {
      sb.append(this.singleChats);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossGlobalChat:");
    if (this.crossGlobalChat == null) {
      sb.append("null");
    } else {
      sb.append(this.crossGlobalChat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blacklist:");
    if (this.blacklist == null) {
      sb.append("null");
    } else {
      sb.append(this.blacklist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (base != null) {
      base.validate();
    }
    if (globalChat != null) {
      globalChat.validate();
    }
    if (crossGlobalChat != null) {
      crossGlobalChat.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PullSessionListRespStandardSchemeFactory implements SchemeFactory {
    public PullSessionListRespStandardScheme getScheme() {
      return new PullSessionListRespStandardScheme();
    }
  }

  private static class PullSessionListRespStandardScheme extends StandardScheme<PullSessionListResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PullSessionListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base = new BaseResp();
              struct.base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GLOBAL_CHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.globalChat = new GlobalSessionInfo();
              struct.globalChat.read(iprot);
              struct.setGlobalChatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_CHATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list324 = iprot.readListBegin();
                struct.groupChats = new ArrayList<GroupSessionInfo>(_list324.size);
                GroupSessionInfo _elem325;
                for (int _i326 = 0; _i326 < _list324.size; ++_i326)
                {
                  _elem325 = new GroupSessionInfo();
                  _elem325.read(iprot);
                  struct.groupChats.add(_elem325);
                }
                iprot.readListEnd();
              }
              struct.setGroupChatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SINGLE_CHATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list327 = iprot.readListBegin();
                struct.singleChats = new ArrayList<SingleSessionInfo>(_list327.size);
                SingleSessionInfo _elem328;
                for (int _i329 = 0; _i329 < _list327.size; ++_i329)
                {
                  _elem328 = new SingleSessionInfo();
                  _elem328.read(iprot);
                  struct.singleChats.add(_elem328);
                }
                iprot.readListEnd();
              }
              struct.setSingleChatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CROSS_GLOBAL_CHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.crossGlobalChat = new CrossGlobalSessionInfo();
              struct.crossGlobalChat.read(iprot);
              struct.setCrossGlobalChatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BLACKLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list330 = iprot.readListBegin();
                struct.blacklist = new ArrayList<UserInfo>(_list330.size);
                UserInfo _elem331;
                for (int _i332 = 0; _i332 < _list330.size; ++_i332)
                {
                  _elem331 = new UserInfo();
                  _elem331.read(iprot);
                  struct.blacklist.add(_elem331);
                }
                iprot.readListEnd();
              }
              struct.setBlacklistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PullSessionListResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.base.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.globalChat != null) {
        oprot.writeFieldBegin(GLOBAL_CHAT_FIELD_DESC);
        struct.globalChat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.groupChats != null) {
        oprot.writeFieldBegin(GROUP_CHATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groupChats.size()));
          for (GroupSessionInfo _iter333 : struct.groupChats)
          {
            _iter333.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.singleChats != null) {
        oprot.writeFieldBegin(SINGLE_CHATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.singleChats.size()));
          for (SingleSessionInfo _iter334 : struct.singleChats)
          {
            _iter334.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.crossGlobalChat != null) {
        oprot.writeFieldBegin(CROSS_GLOBAL_CHAT_FIELD_DESC);
        struct.crossGlobalChat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.blacklist != null) {
        oprot.writeFieldBegin(BLACKLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.blacklist.size()));
          for (UserInfo _iter335 : struct.blacklist)
          {
            _iter335.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PullSessionListRespTupleSchemeFactory implements SchemeFactory {
    public PullSessionListRespTupleScheme getScheme() {
      return new PullSessionListRespTupleScheme();
    }
  }

  private static class PullSessionListRespTupleScheme extends TupleScheme<PullSessionListResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PullSessionListResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBase()) {
        optionals.set(0);
      }
      if (struct.isSetGlobalChat()) {
        optionals.set(1);
      }
      if (struct.isSetGroupChats()) {
        optionals.set(2);
      }
      if (struct.isSetSingleChats()) {
        optionals.set(3);
      }
      if (struct.isSetCrossGlobalChat()) {
        optionals.set(4);
      }
      if (struct.isSetBlacklist()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetBase()) {
        struct.base.write(oprot);
      }
      if (struct.isSetGlobalChat()) {
        struct.globalChat.write(oprot);
      }
      if (struct.isSetGroupChats()) {
        {
          oprot.writeI32(struct.groupChats.size());
          for (GroupSessionInfo _iter336 : struct.groupChats)
          {
            _iter336.write(oprot);
          }
        }
      }
      if (struct.isSetSingleChats()) {
        {
          oprot.writeI32(struct.singleChats.size());
          for (SingleSessionInfo _iter337 : struct.singleChats)
          {
            _iter337.write(oprot);
          }
        }
      }
      if (struct.isSetCrossGlobalChat()) {
        struct.crossGlobalChat.write(oprot);
      }
      if (struct.isSetBlacklist()) {
        {
          oprot.writeI32(struct.blacklist.size());
          for (UserInfo _iter338 : struct.blacklist)
          {
            _iter338.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PullSessionListResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.base = new BaseResp();
        struct.base.read(iprot);
        struct.setBaseIsSet(true);
      }
      if (incoming.get(1)) {
        struct.globalChat = new GlobalSessionInfo();
        struct.globalChat.read(iprot);
        struct.setGlobalChatIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list339 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groupChats = new ArrayList<GroupSessionInfo>(_list339.size);
          GroupSessionInfo _elem340;
          for (int _i341 = 0; _i341 < _list339.size; ++_i341)
          {
            _elem340 = new GroupSessionInfo();
            _elem340.read(iprot);
            struct.groupChats.add(_elem340);
          }
        }
        struct.setGroupChatsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list342 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.singleChats = new ArrayList<SingleSessionInfo>(_list342.size);
          SingleSessionInfo _elem343;
          for (int _i344 = 0; _i344 < _list342.size; ++_i344)
          {
            _elem343 = new SingleSessionInfo();
            _elem343.read(iprot);
            struct.singleChats.add(_elem343);
          }
        }
        struct.setSingleChatsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.crossGlobalChat = new CrossGlobalSessionInfo();
        struct.crossGlobalChat.read(iprot);
        struct.setCrossGlobalChatIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list345 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.blacklist = new ArrayList<UserInfo>(_list345.size);
          UserInfo _elem346;
          for (int _i347 = 0; _i347 < _list345.size; ++_i347)
          {
            _elem346 = new UserInfo();
            _elem346.read(iprot);
            struct.blacklist.add(_elem346);
          }
        }
        struct.setBlacklistIsSet(true);
      }
    }
  }

}


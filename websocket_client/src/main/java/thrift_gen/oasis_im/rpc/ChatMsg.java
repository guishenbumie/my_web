/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class ChatMsg implements org.apache.thrift.TBase<ChatMsg, ChatMsg._Fields>, java.io.Serializable, Cloneable, Comparable<ChatMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatMsg");

  private static final org.apache.thrift.protocol.TField SEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sendID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENDER_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("senderNickName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SENDER_FACE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("senderFaceURL", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PLATFORM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("platformID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RECV_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recvID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECV_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("recvSeq", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MSG_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("msgFrom", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CLIENT_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientMsgID", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SERVER_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverMsgID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField SESSION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionKey", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REPLY_FOR_FIELD_DESC = new org.apache.thrift.protocol.TField("replyFor", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField AT_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("atUsers", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChatMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChatMsgTupleSchemeFactory());
  }

  public String sendID; // required
  public String senderNickName; // required
  public String senderFaceURL; // required
  public int platformID; // required
  public String recvID; // required
  public long recvSeq; // required
  /**
   * 
   * @see SESSION_TYPE
   */
  public SESSION_TYPE sessionType; // required
  /**
   * 
   * @see MSG_FROM
   */
  public MSG_FROM msgFrom; // required
  /**
   * 
   * @see CONTENT_TYPE
   */
  public CONTENT_TYPE contentType; // required
  public String content; // required
  public long sendTime; // required
  public String clientMsgID; // required
  public String serverMsgID; // required
  public String options; // required
  public String ex; // required
  public String serverID; // required
  public String sessionKey; // required
  public ReplyFor replyFor; // required
  public List<AtUser> atUsers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEND_ID((short)1, "sendID"),
    SENDER_NICK_NAME((short)2, "senderNickName"),
    SENDER_FACE_URL((short)3, "senderFaceURL"),
    PLATFORM_ID((short)4, "platformID"),
    RECV_ID((short)5, "recvID"),
    RECV_SEQ((short)6, "recvSeq"),
    /**
     * 
     * @see SESSION_TYPE
     */
    SESSION_TYPE((short)7, "sessionType"),
    /**
     * 
     * @see MSG_FROM
     */
    MSG_FROM((short)8, "msgFrom"),
    /**
     * 
     * @see CONTENT_TYPE
     */
    CONTENT_TYPE((short)9, "contentType"),
    CONTENT((short)10, "content"),
    SEND_TIME((short)11, "sendTime"),
    CLIENT_MSG_ID((short)12, "clientMsgID"),
    SERVER_MSG_ID((short)13, "serverMsgID"),
    OPTIONS((short)14, "options"),
    EX((short)15, "ex"),
    SERVER_ID((short)16, "serverID"),
    SESSION_KEY((short)17, "sessionKey"),
    REPLY_FOR((short)19, "replyFor"),
    AT_USERS((short)20, "atUsers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEND_ID
          return SEND_ID;
        case 2: // SENDER_NICK_NAME
          return SENDER_NICK_NAME;
        case 3: // SENDER_FACE_URL
          return SENDER_FACE_URL;
        case 4: // PLATFORM_ID
          return PLATFORM_ID;
        case 5: // RECV_ID
          return RECV_ID;
        case 6: // RECV_SEQ
          return RECV_SEQ;
        case 7: // SESSION_TYPE
          return SESSION_TYPE;
        case 8: // MSG_FROM
          return MSG_FROM;
        case 9: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 10: // CONTENT
          return CONTENT;
        case 11: // SEND_TIME
          return SEND_TIME;
        case 12: // CLIENT_MSG_ID
          return CLIENT_MSG_ID;
        case 13: // SERVER_MSG_ID
          return SERVER_MSG_ID;
        case 14: // OPTIONS
          return OPTIONS;
        case 15: // EX
          return EX;
        case 16: // SERVER_ID
          return SERVER_ID;
        case 17: // SESSION_KEY
          return SESSION_KEY;
        case 19: // REPLY_FOR
          return REPLY_FOR;
        case 20: // AT_USERS
          return AT_USERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLATFORMID_ISSET_ID = 0;
  private static final int __RECVSEQ_ISSET_ID = 1;
  private static final int __SENDTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEND_ID, new org.apache.thrift.meta_data.FieldMetaData("sendID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDER_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("senderNickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDER_FACE_URL, new org.apache.thrift.meta_data.FieldMetaData("senderFaceURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM_ID, new org.apache.thrift.meta_data.FieldMetaData("platformID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECV_ID, new org.apache.thrift.meta_data.FieldMetaData("recvID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECV_SEQ, new org.apache.thrift.meta_data.FieldMetaData("recvSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sessionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SESSION_TYPE.class)));
    tmpMap.put(_Fields.MSG_FROM, new org.apache.thrift.meta_data.FieldMetaData("msgFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MSG_FROM.class)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CONTENT_TYPE.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("clientMsgID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("serverMsgID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_KEY, new org.apache.thrift.meta_data.FieldMetaData("sessionKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_FOR, new org.apache.thrift.meta_data.FieldMetaData("replyFor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReplyFor.class)));
    tmpMap.put(_Fields.AT_USERS, new org.apache.thrift.meta_data.FieldMetaData("atUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AtUser.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatMsg.class, metaDataMap);
  }

  public ChatMsg() {
  }

  public ChatMsg(
    String sendID,
    String senderNickName,
    String senderFaceURL,
    int platformID,
    String recvID,
    long recvSeq,
    SESSION_TYPE sessionType,
    MSG_FROM msgFrom,
    CONTENT_TYPE contentType,
    String content,
    long sendTime,
    String clientMsgID,
    String serverMsgID,
    String options,
    String ex,
    String serverID,
    String sessionKey,
    ReplyFor replyFor,
    List<AtUser> atUsers)
  {
    this();
    this.sendID = sendID;
    this.senderNickName = senderNickName;
    this.senderFaceURL = senderFaceURL;
    this.platformID = platformID;
    setPlatformIDIsSet(true);
    this.recvID = recvID;
    this.recvSeq = recvSeq;
    setRecvSeqIsSet(true);
    this.sessionType = sessionType;
    this.msgFrom = msgFrom;
    this.contentType = contentType;
    this.content = content;
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
    this.clientMsgID = clientMsgID;
    this.serverMsgID = serverMsgID;
    this.options = options;
    this.ex = ex;
    this.serverID = serverID;
    this.sessionKey = sessionKey;
    this.replyFor = replyFor;
    this.atUsers = atUsers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatMsg(ChatMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSendID()) {
      this.sendID = other.sendID;
    }
    if (other.isSetSenderNickName()) {
      this.senderNickName = other.senderNickName;
    }
    if (other.isSetSenderFaceURL()) {
      this.senderFaceURL = other.senderFaceURL;
    }
    this.platformID = other.platformID;
    if (other.isSetRecvID()) {
      this.recvID = other.recvID;
    }
    this.recvSeq = other.recvSeq;
    if (other.isSetSessionType()) {
      this.sessionType = other.sessionType;
    }
    if (other.isSetMsgFrom()) {
      this.msgFrom = other.msgFrom;
    }
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.sendTime = other.sendTime;
    if (other.isSetClientMsgID()) {
      this.clientMsgID = other.clientMsgID;
    }
    if (other.isSetServerMsgID()) {
      this.serverMsgID = other.serverMsgID;
    }
    if (other.isSetOptions()) {
      this.options = other.options;
    }
    if (other.isSetEx()) {
      this.ex = other.ex;
    }
    if (other.isSetServerID()) {
      this.serverID = other.serverID;
    }
    if (other.isSetSessionKey()) {
      this.sessionKey = other.sessionKey;
    }
    if (other.isSetReplyFor()) {
      this.replyFor = new ReplyFor(other.replyFor);
    }
    if (other.isSetAtUsers()) {
      List<AtUser> __this__atUsers = new ArrayList<AtUser>(other.atUsers.size());
      for (AtUser other_element : other.atUsers) {
        __this__atUsers.add(new AtUser(other_element));
      }
      this.atUsers = __this__atUsers;
    }
  }

  public ChatMsg deepCopy() {
    return new ChatMsg(this);
  }

  @Override
  public void clear() {
    this.sendID = null;
    this.senderNickName = null;
    this.senderFaceURL = null;
    setPlatformIDIsSet(false);
    this.platformID = 0;
    this.recvID = null;
    setRecvSeqIsSet(false);
    this.recvSeq = 0;
    this.sessionType = null;
    this.msgFrom = null;
    this.contentType = null;
    this.content = null;
    setSendTimeIsSet(false);
    this.sendTime = 0;
    this.clientMsgID = null;
    this.serverMsgID = null;
    this.options = null;
    this.ex = null;
    this.serverID = null;
    this.sessionKey = null;
    this.replyFor = null;
    this.atUsers = null;
  }

  public String getSendID() {
    return this.sendID;
  }

  public ChatMsg setSendID(String sendID) {
    this.sendID = sendID;
    return this;
  }

  public void unsetSendID() {
    this.sendID = null;
  }

  /** Returns true if field sendID is set (has been assigned a value) and false otherwise */
  public boolean isSetSendID() {
    return this.sendID != null;
  }

  public void setSendIDIsSet(boolean value) {
    if (!value) {
      this.sendID = null;
    }
  }

  public String getSenderNickName() {
    return this.senderNickName;
  }

  public ChatMsg setSenderNickName(String senderNickName) {
    this.senderNickName = senderNickName;
    return this;
  }

  public void unsetSenderNickName() {
    this.senderNickName = null;
  }

  /** Returns true if field senderNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderNickName() {
    return this.senderNickName != null;
  }

  public void setSenderNickNameIsSet(boolean value) {
    if (!value) {
      this.senderNickName = null;
    }
  }

  public String getSenderFaceURL() {
    return this.senderFaceURL;
  }

  public ChatMsg setSenderFaceURL(String senderFaceURL) {
    this.senderFaceURL = senderFaceURL;
    return this;
  }

  public void unsetSenderFaceURL() {
    this.senderFaceURL = null;
  }

  /** Returns true if field senderFaceURL is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderFaceURL() {
    return this.senderFaceURL != null;
  }

  public void setSenderFaceURLIsSet(boolean value) {
    if (!value) {
      this.senderFaceURL = null;
    }
  }

  public int getPlatformID() {
    return this.platformID;
  }

  public ChatMsg setPlatformID(int platformID) {
    this.platformID = platformID;
    setPlatformIDIsSet(true);
    return this;
  }

  public void unsetPlatformID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLATFORMID_ISSET_ID);
  }

  /** Returns true if field platformID is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformID() {
    return EncodingUtils.testBit(__isset_bitfield, __PLATFORMID_ISSET_ID);
  }

  public void setPlatformIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLATFORMID_ISSET_ID, value);
  }

  public String getRecvID() {
    return this.recvID;
  }

  public ChatMsg setRecvID(String recvID) {
    this.recvID = recvID;
    return this;
  }

  public void unsetRecvID() {
    this.recvID = null;
  }

  /** Returns true if field recvID is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvID() {
    return this.recvID != null;
  }

  public void setRecvIDIsSet(boolean value) {
    if (!value) {
      this.recvID = null;
    }
  }

  public long getRecvSeq() {
    return this.recvSeq;
  }

  public ChatMsg setRecvSeq(long recvSeq) {
    this.recvSeq = recvSeq;
    setRecvSeqIsSet(true);
    return this;
  }

  public void unsetRecvSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECVSEQ_ISSET_ID);
  }

  /** Returns true if field recvSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __RECVSEQ_ISSET_ID);
  }

  public void setRecvSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECVSEQ_ISSET_ID, value);
  }

  /**
   * 
   * @see SESSION_TYPE
   */
  public SESSION_TYPE getSessionType() {
    return this.sessionType;
  }

  /**
   * 
   * @see SESSION_TYPE
   */
  public ChatMsg setSessionType(SESSION_TYPE sessionType) {
    this.sessionType = sessionType;
    return this;
  }

  public void unsetSessionType() {
    this.sessionType = null;
  }

  /** Returns true if field sessionType is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionType() {
    return this.sessionType != null;
  }

  public void setSessionTypeIsSet(boolean value) {
    if (!value) {
      this.sessionType = null;
    }
  }

  /**
   * 
   * @see MSG_FROM
   */
  public MSG_FROM getMsgFrom() {
    return this.msgFrom;
  }

  /**
   * 
   * @see MSG_FROM
   */
  public ChatMsg setMsgFrom(MSG_FROM msgFrom) {
    this.msgFrom = msgFrom;
    return this;
  }

  public void unsetMsgFrom() {
    this.msgFrom = null;
  }

  /** Returns true if field msgFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgFrom() {
    return this.msgFrom != null;
  }

  public void setMsgFromIsSet(boolean value) {
    if (!value) {
      this.msgFrom = null;
    }
  }

  /**
   * 
   * @see CONTENT_TYPE
   */
  public CONTENT_TYPE getContentType() {
    return this.contentType;
  }

  /**
   * 
   * @see CONTENT_TYPE
   */
  public ChatMsg setContentType(CONTENT_TYPE contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public ChatMsg setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public long getSendTime() {
    return this.sendTime;
  }

  public ChatMsg setSendTime(long sendTime) {
    this.sendTime = sendTime;
    setSendTimeIsSet(true);
    return this;
  }

  public void unsetSendTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  /** Returns true if field sendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDTIME_ISSET_ID);
  }

  public void setSendTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTIME_ISSET_ID, value);
  }

  public String getClientMsgID() {
    return this.clientMsgID;
  }

  public ChatMsg setClientMsgID(String clientMsgID) {
    this.clientMsgID = clientMsgID;
    return this;
  }

  public void unsetClientMsgID() {
    this.clientMsgID = null;
  }

  /** Returns true if field clientMsgID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientMsgID() {
    return this.clientMsgID != null;
  }

  public void setClientMsgIDIsSet(boolean value) {
    if (!value) {
      this.clientMsgID = null;
    }
  }

  public String getServerMsgID() {
    return this.serverMsgID;
  }

  public ChatMsg setServerMsgID(String serverMsgID) {
    this.serverMsgID = serverMsgID;
    return this;
  }

  public void unsetServerMsgID() {
    this.serverMsgID = null;
  }

  /** Returns true if field serverMsgID is set (has been assigned a value) and false otherwise */
  public boolean isSetServerMsgID() {
    return this.serverMsgID != null;
  }

  public void setServerMsgIDIsSet(boolean value) {
    if (!value) {
      this.serverMsgID = null;
    }
  }

  public String getOptions() {
    return this.options;
  }

  public ChatMsg setOptions(String options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public String getEx() {
    return this.ex;
  }

  public ChatMsg setEx(String ex) {
    this.ex = ex;
    return this;
  }

  public void unsetEx() {
    this.ex = null;
  }

  /** Returns true if field ex is set (has been assigned a value) and false otherwise */
  public boolean isSetEx() {
    return this.ex != null;
  }

  public void setExIsSet(boolean value) {
    if (!value) {
      this.ex = null;
    }
  }

  public String getServerID() {
    return this.serverID;
  }

  public ChatMsg setServerID(String serverID) {
    this.serverID = serverID;
    return this;
  }

  public void unsetServerID() {
    this.serverID = null;
  }

  /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
  public boolean isSetServerID() {
    return this.serverID != null;
  }

  public void setServerIDIsSet(boolean value) {
    if (!value) {
      this.serverID = null;
    }
  }

  public String getSessionKey() {
    return this.sessionKey;
  }

  public ChatMsg setSessionKey(String sessionKey) {
    this.sessionKey = sessionKey;
    return this;
  }

  public void unsetSessionKey() {
    this.sessionKey = null;
  }

  /** Returns true if field sessionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionKey() {
    return this.sessionKey != null;
  }

  public void setSessionKeyIsSet(boolean value) {
    if (!value) {
      this.sessionKey = null;
    }
  }

  public ReplyFor getReplyFor() {
    return this.replyFor;
  }

  public ChatMsg setReplyFor(ReplyFor replyFor) {
    this.replyFor = replyFor;
    return this;
  }

  public void unsetReplyFor() {
    this.replyFor = null;
  }

  /** Returns true if field replyFor is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyFor() {
    return this.replyFor != null;
  }

  public void setReplyForIsSet(boolean value) {
    if (!value) {
      this.replyFor = null;
    }
  }

  public int getAtUsersSize() {
    return (this.atUsers == null) ? 0 : this.atUsers.size();
  }

  public java.util.Iterator<AtUser> getAtUsersIterator() {
    return (this.atUsers == null) ? null : this.atUsers.iterator();
  }

  public void addToAtUsers(AtUser elem) {
    if (this.atUsers == null) {
      this.atUsers = new ArrayList<AtUser>();
    }
    this.atUsers.add(elem);
  }

  public List<AtUser> getAtUsers() {
    return this.atUsers;
  }

  public ChatMsg setAtUsers(List<AtUser> atUsers) {
    this.atUsers = atUsers;
    return this;
  }

  public void unsetAtUsers() {
    this.atUsers = null;
  }

  /** Returns true if field atUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetAtUsers() {
    return this.atUsers != null;
  }

  public void setAtUsersIsSet(boolean value) {
    if (!value) {
      this.atUsers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEND_ID:
      if (value == null) {
        unsetSendID();
      } else {
        setSendID((String)value);
      }
      break;

    case SENDER_NICK_NAME:
      if (value == null) {
        unsetSenderNickName();
      } else {
        setSenderNickName((String)value);
      }
      break;

    case SENDER_FACE_URL:
      if (value == null) {
        unsetSenderFaceURL();
      } else {
        setSenderFaceURL((String)value);
      }
      break;

    case PLATFORM_ID:
      if (value == null) {
        unsetPlatformID();
      } else {
        setPlatformID((Integer)value);
      }
      break;

    case RECV_ID:
      if (value == null) {
        unsetRecvID();
      } else {
        setRecvID((String)value);
      }
      break;

    case RECV_SEQ:
      if (value == null) {
        unsetRecvSeq();
      } else {
        setRecvSeq((Long)value);
      }
      break;

    case SESSION_TYPE:
      if (value == null) {
        unsetSessionType();
      } else {
        setSessionType((SESSION_TYPE)value);
      }
      break;

    case MSG_FROM:
      if (value == null) {
        unsetMsgFrom();
      } else {
        setMsgFrom((MSG_FROM)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((CONTENT_TYPE)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case SEND_TIME:
      if (value == null) {
        unsetSendTime();
      } else {
        setSendTime((Long)value);
      }
      break;

    case CLIENT_MSG_ID:
      if (value == null) {
        unsetClientMsgID();
      } else {
        setClientMsgID((String)value);
      }
      break;

    case SERVER_MSG_ID:
      if (value == null) {
        unsetServerMsgID();
      } else {
        setServerMsgID((String)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((String)value);
      }
      break;

    case EX:
      if (value == null) {
        unsetEx();
      } else {
        setEx((String)value);
      }
      break;

    case SERVER_ID:
      if (value == null) {
        unsetServerID();
      } else {
        setServerID((String)value);
      }
      break;

    case SESSION_KEY:
      if (value == null) {
        unsetSessionKey();
      } else {
        setSessionKey((String)value);
      }
      break;

    case REPLY_FOR:
      if (value == null) {
        unsetReplyFor();
      } else {
        setReplyFor((ReplyFor)value);
      }
      break;

    case AT_USERS:
      if (value == null) {
        unsetAtUsers();
      } else {
        setAtUsers((List<AtUser>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEND_ID:
      return getSendID();

    case SENDER_NICK_NAME:
      return getSenderNickName();

    case SENDER_FACE_URL:
      return getSenderFaceURL();

    case PLATFORM_ID:
      return getPlatformID();

    case RECV_ID:
      return getRecvID();

    case RECV_SEQ:
      return getRecvSeq();

    case SESSION_TYPE:
      return getSessionType();

    case MSG_FROM:
      return getMsgFrom();

    case CONTENT_TYPE:
      return getContentType();

    case CONTENT:
      return getContent();

    case SEND_TIME:
      return getSendTime();

    case CLIENT_MSG_ID:
      return getClientMsgID();

    case SERVER_MSG_ID:
      return getServerMsgID();

    case OPTIONS:
      return getOptions();

    case EX:
      return getEx();

    case SERVER_ID:
      return getServerID();

    case SESSION_KEY:
      return getSessionKey();

    case REPLY_FOR:
      return getReplyFor();

    case AT_USERS:
      return getAtUsers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEND_ID:
      return isSetSendID();
    case SENDER_NICK_NAME:
      return isSetSenderNickName();
    case SENDER_FACE_URL:
      return isSetSenderFaceURL();
    case PLATFORM_ID:
      return isSetPlatformID();
    case RECV_ID:
      return isSetRecvID();
    case RECV_SEQ:
      return isSetRecvSeq();
    case SESSION_TYPE:
      return isSetSessionType();
    case MSG_FROM:
      return isSetMsgFrom();
    case CONTENT_TYPE:
      return isSetContentType();
    case CONTENT:
      return isSetContent();
    case SEND_TIME:
      return isSetSendTime();
    case CLIENT_MSG_ID:
      return isSetClientMsgID();
    case SERVER_MSG_ID:
      return isSetServerMsgID();
    case OPTIONS:
      return isSetOptions();
    case EX:
      return isSetEx();
    case SERVER_ID:
      return isSetServerID();
    case SESSION_KEY:
      return isSetSessionKey();
    case REPLY_FOR:
      return isSetReplyFor();
    case AT_USERS:
      return isSetAtUsers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatMsg)
      return this.equals((ChatMsg)that);
    return false;
  }

  public boolean equals(ChatMsg that) {
    if (that == null)
      return false;

    boolean this_present_sendID = true && this.isSetSendID();
    boolean that_present_sendID = true && that.isSetSendID();
    if (this_present_sendID || that_present_sendID) {
      if (!(this_present_sendID && that_present_sendID))
        return false;
      if (!this.sendID.equals(that.sendID))
        return false;
    }

    boolean this_present_senderNickName = true && this.isSetSenderNickName();
    boolean that_present_senderNickName = true && that.isSetSenderNickName();
    if (this_present_senderNickName || that_present_senderNickName) {
      if (!(this_present_senderNickName && that_present_senderNickName))
        return false;
      if (!this.senderNickName.equals(that.senderNickName))
        return false;
    }

    boolean this_present_senderFaceURL = true && this.isSetSenderFaceURL();
    boolean that_present_senderFaceURL = true && that.isSetSenderFaceURL();
    if (this_present_senderFaceURL || that_present_senderFaceURL) {
      if (!(this_present_senderFaceURL && that_present_senderFaceURL))
        return false;
      if (!this.senderFaceURL.equals(that.senderFaceURL))
        return false;
    }

    boolean this_present_platformID = true;
    boolean that_present_platformID = true;
    if (this_present_platformID || that_present_platformID) {
      if (!(this_present_platformID && that_present_platformID))
        return false;
      if (this.platformID != that.platformID)
        return false;
    }

    boolean this_present_recvID = true && this.isSetRecvID();
    boolean that_present_recvID = true && that.isSetRecvID();
    if (this_present_recvID || that_present_recvID) {
      if (!(this_present_recvID && that_present_recvID))
        return false;
      if (!this.recvID.equals(that.recvID))
        return false;
    }

    boolean this_present_recvSeq = true;
    boolean that_present_recvSeq = true;
    if (this_present_recvSeq || that_present_recvSeq) {
      if (!(this_present_recvSeq && that_present_recvSeq))
        return false;
      if (this.recvSeq != that.recvSeq)
        return false;
    }

    boolean this_present_sessionType = true && this.isSetSessionType();
    boolean that_present_sessionType = true && that.isSetSessionType();
    if (this_present_sessionType || that_present_sessionType) {
      if (!(this_present_sessionType && that_present_sessionType))
        return false;
      if (!this.sessionType.equals(that.sessionType))
        return false;
    }

    boolean this_present_msgFrom = true && this.isSetMsgFrom();
    boolean that_present_msgFrom = true && that.isSetMsgFrom();
    if (this_present_msgFrom || that_present_msgFrom) {
      if (!(this_present_msgFrom && that_present_msgFrom))
        return false;
      if (!this.msgFrom.equals(that.msgFrom))
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_sendTime = true;
    boolean that_present_sendTime = true;
    if (this_present_sendTime || that_present_sendTime) {
      if (!(this_present_sendTime && that_present_sendTime))
        return false;
      if (this.sendTime != that.sendTime)
        return false;
    }

    boolean this_present_clientMsgID = true && this.isSetClientMsgID();
    boolean that_present_clientMsgID = true && that.isSetClientMsgID();
    if (this_present_clientMsgID || that_present_clientMsgID) {
      if (!(this_present_clientMsgID && that_present_clientMsgID))
        return false;
      if (!this.clientMsgID.equals(that.clientMsgID))
        return false;
    }

    boolean this_present_serverMsgID = true && this.isSetServerMsgID();
    boolean that_present_serverMsgID = true && that.isSetServerMsgID();
    if (this_present_serverMsgID || that_present_serverMsgID) {
      if (!(this_present_serverMsgID && that_present_serverMsgID))
        return false;
      if (!this.serverMsgID.equals(that.serverMsgID))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_ex = true && this.isSetEx();
    boolean that_present_ex = true && that.isSetEx();
    if (this_present_ex || that_present_ex) {
      if (!(this_present_ex && that_present_ex))
        return false;
      if (!this.ex.equals(that.ex))
        return false;
    }

    boolean this_present_serverID = true && this.isSetServerID();
    boolean that_present_serverID = true && that.isSetServerID();
    if (this_present_serverID || that_present_serverID) {
      if (!(this_present_serverID && that_present_serverID))
        return false;
      if (!this.serverID.equals(that.serverID))
        return false;
    }

    boolean this_present_sessionKey = true && this.isSetSessionKey();
    boolean that_present_sessionKey = true && that.isSetSessionKey();
    if (this_present_sessionKey || that_present_sessionKey) {
      if (!(this_present_sessionKey && that_present_sessionKey))
        return false;
      if (!this.sessionKey.equals(that.sessionKey))
        return false;
    }

    boolean this_present_replyFor = true && this.isSetReplyFor();
    boolean that_present_replyFor = true && that.isSetReplyFor();
    if (this_present_replyFor || that_present_replyFor) {
      if (!(this_present_replyFor && that_present_replyFor))
        return false;
      if (!this.replyFor.equals(that.replyFor))
        return false;
    }

    boolean this_present_atUsers = true && this.isSetAtUsers();
    boolean that_present_atUsers = true && that.isSetAtUsers();
    if (this_present_atUsers || that_present_atUsers) {
      if (!(this_present_atUsers && that_present_atUsers))
        return false;
      if (!this.atUsers.equals(that.atUsers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sendID = true && (isSetSendID());
    list.add(present_sendID);
    if (present_sendID)
      list.add(sendID);

    boolean present_senderNickName = true && (isSetSenderNickName());
    list.add(present_senderNickName);
    if (present_senderNickName)
      list.add(senderNickName);

    boolean present_senderFaceURL = true && (isSetSenderFaceURL());
    list.add(present_senderFaceURL);
    if (present_senderFaceURL)
      list.add(senderFaceURL);

    boolean present_platformID = true;
    list.add(present_platformID);
    if (present_platformID)
      list.add(platformID);

    boolean present_recvID = true && (isSetRecvID());
    list.add(present_recvID);
    if (present_recvID)
      list.add(recvID);

    boolean present_recvSeq = true;
    list.add(present_recvSeq);
    if (present_recvSeq)
      list.add(recvSeq);

    boolean present_sessionType = true && (isSetSessionType());
    list.add(present_sessionType);
    if (present_sessionType)
      list.add(sessionType.getValue());

    boolean present_msgFrom = true && (isSetMsgFrom());
    list.add(present_msgFrom);
    if (present_msgFrom)
      list.add(msgFrom.getValue());

    boolean present_contentType = true && (isSetContentType());
    list.add(present_contentType);
    if (present_contentType)
      list.add(contentType.getValue());

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_sendTime = true;
    list.add(present_sendTime);
    if (present_sendTime)
      list.add(sendTime);

    boolean present_clientMsgID = true && (isSetClientMsgID());
    list.add(present_clientMsgID);
    if (present_clientMsgID)
      list.add(clientMsgID);

    boolean present_serverMsgID = true && (isSetServerMsgID());
    list.add(present_serverMsgID);
    if (present_serverMsgID)
      list.add(serverMsgID);

    boolean present_options = true && (isSetOptions());
    list.add(present_options);
    if (present_options)
      list.add(options);

    boolean present_ex = true && (isSetEx());
    list.add(present_ex);
    if (present_ex)
      list.add(ex);

    boolean present_serverID = true && (isSetServerID());
    list.add(present_serverID);
    if (present_serverID)
      list.add(serverID);

    boolean present_sessionKey = true && (isSetSessionKey());
    list.add(present_sessionKey);
    if (present_sessionKey)
      list.add(sessionKey);

    boolean present_replyFor = true && (isSetReplyFor());
    list.add(present_replyFor);
    if (present_replyFor)
      list.add(replyFor);

    boolean present_atUsers = true && (isSetAtUsers());
    list.add(present_atUsers);
    if (present_atUsers)
      list.add(atUsers);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChatMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSendID()).compareTo(other.isSetSendID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendID, other.sendID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderNickName()).compareTo(other.isSetSenderNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderNickName, other.senderNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderFaceURL()).compareTo(other.isSetSenderFaceURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderFaceURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderFaceURL, other.senderFaceURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformID()).compareTo(other.isSetPlatformID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformID, other.platformID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvID()).compareTo(other.isSetRecvID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvID, other.recvID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecvSeq()).compareTo(other.isSetRecvSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recvSeq, other.recvSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionType()).compareTo(other.isSetSessionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionType, other.sessionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgFrom()).compareTo(other.isSetMsgFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgFrom, other.msgFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendTime()).compareTo(other.isSetSendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, other.sendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientMsgID()).compareTo(other.isSetClientMsgID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientMsgID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientMsgID, other.clientMsgID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerMsgID()).compareTo(other.isSetServerMsgID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerMsgID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverMsgID, other.serverMsgID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionKey()).compareTo(other.isSetSessionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionKey, other.sessionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyFor()).compareTo(other.isSetReplyFor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyFor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyFor, other.replyFor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAtUsers()).compareTo(other.isSetAtUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atUsers, other.atUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChatMsg(");
    boolean first = true;

    sb.append("sendID:");
    if (this.sendID == null) {
      sb.append("null");
    } else {
      sb.append(this.sendID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderNickName:");
    if (this.senderNickName == null) {
      sb.append("null");
    } else {
      sb.append(this.senderNickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderFaceURL:");
    if (this.senderFaceURL == null) {
      sb.append("null");
    } else {
      sb.append(this.senderFaceURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("platformID:");
    sb.append(this.platformID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recvID:");
    if (this.recvID == null) {
      sb.append("null");
    } else {
      sb.append(this.recvID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recvSeq:");
    sb.append(this.recvSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionType:");
    if (this.sessionType == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgFrom:");
    if (this.msgFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.msgFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    if (this.contentType == null) {
      sb.append("null");
    } else {
      sb.append(this.contentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendTime:");
    sb.append(this.sendTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientMsgID:");
    if (this.clientMsgID == null) {
      sb.append("null");
    } else {
      sb.append(this.clientMsgID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverMsgID:");
    if (this.serverMsgID == null) {
      sb.append("null");
    } else {
      sb.append(this.serverMsgID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ex:");
    if (this.ex == null) {
      sb.append("null");
    } else {
      sb.append(this.ex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverID:");
    if (this.serverID == null) {
      sb.append("null");
    } else {
      sb.append(this.serverID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionKey:");
    if (this.sessionKey == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyFor:");
    if (this.replyFor == null) {
      sb.append("null");
    } else {
      sb.append(this.replyFor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("atUsers:");
    if (this.atUsers == null) {
      sb.append("null");
    } else {
      sb.append(this.atUsers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (replyFor != null) {
      replyFor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatMsgStandardSchemeFactory implements SchemeFactory {
    public ChatMsgStandardScheme getScheme() {
      return new ChatMsgStandardScheme();
    }
  }

  private static class ChatMsgStandardScheme extends StandardScheme<ChatMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendID = iprot.readString();
              struct.setSendIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENDER_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderNickName = iprot.readString();
              struct.setSenderNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SENDER_FACE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderFaceURL = iprot.readString();
              struct.setSenderFaceURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLATFORM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformID = iprot.readI32();
              struct.setPlatformIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECV_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recvID = iprot.readString();
              struct.setRecvIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECV_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recvSeq = iprot.readI64();
              struct.setRecvSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionType = thrift_gen.oasis_im.rpc.SESSION_TYPE.findByValue(iprot.readI32());
              struct.setSessionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MSG_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgFrom = thrift_gen.oasis_im.rpc.MSG_FROM.findByValue(iprot.readI32());
              struct.setMsgFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentType = thrift_gen.oasis_im.rpc.CONTENT_TYPE.findByValue(iprot.readI32());
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sendTime = iprot.readI64();
              struct.setSendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLIENT_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientMsgID = iprot.readString();
              struct.setClientMsgIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SERVER_MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverMsgID = iprot.readString();
              struct.setServerMsgIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.options = iprot.readString();
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ex = iprot.readString();
              struct.setExIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverID = iprot.readString();
              struct.setServerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SESSION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionKey = iprot.readString();
              struct.setSessionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REPLY_FOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.replyFor = new ReplyFor();
              struct.replyFor.read(iprot);
              struct.setReplyForIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // AT_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                struct.atUsers = new ArrayList<AtUser>(_list164.size);
                AtUser _elem165;
                for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                {
                  _elem165 = new AtUser();
                  _elem165.read(iprot);
                  struct.atUsers.add(_elem165);
                }
                iprot.readListEnd();
              }
              struct.setAtUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sendID != null) {
        oprot.writeFieldBegin(SEND_ID_FIELD_DESC);
        oprot.writeString(struct.sendID);
        oprot.writeFieldEnd();
      }
      if (struct.senderNickName != null) {
        oprot.writeFieldBegin(SENDER_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.senderNickName);
        oprot.writeFieldEnd();
      }
      if (struct.senderFaceURL != null) {
        oprot.writeFieldBegin(SENDER_FACE_URL_FIELD_DESC);
        oprot.writeString(struct.senderFaceURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLATFORM_ID_FIELD_DESC);
      oprot.writeI32(struct.platformID);
      oprot.writeFieldEnd();
      if (struct.recvID != null) {
        oprot.writeFieldBegin(RECV_ID_FIELD_DESC);
        oprot.writeString(struct.recvID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECV_SEQ_FIELD_DESC);
      oprot.writeI64(struct.recvSeq);
      oprot.writeFieldEnd();
      if (struct.sessionType != null) {
        oprot.writeFieldBegin(SESSION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sessionType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.msgFrom != null) {
        oprot.writeFieldBegin(MSG_FROM_FIELD_DESC);
        oprot.writeI32(struct.msgFrom.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.contentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.contentType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
      oprot.writeI64(struct.sendTime);
      oprot.writeFieldEnd();
      if (struct.clientMsgID != null) {
        oprot.writeFieldBegin(CLIENT_MSG_ID_FIELD_DESC);
        oprot.writeString(struct.clientMsgID);
        oprot.writeFieldEnd();
      }
      if (struct.serverMsgID != null) {
        oprot.writeFieldBegin(SERVER_MSG_ID_FIELD_DESC);
        oprot.writeString(struct.serverMsgID);
        oprot.writeFieldEnd();
      }
      if (struct.options != null) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        oprot.writeString(struct.options);
        oprot.writeFieldEnd();
      }
      if (struct.ex != null) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        oprot.writeString(struct.ex);
        oprot.writeFieldEnd();
      }
      if (struct.serverID != null) {
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.serverID);
        oprot.writeFieldEnd();
      }
      if (struct.sessionKey != null) {
        oprot.writeFieldBegin(SESSION_KEY_FIELD_DESC);
        oprot.writeString(struct.sessionKey);
        oprot.writeFieldEnd();
      }
      if (struct.replyFor != null) {
        oprot.writeFieldBegin(REPLY_FOR_FIELD_DESC);
        struct.replyFor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.atUsers != null) {
        oprot.writeFieldBegin(AT_USERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.atUsers.size()));
          for (AtUser _iter167 : struct.atUsers)
          {
            _iter167.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatMsgTupleSchemeFactory implements SchemeFactory {
    public ChatMsgTupleScheme getScheme() {
      return new ChatMsgTupleScheme();
    }
  }

  private static class ChatMsgTupleScheme extends TupleScheme<ChatMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSendID()) {
        optionals.set(0);
      }
      if (struct.isSetSenderNickName()) {
        optionals.set(1);
      }
      if (struct.isSetSenderFaceURL()) {
        optionals.set(2);
      }
      if (struct.isSetPlatformID()) {
        optionals.set(3);
      }
      if (struct.isSetRecvID()) {
        optionals.set(4);
      }
      if (struct.isSetRecvSeq()) {
        optionals.set(5);
      }
      if (struct.isSetSessionType()) {
        optionals.set(6);
      }
      if (struct.isSetMsgFrom()) {
        optionals.set(7);
      }
      if (struct.isSetContentType()) {
        optionals.set(8);
      }
      if (struct.isSetContent()) {
        optionals.set(9);
      }
      if (struct.isSetSendTime()) {
        optionals.set(10);
      }
      if (struct.isSetClientMsgID()) {
        optionals.set(11);
      }
      if (struct.isSetServerMsgID()) {
        optionals.set(12);
      }
      if (struct.isSetOptions()) {
        optionals.set(13);
      }
      if (struct.isSetEx()) {
        optionals.set(14);
      }
      if (struct.isSetServerID()) {
        optionals.set(15);
      }
      if (struct.isSetSessionKey()) {
        optionals.set(16);
      }
      if (struct.isSetReplyFor()) {
        optionals.set(17);
      }
      if (struct.isSetAtUsers()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetSendID()) {
        oprot.writeString(struct.sendID);
      }
      if (struct.isSetSenderNickName()) {
        oprot.writeString(struct.senderNickName);
      }
      if (struct.isSetSenderFaceURL()) {
        oprot.writeString(struct.senderFaceURL);
      }
      if (struct.isSetPlatformID()) {
        oprot.writeI32(struct.platformID);
      }
      if (struct.isSetRecvID()) {
        oprot.writeString(struct.recvID);
      }
      if (struct.isSetRecvSeq()) {
        oprot.writeI64(struct.recvSeq);
      }
      if (struct.isSetSessionType()) {
        oprot.writeI32(struct.sessionType.getValue());
      }
      if (struct.isSetMsgFrom()) {
        oprot.writeI32(struct.msgFrom.getValue());
      }
      if (struct.isSetContentType()) {
        oprot.writeI32(struct.contentType.getValue());
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetSendTime()) {
        oprot.writeI64(struct.sendTime);
      }
      if (struct.isSetClientMsgID()) {
        oprot.writeString(struct.clientMsgID);
      }
      if (struct.isSetServerMsgID()) {
        oprot.writeString(struct.serverMsgID);
      }
      if (struct.isSetOptions()) {
        oprot.writeString(struct.options);
      }
      if (struct.isSetEx()) {
        oprot.writeString(struct.ex);
      }
      if (struct.isSetServerID()) {
        oprot.writeString(struct.serverID);
      }
      if (struct.isSetSessionKey()) {
        oprot.writeString(struct.sessionKey);
      }
      if (struct.isSetReplyFor()) {
        struct.replyFor.write(oprot);
      }
      if (struct.isSetAtUsers()) {
        {
          oprot.writeI32(struct.atUsers.size());
          for (AtUser _iter168 : struct.atUsers)
          {
            _iter168.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.sendID = iprot.readString();
        struct.setSendIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.senderNickName = iprot.readString();
        struct.setSenderNickNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.senderFaceURL = iprot.readString();
        struct.setSenderFaceURLIsSet(true);
      }
      if (incoming.get(3)) {
        struct.platformID = iprot.readI32();
        struct.setPlatformIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recvID = iprot.readString();
        struct.setRecvIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recvSeq = iprot.readI64();
        struct.setRecvSeqIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sessionType = thrift_gen.oasis_im.rpc.SESSION_TYPE.findByValue(iprot.readI32());
        struct.setSessionTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.msgFrom = thrift_gen.oasis_im.rpc.MSG_FROM.findByValue(iprot.readI32());
        struct.setMsgFromIsSet(true);
      }
      if (incoming.get(8)) {
        struct.contentType = thrift_gen.oasis_im.rpc.CONTENT_TYPE.findByValue(iprot.readI32());
        struct.setContentTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sendTime = iprot.readI64();
        struct.setSendTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.clientMsgID = iprot.readString();
        struct.setClientMsgIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.serverMsgID = iprot.readString();
        struct.setServerMsgIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.options = iprot.readString();
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ex = iprot.readString();
        struct.setExIsSet(true);
      }
      if (incoming.get(15)) {
        struct.serverID = iprot.readString();
        struct.setServerIDIsSet(true);
      }
      if (incoming.get(16)) {
        struct.sessionKey = iprot.readString();
        struct.setSessionKeyIsSet(true);
      }
      if (incoming.get(17)) {
        struct.replyFor = new ReplyFor();
        struct.replyFor.read(iprot);
        struct.setReplyForIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list169 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.atUsers = new ArrayList<AtUser>(_list169.size);
          AtUser _elem170;
          for (int _i171 = 0; _i171 < _list169.size; ++_i171)
          {
            _elem170 = new AtUser();
            _elem170.read(iprot);
            struct.atUsers.add(_elem170);
          }
        }
        struct.setAtUsersIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class ImmigrateGroup implements org.apache.thrift.TBase<ImmigrateGroup, ImmigrateGroup._Fields>, java.io.Serializable, Cloneable, Comparable<ImmigrateGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImmigrateGroup");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FACE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("faceUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OWNER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerUid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ALLIANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("allianceId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MEMBER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("memberList", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImmigrateGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImmigrateGroupTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public String faceUrl; // required
  public String ex; // required
  public String serverID; // required
  public String groupType; // required
  public String ownerUid; // required
  public long createTime; // required
  public String allianceId; // required
  public List<ImmigrateGroupMember> memberList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    FACE_URL((short)3, "faceUrl"),
    EX((short)4, "ex"),
    SERVER_ID((short)5, "serverID"),
    GROUP_TYPE((short)6, "groupType"),
    OWNER_UID((short)7, "ownerUid"),
    CREATE_TIME((short)8, "createTime"),
    ALLIANCE_ID((short)9, "allianceId"),
    MEMBER_LIST((short)20, "memberList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // FACE_URL
          return FACE_URL;
        case 4: // EX
          return EX;
        case 5: // SERVER_ID
          return SERVER_ID;
        case 6: // GROUP_TYPE
          return GROUP_TYPE;
        case 7: // OWNER_UID
          return OWNER_UID;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // ALLIANCE_ID
          return ALLIANCE_ID;
        case 20: // MEMBER_LIST
          return MEMBER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACE_URL, new org.apache.thrift.meta_data.FieldMetaData("faceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_UID, new org.apache.thrift.meta_data.FieldMetaData("ownerUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALLIANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("allianceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_LIST, new org.apache.thrift.meta_data.FieldMetaData("memberList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ImmigrateGroupMember"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImmigrateGroup.class, metaDataMap);
  }

  public ImmigrateGroup() {
  }

  public ImmigrateGroup(
    String id,
    String name,
    String faceUrl,
    String ex,
    String serverID,
    String groupType,
    String ownerUid,
    long createTime,
    String allianceId,
    List<ImmigrateGroupMember> memberList)
  {
    this();
    this.id = id;
    this.name = name;
    this.faceUrl = faceUrl;
    this.ex = ex;
    this.serverID = serverID;
    this.groupType = groupType;
    this.ownerUid = ownerUid;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.allianceId = allianceId;
    this.memberList = memberList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImmigrateGroup(ImmigrateGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFaceUrl()) {
      this.faceUrl = other.faceUrl;
    }
    if (other.isSetEx()) {
      this.ex = other.ex;
    }
    if (other.isSetServerID()) {
      this.serverID = other.serverID;
    }
    if (other.isSetGroupType()) {
      this.groupType = other.groupType;
    }
    if (other.isSetOwnerUid()) {
      this.ownerUid = other.ownerUid;
    }
    this.createTime = other.createTime;
    if (other.isSetAllianceId()) {
      this.allianceId = other.allianceId;
    }
    if (other.isSetMemberList()) {
      List<ImmigrateGroupMember> __this__memberList = new ArrayList<ImmigrateGroupMember>(other.memberList.size());
      for (ImmigrateGroupMember other_element : other.memberList) {
        __this__memberList.add(other_element);
      }
      this.memberList = __this__memberList;
    }
  }

  public ImmigrateGroup deepCopy() {
    return new ImmigrateGroup(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.faceUrl = null;
    this.ex = null;
    this.serverID = null;
    this.groupType = null;
    this.ownerUid = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.allianceId = null;
    this.memberList = null;
  }

  public String getId() {
    return this.id;
  }

  public ImmigrateGroup setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public ImmigrateGroup setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getFaceUrl() {
    return this.faceUrl;
  }

  public ImmigrateGroup setFaceUrl(String faceUrl) {
    this.faceUrl = faceUrl;
    return this;
  }

  public void unsetFaceUrl() {
    this.faceUrl = null;
  }

  /** Returns true if field faceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceUrl() {
    return this.faceUrl != null;
  }

  public void setFaceUrlIsSet(boolean value) {
    if (!value) {
      this.faceUrl = null;
    }
  }

  public String getEx() {
    return this.ex;
  }

  public ImmigrateGroup setEx(String ex) {
    this.ex = ex;
    return this;
  }

  public void unsetEx() {
    this.ex = null;
  }

  /** Returns true if field ex is set (has been assigned a value) and false otherwise */
  public boolean isSetEx() {
    return this.ex != null;
  }

  public void setExIsSet(boolean value) {
    if (!value) {
      this.ex = null;
    }
  }

  public String getServerID() {
    return this.serverID;
  }

  public ImmigrateGroup setServerID(String serverID) {
    this.serverID = serverID;
    return this;
  }

  public void unsetServerID() {
    this.serverID = null;
  }

  /** Returns true if field serverID is set (has been assigned a value) and false otherwise */
  public boolean isSetServerID() {
    return this.serverID != null;
  }

  public void setServerIDIsSet(boolean value) {
    if (!value) {
      this.serverID = null;
    }
  }

  public String getGroupType() {
    return this.groupType;
  }

  public ImmigrateGroup setGroupType(String groupType) {
    this.groupType = groupType;
    return this;
  }

  public void unsetGroupType() {
    this.groupType = null;
  }

  /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupType() {
    return this.groupType != null;
  }

  public void setGroupTypeIsSet(boolean value) {
    if (!value) {
      this.groupType = null;
    }
  }

  public String getOwnerUid() {
    return this.ownerUid;
  }

  public ImmigrateGroup setOwnerUid(String ownerUid) {
    this.ownerUid = ownerUid;
    return this;
  }

  public void unsetOwnerUid() {
    this.ownerUid = null;
  }

  /** Returns true if field ownerUid is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerUid() {
    return this.ownerUid != null;
  }

  public void setOwnerUidIsSet(boolean value) {
    if (!value) {
      this.ownerUid = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public ImmigrateGroup setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getAllianceId() {
    return this.allianceId;
  }

  public ImmigrateGroup setAllianceId(String allianceId) {
    this.allianceId = allianceId;
    return this;
  }

  public void unsetAllianceId() {
    this.allianceId = null;
  }

  /** Returns true if field allianceId is set (has been assigned a value) and false otherwise */
  public boolean isSetAllianceId() {
    return this.allianceId != null;
  }

  public void setAllianceIdIsSet(boolean value) {
    if (!value) {
      this.allianceId = null;
    }
  }

  public int getMemberListSize() {
    return (this.memberList == null) ? 0 : this.memberList.size();
  }

  public java.util.Iterator<ImmigrateGroupMember> getMemberListIterator() {
    return (this.memberList == null) ? null : this.memberList.iterator();
  }

  public void addToMemberList(ImmigrateGroupMember elem) {
    if (this.memberList == null) {
      this.memberList = new ArrayList<ImmigrateGroupMember>();
    }
    this.memberList.add(elem);
  }

  public List<ImmigrateGroupMember> getMemberList() {
    return this.memberList;
  }

  public ImmigrateGroup setMemberList(List<ImmigrateGroupMember> memberList) {
    this.memberList = memberList;
    return this;
  }

  public void unsetMemberList() {
    this.memberList = null;
  }

  /** Returns true if field memberList is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberList() {
    return this.memberList != null;
  }

  public void setMemberListIsSet(boolean value) {
    if (!value) {
      this.memberList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FACE_URL:
      if (value == null) {
        unsetFaceUrl();
      } else {
        setFaceUrl((String)value);
      }
      break;

    case EX:
      if (value == null) {
        unsetEx();
      } else {
        setEx((String)value);
      }
      break;

    case SERVER_ID:
      if (value == null) {
        unsetServerID();
      } else {
        setServerID((String)value);
      }
      break;

    case GROUP_TYPE:
      if (value == null) {
        unsetGroupType();
      } else {
        setGroupType((String)value);
      }
      break;

    case OWNER_UID:
      if (value == null) {
        unsetOwnerUid();
      } else {
        setOwnerUid((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ALLIANCE_ID:
      if (value == null) {
        unsetAllianceId();
      } else {
        setAllianceId((String)value);
      }
      break;

    case MEMBER_LIST:
      if (value == null) {
        unsetMemberList();
      } else {
        setMemberList((List<ImmigrateGroupMember>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case FACE_URL:
      return getFaceUrl();

    case EX:
      return getEx();

    case SERVER_ID:
      return getServerID();

    case GROUP_TYPE:
      return getGroupType();

    case OWNER_UID:
      return getOwnerUid();

    case CREATE_TIME:
      return getCreateTime();

    case ALLIANCE_ID:
      return getAllianceId();

    case MEMBER_LIST:
      return getMemberList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case FACE_URL:
      return isSetFaceUrl();
    case EX:
      return isSetEx();
    case SERVER_ID:
      return isSetServerID();
    case GROUP_TYPE:
      return isSetGroupType();
    case OWNER_UID:
      return isSetOwnerUid();
    case CREATE_TIME:
      return isSetCreateTime();
    case ALLIANCE_ID:
      return isSetAllianceId();
    case MEMBER_LIST:
      return isSetMemberList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImmigrateGroup)
      return this.equals((ImmigrateGroup)that);
    return false;
  }

  public boolean equals(ImmigrateGroup that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_faceUrl = true && this.isSetFaceUrl();
    boolean that_present_faceUrl = true && that.isSetFaceUrl();
    if (this_present_faceUrl || that_present_faceUrl) {
      if (!(this_present_faceUrl && that_present_faceUrl))
        return false;
      if (!this.faceUrl.equals(that.faceUrl))
        return false;
    }

    boolean this_present_ex = true && this.isSetEx();
    boolean that_present_ex = true && that.isSetEx();
    if (this_present_ex || that_present_ex) {
      if (!(this_present_ex && that_present_ex))
        return false;
      if (!this.ex.equals(that.ex))
        return false;
    }

    boolean this_present_serverID = true && this.isSetServerID();
    boolean that_present_serverID = true && that.isSetServerID();
    if (this_present_serverID || that_present_serverID) {
      if (!(this_present_serverID && that_present_serverID))
        return false;
      if (!this.serverID.equals(that.serverID))
        return false;
    }

    boolean this_present_groupType = true && this.isSetGroupType();
    boolean that_present_groupType = true && that.isSetGroupType();
    if (this_present_groupType || that_present_groupType) {
      if (!(this_present_groupType && that_present_groupType))
        return false;
      if (!this.groupType.equals(that.groupType))
        return false;
    }

    boolean this_present_ownerUid = true && this.isSetOwnerUid();
    boolean that_present_ownerUid = true && that.isSetOwnerUid();
    if (this_present_ownerUid || that_present_ownerUid) {
      if (!(this_present_ownerUid && that_present_ownerUid))
        return false;
      if (!this.ownerUid.equals(that.ownerUid))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_allianceId = true && this.isSetAllianceId();
    boolean that_present_allianceId = true && that.isSetAllianceId();
    if (this_present_allianceId || that_present_allianceId) {
      if (!(this_present_allianceId && that_present_allianceId))
        return false;
      if (!this.allianceId.equals(that.allianceId))
        return false;
    }

    boolean this_present_memberList = true && this.isSetMemberList();
    boolean that_present_memberList = true && that.isSetMemberList();
    if (this_present_memberList || that_present_memberList) {
      if (!(this_present_memberList && that_present_memberList))
        return false;
      if (!this.memberList.equals(that.memberList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_faceUrl = true && (isSetFaceUrl());
    list.add(present_faceUrl);
    if (present_faceUrl)
      list.add(faceUrl);

    boolean present_ex = true && (isSetEx());
    list.add(present_ex);
    if (present_ex)
      list.add(ex);

    boolean present_serverID = true && (isSetServerID());
    list.add(present_serverID);
    if (present_serverID)
      list.add(serverID);

    boolean present_groupType = true && (isSetGroupType());
    list.add(present_groupType);
    if (present_groupType)
      list.add(groupType);

    boolean present_ownerUid = true && (isSetOwnerUid());
    list.add(present_ownerUid);
    if (present_ownerUid)
      list.add(ownerUid);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_allianceId = true && (isSetAllianceId());
    list.add(present_allianceId);
    if (present_allianceId)
      list.add(allianceId);

    boolean present_memberList = true && (isSetMemberList());
    list.add(present_memberList);
    if (present_memberList)
      list.add(memberList);

    return list.hashCode();
  }

  @Override
  public int compareTo(ImmigrateGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceUrl()).compareTo(other.isSetFaceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceUrl, other.faceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerID()).compareTo(other.isSetServerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverID, other.serverID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(other.isSetGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, other.groupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerUid()).compareTo(other.isSetOwnerUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerUid, other.ownerUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllianceId()).compareTo(other.isSetAllianceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllianceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allianceId, other.allianceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberList()).compareTo(other.isSetMemberList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberList, other.memberList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImmigrateGroup(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceUrl:");
    if (this.faceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.faceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ex:");
    if (this.ex == null) {
      sb.append("null");
    } else {
      sb.append(this.ex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverID:");
    if (this.serverID == null) {
      sb.append("null");
    } else {
      sb.append(this.serverID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupType:");
    if (this.groupType == null) {
      sb.append("null");
    } else {
      sb.append(this.groupType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerUid:");
    if (this.ownerUid == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allianceId:");
    if (this.allianceId == null) {
      sb.append("null");
    } else {
      sb.append(this.allianceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberList:");
    if (this.memberList == null) {
      sb.append("null");
    } else {
      sb.append(this.memberList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImmigrateGroupStandardSchemeFactory implements SchemeFactory {
    public ImmigrateGroupStandardScheme getScheme() {
      return new ImmigrateGroupStandardScheme();
    }
  }

  private static class ImmigrateGroupStandardScheme extends StandardScheme<ImmigrateGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImmigrateGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FACE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faceUrl = iprot.readString();
              struct.setFaceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ex = iprot.readString();
              struct.setExIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverID = iprot.readString();
              struct.setServerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupType = iprot.readString();
              struct.setGroupTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OWNER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerUid = iprot.readString();
              struct.setOwnerUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALLIANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allianceId = iprot.readString();
              struct.setAllianceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MEMBER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
                struct.memberList = new ArrayList<ImmigrateGroupMember>(_list220.size);
                ImmigrateGroupMember _elem221;
                for (int _i222 = 0; _i222 < _list220.size; ++_i222)
                {
                  _elem221 = new ImmigrateGroupMember();
                  _elem221.read(iprot);
                  struct.memberList.add(_elem221);
                }
                iprot.readListEnd();
              }
              struct.setMemberListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImmigrateGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.faceUrl != null) {
        oprot.writeFieldBegin(FACE_URL_FIELD_DESC);
        oprot.writeString(struct.faceUrl);
        oprot.writeFieldEnd();
      }
      if (struct.ex != null) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        oprot.writeString(struct.ex);
        oprot.writeFieldEnd();
      }
      if (struct.serverID != null) {
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeString(struct.serverID);
        oprot.writeFieldEnd();
      }
      if (struct.groupType != null) {
        oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
        oprot.writeString(struct.groupType);
        oprot.writeFieldEnd();
      }
      if (struct.ownerUid != null) {
        oprot.writeFieldBegin(OWNER_UID_FIELD_DESC);
        oprot.writeString(struct.ownerUid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.allianceId != null) {
        oprot.writeFieldBegin(ALLIANCE_ID_FIELD_DESC);
        oprot.writeString(struct.allianceId);
        oprot.writeFieldEnd();
      }
      if (struct.memberList != null) {
        oprot.writeFieldBegin(MEMBER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.memberList.size()));
          for (ImmigrateGroupMember _iter223 : struct.memberList)
          {
            _iter223.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImmigrateGroupTupleSchemeFactory implements SchemeFactory {
    public ImmigrateGroupTupleScheme getScheme() {
      return new ImmigrateGroupTupleScheme();
    }
  }

  private static class ImmigrateGroupTupleScheme extends TupleScheme<ImmigrateGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImmigrateGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetFaceUrl()) {
        optionals.set(2);
      }
      if (struct.isSetEx()) {
        optionals.set(3);
      }
      if (struct.isSetServerID()) {
        optionals.set(4);
      }
      if (struct.isSetGroupType()) {
        optionals.set(5);
      }
      if (struct.isSetOwnerUid()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetAllianceId()) {
        optionals.set(8);
      }
      if (struct.isSetMemberList()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFaceUrl()) {
        oprot.writeString(struct.faceUrl);
      }
      if (struct.isSetEx()) {
        oprot.writeString(struct.ex);
      }
      if (struct.isSetServerID()) {
        oprot.writeString(struct.serverID);
      }
      if (struct.isSetGroupType()) {
        oprot.writeString(struct.groupType);
      }
      if (struct.isSetOwnerUid()) {
        oprot.writeString(struct.ownerUid);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetAllianceId()) {
        oprot.writeString(struct.allianceId);
      }
      if (struct.isSetMemberList()) {
        {
          oprot.writeI32(struct.memberList.size());
          for (ImmigrateGroupMember _iter224 : struct.memberList)
          {
            _iter224.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImmigrateGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.faceUrl = iprot.readString();
        struct.setFaceUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ex = iprot.readString();
        struct.setExIsSet(true);
      }
      if (incoming.get(4)) {
        struct.serverID = iprot.readString();
        struct.setServerIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.groupType = iprot.readString();
        struct.setGroupTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ownerUid = iprot.readString();
        struct.setOwnerUidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.allianceId = iprot.readString();
        struct.setAllianceIdIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list225 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.memberList = new ArrayList<ImmigrateGroupMember>(_list225.size);
          ImmigrateGroupMember _elem226;
          for (int _i227 = 0; _i227 < _list225.size; ++_i227)
          {
            _elem226 = new ImmigrateGroupMember();
            _elem226.read(iprot);
            struct.memberList.add(_elem226);
          }
        }
        struct.setMemberListIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class GroupMemberFullInfo implements org.apache.thrift.TBase<GroupMemberFullInfo, GroupMemberFullInfo._Fields>, java.io.Serializable, Cloneable, Comparable<GroupMemberFullInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupMemberFullInfo");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField JOIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("joinTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FACE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("faceUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupID", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupMemberFullInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupMemberFullInfoTupleSchemeFactory());
  }

  public String uid; // required
  public int role; // required
  public long joinTime; // required
  public String nickName; // required
  public String faceUrl; // required
  public String groupID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    ROLE((short)2, "role"),
    JOIN_TIME((short)3, "joinTime"),
    NICK_NAME((short)4, "nickName"),
    FACE_URL((short)5, "faceUrl"),
    GROUP_ID((short)6, "groupID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // ROLE
          return ROLE;
        case 3: // JOIN_TIME
          return JOIN_TIME;
        case 4: // NICK_NAME
          return NICK_NAME;
        case 5: // FACE_URL
          return FACE_URL;
        case 6: // GROUP_ID
          return GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROLE_ISSET_ID = 0;
  private static final int __JOINTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("joinTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACE_URL, new org.apache.thrift.meta_data.FieldMetaData("faceUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupMemberFullInfo.class, metaDataMap);
  }

  public GroupMemberFullInfo() {
  }

  public GroupMemberFullInfo(
    String uid,
    int role,
    long joinTime,
    String nickName,
    String faceUrl,
    String groupID)
  {
    this();
    this.uid = uid;
    this.role = role;
    setRoleIsSet(true);
    this.joinTime = joinTime;
    setJoinTimeIsSet(true);
    this.nickName = nickName;
    this.faceUrl = faceUrl;
    this.groupID = groupID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupMemberFullInfo(GroupMemberFullInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    this.role = other.role;
    this.joinTime = other.joinTime;
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetFaceUrl()) {
      this.faceUrl = other.faceUrl;
    }
    if (other.isSetGroupID()) {
      this.groupID = other.groupID;
    }
  }

  public GroupMemberFullInfo deepCopy() {
    return new GroupMemberFullInfo(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    setRoleIsSet(false);
    this.role = 0;
    setJoinTimeIsSet(false);
    this.joinTime = 0;
    this.nickName = null;
    this.faceUrl = null;
    this.groupID = null;
  }

  public String getUid() {
    return this.uid;
  }

  public GroupMemberFullInfo setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public int getRole() {
    return this.role;
  }

  public GroupMemberFullInfo setRole(int role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ISSET_ID, value);
  }

  public long getJoinTime() {
    return this.joinTime;
  }

  public GroupMemberFullInfo setJoinTime(long joinTime) {
    this.joinTime = joinTime;
    setJoinTimeIsSet(true);
    return this;
  }

  public void unsetJoinTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOINTIME_ISSET_ID);
  }

  /** Returns true if field joinTime is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinTime() {
    return EncodingUtils.testBit(__isset_bitfield, __JOINTIME_ISSET_ID);
  }

  public void setJoinTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOINTIME_ISSET_ID, value);
  }

  public String getNickName() {
    return this.nickName;
  }

  public GroupMemberFullInfo setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String getFaceUrl() {
    return this.faceUrl;
  }

  public GroupMemberFullInfo setFaceUrl(String faceUrl) {
    this.faceUrl = faceUrl;
    return this;
  }

  public void unsetFaceUrl() {
    this.faceUrl = null;
  }

  /** Returns true if field faceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceUrl() {
    return this.faceUrl != null;
  }

  public void setFaceUrlIsSet(boolean value) {
    if (!value) {
      this.faceUrl = null;
    }
  }

  public String getGroupID() {
    return this.groupID;
  }

  public GroupMemberFullInfo setGroupID(String groupID) {
    this.groupID = groupID;
    return this;
  }

  public void unsetGroupID() {
    this.groupID = null;
  }

  /** Returns true if field groupID is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupID() {
    return this.groupID != null;
  }

  public void setGroupIDIsSet(boolean value) {
    if (!value) {
      this.groupID = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Integer)value);
      }
      break;

    case JOIN_TIME:
      if (value == null) {
        unsetJoinTime();
      } else {
        setJoinTime((Long)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case FACE_URL:
      if (value == null) {
        unsetFaceUrl();
      } else {
        setFaceUrl((String)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupID();
      } else {
        setGroupID((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case ROLE:
      return getRole();

    case JOIN_TIME:
      return getJoinTime();

    case NICK_NAME:
      return getNickName();

    case FACE_URL:
      return getFaceUrl();

    case GROUP_ID:
      return getGroupID();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case ROLE:
      return isSetRole();
    case JOIN_TIME:
      return isSetJoinTime();
    case NICK_NAME:
      return isSetNickName();
    case FACE_URL:
      return isSetFaceUrl();
    case GROUP_ID:
      return isSetGroupID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupMemberFullInfo)
      return this.equals((GroupMemberFullInfo)that);
    return false;
  }

  public boolean equals(GroupMemberFullInfo that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_role = true;
    boolean that_present_role = true;
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (this.role != that.role)
        return false;
    }

    boolean this_present_joinTime = true;
    boolean that_present_joinTime = true;
    if (this_present_joinTime || that_present_joinTime) {
      if (!(this_present_joinTime && that_present_joinTime))
        return false;
      if (this.joinTime != that.joinTime)
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_faceUrl = true && this.isSetFaceUrl();
    boolean that_present_faceUrl = true && that.isSetFaceUrl();
    if (this_present_faceUrl || that_present_faceUrl) {
      if (!(this_present_faceUrl && that_present_faceUrl))
        return false;
      if (!this.faceUrl.equals(that.faceUrl))
        return false;
    }

    boolean this_present_groupID = true && this.isSetGroupID();
    boolean that_present_groupID = true && that.isSetGroupID();
    if (this_present_groupID || that_present_groupID) {
      if (!(this_present_groupID && that_present_groupID))
        return false;
      if (!this.groupID.equals(that.groupID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true && (isSetUid());
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_role = true;
    list.add(present_role);
    if (present_role)
      list.add(role);

    boolean present_joinTime = true;
    list.add(present_joinTime);
    if (present_joinTime)
      list.add(joinTime);

    boolean present_nickName = true && (isSetNickName());
    list.add(present_nickName);
    if (present_nickName)
      list.add(nickName);

    boolean present_faceUrl = true && (isSetFaceUrl());
    list.add(present_faceUrl);
    if (present_faceUrl)
      list.add(faceUrl);

    boolean present_groupID = true && (isSetGroupID());
    list.add(present_groupID);
    if (present_groupID)
      list.add(groupID);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupMemberFullInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoinTime()).compareTo(other.isSetJoinTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinTime, other.joinTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceUrl()).compareTo(other.isSetFaceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceUrl, other.faceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupID()).compareTo(other.isSetGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupID, other.groupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupMemberFullInfo(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    sb.append(this.role);
    first = false;
    if (!first) sb.append(", ");
    sb.append("joinTime:");
    sb.append(this.joinTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceUrl:");
    if (this.faceUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.faceUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupID:");
    if (this.groupID == null) {
      sb.append("null");
    } else {
      sb.append(this.groupID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupMemberFullInfoStandardSchemeFactory implements SchemeFactory {
    public GroupMemberFullInfoStandardScheme getScheme() {
      return new GroupMemberFullInfoStandardScheme();
    }
  }

  private static class GroupMemberFullInfoStandardScheme extends StandardScheme<GroupMemberFullInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupMemberFullInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role = iprot.readI32();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.joinTime = iprot.readI64();
              struct.setJoinTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FACE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.faceUrl = iprot.readString();
              struct.setFaceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupID = iprot.readString();
              struct.setGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupMemberFullInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(struct.role);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOIN_TIME_FIELD_DESC);
      oprot.writeI64(struct.joinTime);
      oprot.writeFieldEnd();
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.faceUrl != null) {
        oprot.writeFieldBegin(FACE_URL_FIELD_DESC);
        oprot.writeString(struct.faceUrl);
        oprot.writeFieldEnd();
      }
      if (struct.groupID != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.groupID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupMemberFullInfoTupleSchemeFactory implements SchemeFactory {
    public GroupMemberFullInfoTupleScheme getScheme() {
      return new GroupMemberFullInfoTupleScheme();
    }
  }

  private static class GroupMemberFullInfoTupleScheme extends TupleScheme<GroupMemberFullInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupMemberFullInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetRole()) {
        optionals.set(1);
      }
      if (struct.isSetJoinTime()) {
        optionals.set(2);
      }
      if (struct.isSetNickName()) {
        optionals.set(3);
      }
      if (struct.isSetFaceUrl()) {
        optionals.set(4);
      }
      if (struct.isSetGroupID()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetRole()) {
        oprot.writeI32(struct.role);
      }
      if (struct.isSetJoinTime()) {
        oprot.writeI64(struct.joinTime);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetFaceUrl()) {
        oprot.writeString(struct.faceUrl);
      }
      if (struct.isSetGroupID()) {
        oprot.writeString(struct.groupID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupMemberFullInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.role = iprot.readI32();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.joinTime = iprot.readI64();
        struct.setJoinTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.faceUrl = iprot.readString();
        struct.setFaceUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.groupID = iprot.readString();
        struct.setGroupIDIsSet(true);
      }
    }
  }

}


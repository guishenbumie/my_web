/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class GetNewestSeqBatch implements org.apache.thrift.TBase<GetNewestSeqBatch, GetNewestSeqBatch._Fields>, java.io.Serializable, Cloneable, Comparable<GetNewestSeqBatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetNewestSeqBatch");

  private static final org.apache.thrift.protocol.TField SINGLE_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("singleKeys", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("groupKeys", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField GLOBAL_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("globalKeys", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CROSS_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("crossKeys", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetNewestSeqBatchStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetNewestSeqBatchTupleSchemeFactory());
  }

  public List<String> singleKeys; // required
  public List<String> groupKeys; // required
  public List<String> globalKeys; // required
  public List<String> crossKeys; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SINGLE_KEYS((short)1, "singleKeys"),
    GROUP_KEYS((short)2, "groupKeys"),
    GLOBAL_KEYS((short)3, "globalKeys"),
    CROSS_KEYS((short)4, "crossKeys");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SINGLE_KEYS
          return SINGLE_KEYS;
        case 2: // GROUP_KEYS
          return GROUP_KEYS;
        case 3: // GLOBAL_KEYS
          return GLOBAL_KEYS;
        case 4: // CROSS_KEYS
          return CROSS_KEYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SINGLE_KEYS, new org.apache.thrift.meta_data.FieldMetaData("singleKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GROUP_KEYS, new org.apache.thrift.meta_data.FieldMetaData("groupKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GLOBAL_KEYS, new org.apache.thrift.meta_data.FieldMetaData("globalKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CROSS_KEYS, new org.apache.thrift.meta_data.FieldMetaData("crossKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNewestSeqBatch.class, metaDataMap);
  }

  public GetNewestSeqBatch() {
  }

  public GetNewestSeqBatch(
    List<String> singleKeys,
    List<String> groupKeys,
    List<String> globalKeys,
    List<String> crossKeys)
  {
    this();
    this.singleKeys = singleKeys;
    this.groupKeys = groupKeys;
    this.globalKeys = globalKeys;
    this.crossKeys = crossKeys;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetNewestSeqBatch(GetNewestSeqBatch other) {
    if (other.isSetSingleKeys()) {
      List<String> __this__singleKeys = new ArrayList<String>(other.singleKeys);
      this.singleKeys = __this__singleKeys;
    }
    if (other.isSetGroupKeys()) {
      List<String> __this__groupKeys = new ArrayList<String>(other.groupKeys);
      this.groupKeys = __this__groupKeys;
    }
    if (other.isSetGlobalKeys()) {
      List<String> __this__globalKeys = new ArrayList<String>(other.globalKeys);
      this.globalKeys = __this__globalKeys;
    }
    if (other.isSetCrossKeys()) {
      List<String> __this__crossKeys = new ArrayList<String>(other.crossKeys);
      this.crossKeys = __this__crossKeys;
    }
  }

  public GetNewestSeqBatch deepCopy() {
    return new GetNewestSeqBatch(this);
  }

  @Override
  public void clear() {
    this.singleKeys = null;
    this.groupKeys = null;
    this.globalKeys = null;
    this.crossKeys = null;
  }

  public int getSingleKeysSize() {
    return (this.singleKeys == null) ? 0 : this.singleKeys.size();
  }

  public java.util.Iterator<String> getSingleKeysIterator() {
    return (this.singleKeys == null) ? null : this.singleKeys.iterator();
  }

  public void addToSingleKeys(String elem) {
    if (this.singleKeys == null) {
      this.singleKeys = new ArrayList<String>();
    }
    this.singleKeys.add(elem);
  }

  public List<String> getSingleKeys() {
    return this.singleKeys;
  }

  public GetNewestSeqBatch setSingleKeys(List<String> singleKeys) {
    this.singleKeys = singleKeys;
    return this;
  }

  public void unsetSingleKeys() {
    this.singleKeys = null;
  }

  /** Returns true if field singleKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleKeys() {
    return this.singleKeys != null;
  }

  public void setSingleKeysIsSet(boolean value) {
    if (!value) {
      this.singleKeys = null;
    }
  }

  public int getGroupKeysSize() {
    return (this.groupKeys == null) ? 0 : this.groupKeys.size();
  }

  public java.util.Iterator<String> getGroupKeysIterator() {
    return (this.groupKeys == null) ? null : this.groupKeys.iterator();
  }

  public void addToGroupKeys(String elem) {
    if (this.groupKeys == null) {
      this.groupKeys = new ArrayList<String>();
    }
    this.groupKeys.add(elem);
  }

  public List<String> getGroupKeys() {
    return this.groupKeys;
  }

  public GetNewestSeqBatch setGroupKeys(List<String> groupKeys) {
    this.groupKeys = groupKeys;
    return this;
  }

  public void unsetGroupKeys() {
    this.groupKeys = null;
  }

  /** Returns true if field groupKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupKeys() {
    return this.groupKeys != null;
  }

  public void setGroupKeysIsSet(boolean value) {
    if (!value) {
      this.groupKeys = null;
    }
  }

  public int getGlobalKeysSize() {
    return (this.globalKeys == null) ? 0 : this.globalKeys.size();
  }

  public java.util.Iterator<String> getGlobalKeysIterator() {
    return (this.globalKeys == null) ? null : this.globalKeys.iterator();
  }

  public void addToGlobalKeys(String elem) {
    if (this.globalKeys == null) {
      this.globalKeys = new ArrayList<String>();
    }
    this.globalKeys.add(elem);
  }

  public List<String> getGlobalKeys() {
    return this.globalKeys;
  }

  public GetNewestSeqBatch setGlobalKeys(List<String> globalKeys) {
    this.globalKeys = globalKeys;
    return this;
  }

  public void unsetGlobalKeys() {
    this.globalKeys = null;
  }

  /** Returns true if field globalKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalKeys() {
    return this.globalKeys != null;
  }

  public void setGlobalKeysIsSet(boolean value) {
    if (!value) {
      this.globalKeys = null;
    }
  }

  public int getCrossKeysSize() {
    return (this.crossKeys == null) ? 0 : this.crossKeys.size();
  }

  public java.util.Iterator<String> getCrossKeysIterator() {
    return (this.crossKeys == null) ? null : this.crossKeys.iterator();
  }

  public void addToCrossKeys(String elem) {
    if (this.crossKeys == null) {
      this.crossKeys = new ArrayList<String>();
    }
    this.crossKeys.add(elem);
  }

  public List<String> getCrossKeys() {
    return this.crossKeys;
  }

  public GetNewestSeqBatch setCrossKeys(List<String> crossKeys) {
    this.crossKeys = crossKeys;
    return this;
  }

  public void unsetCrossKeys() {
    this.crossKeys = null;
  }

  /** Returns true if field crossKeys is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossKeys() {
    return this.crossKeys != null;
  }

  public void setCrossKeysIsSet(boolean value) {
    if (!value) {
      this.crossKeys = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SINGLE_KEYS:
      if (value == null) {
        unsetSingleKeys();
      } else {
        setSingleKeys((List<String>)value);
      }
      break;

    case GROUP_KEYS:
      if (value == null) {
        unsetGroupKeys();
      } else {
        setGroupKeys((List<String>)value);
      }
      break;

    case GLOBAL_KEYS:
      if (value == null) {
        unsetGlobalKeys();
      } else {
        setGlobalKeys((List<String>)value);
      }
      break;

    case CROSS_KEYS:
      if (value == null) {
        unsetCrossKeys();
      } else {
        setCrossKeys((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SINGLE_KEYS:
      return getSingleKeys();

    case GROUP_KEYS:
      return getGroupKeys();

    case GLOBAL_KEYS:
      return getGlobalKeys();

    case CROSS_KEYS:
      return getCrossKeys();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SINGLE_KEYS:
      return isSetSingleKeys();
    case GROUP_KEYS:
      return isSetGroupKeys();
    case GLOBAL_KEYS:
      return isSetGlobalKeys();
    case CROSS_KEYS:
      return isSetCrossKeys();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetNewestSeqBatch)
      return this.equals((GetNewestSeqBatch)that);
    return false;
  }

  public boolean equals(GetNewestSeqBatch that) {
    if (that == null)
      return false;

    boolean this_present_singleKeys = true && this.isSetSingleKeys();
    boolean that_present_singleKeys = true && that.isSetSingleKeys();
    if (this_present_singleKeys || that_present_singleKeys) {
      if (!(this_present_singleKeys && that_present_singleKeys))
        return false;
      if (!this.singleKeys.equals(that.singleKeys))
        return false;
    }

    boolean this_present_groupKeys = true && this.isSetGroupKeys();
    boolean that_present_groupKeys = true && that.isSetGroupKeys();
    if (this_present_groupKeys || that_present_groupKeys) {
      if (!(this_present_groupKeys && that_present_groupKeys))
        return false;
      if (!this.groupKeys.equals(that.groupKeys))
        return false;
    }

    boolean this_present_globalKeys = true && this.isSetGlobalKeys();
    boolean that_present_globalKeys = true && that.isSetGlobalKeys();
    if (this_present_globalKeys || that_present_globalKeys) {
      if (!(this_present_globalKeys && that_present_globalKeys))
        return false;
      if (!this.globalKeys.equals(that.globalKeys))
        return false;
    }

    boolean this_present_crossKeys = true && this.isSetCrossKeys();
    boolean that_present_crossKeys = true && that.isSetCrossKeys();
    if (this_present_crossKeys || that_present_crossKeys) {
      if (!(this_present_crossKeys && that_present_crossKeys))
        return false;
      if (!this.crossKeys.equals(that.crossKeys))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_singleKeys = true && (isSetSingleKeys());
    list.add(present_singleKeys);
    if (present_singleKeys)
      list.add(singleKeys);

    boolean present_groupKeys = true && (isSetGroupKeys());
    list.add(present_groupKeys);
    if (present_groupKeys)
      list.add(groupKeys);

    boolean present_globalKeys = true && (isSetGlobalKeys());
    list.add(present_globalKeys);
    if (present_globalKeys)
      list.add(globalKeys);

    boolean present_crossKeys = true && (isSetCrossKeys());
    list.add(present_crossKeys);
    if (present_crossKeys)
      list.add(crossKeys);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetNewestSeqBatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSingleKeys()).compareTo(other.isSetSingleKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleKeys, other.singleKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupKeys()).compareTo(other.isSetGroupKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupKeys, other.groupKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlobalKeys()).compareTo(other.isSetGlobalKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalKeys, other.globalKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossKeys()).compareTo(other.isSetCrossKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossKeys, other.crossKeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetNewestSeqBatch(");
    boolean first = true;

    sb.append("singleKeys:");
    if (this.singleKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.singleKeys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupKeys:");
    if (this.groupKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.groupKeys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("globalKeys:");
    if (this.globalKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.globalKeys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossKeys:");
    if (this.crossKeys == null) {
      sb.append("null");
    } else {
      sb.append(this.crossKeys);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetNewestSeqBatchStandardSchemeFactory implements SchemeFactory {
    public GetNewestSeqBatchStandardScheme getScheme() {
      return new GetNewestSeqBatchStandardScheme();
    }
  }

  private static class GetNewestSeqBatchStandardScheme extends StandardScheme<GetNewestSeqBatch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetNewestSeqBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SINGLE_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list244 = iprot.readListBegin();
                struct.singleKeys = new ArrayList<String>(_list244.size);
                String _elem245;
                for (int _i246 = 0; _i246 < _list244.size; ++_i246)
                {
                  _elem245 = iprot.readString();
                  struct.singleKeys.add(_elem245);
                }
                iprot.readListEnd();
              }
              struct.setSingleKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list247 = iprot.readListBegin();
                struct.groupKeys = new ArrayList<String>(_list247.size);
                String _elem248;
                for (int _i249 = 0; _i249 < _list247.size; ++_i249)
                {
                  _elem248 = iprot.readString();
                  struct.groupKeys.add(_elem248);
                }
                iprot.readListEnd();
              }
              struct.setGroupKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GLOBAL_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                struct.globalKeys = new ArrayList<String>(_list250.size);
                String _elem251;
                for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                {
                  _elem251 = iprot.readString();
                  struct.globalKeys.add(_elem251);
                }
                iprot.readListEnd();
              }
              struct.setGlobalKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CROSS_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list253 = iprot.readListBegin();
                struct.crossKeys = new ArrayList<String>(_list253.size);
                String _elem254;
                for (int _i255 = 0; _i255 < _list253.size; ++_i255)
                {
                  _elem254 = iprot.readString();
                  struct.crossKeys.add(_elem254);
                }
                iprot.readListEnd();
              }
              struct.setCrossKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetNewestSeqBatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.singleKeys != null) {
        oprot.writeFieldBegin(SINGLE_KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.singleKeys.size()));
          for (String _iter256 : struct.singleKeys)
          {
            oprot.writeString(_iter256);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groupKeys != null) {
        oprot.writeFieldBegin(GROUP_KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.groupKeys.size()));
          for (String _iter257 : struct.groupKeys)
          {
            oprot.writeString(_iter257);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.globalKeys != null) {
        oprot.writeFieldBegin(GLOBAL_KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.globalKeys.size()));
          for (String _iter258 : struct.globalKeys)
          {
            oprot.writeString(_iter258);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.crossKeys != null) {
        oprot.writeFieldBegin(CROSS_KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.crossKeys.size()));
          for (String _iter259 : struct.crossKeys)
          {
            oprot.writeString(_iter259);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetNewestSeqBatchTupleSchemeFactory implements SchemeFactory {
    public GetNewestSeqBatchTupleScheme getScheme() {
      return new GetNewestSeqBatchTupleScheme();
    }
  }

  private static class GetNewestSeqBatchTupleScheme extends TupleScheme<GetNewestSeqBatch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetNewestSeqBatch struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSingleKeys()) {
        optionals.set(0);
      }
      if (struct.isSetGroupKeys()) {
        optionals.set(1);
      }
      if (struct.isSetGlobalKeys()) {
        optionals.set(2);
      }
      if (struct.isSetCrossKeys()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSingleKeys()) {
        {
          oprot.writeI32(struct.singleKeys.size());
          for (String _iter260 : struct.singleKeys)
          {
            oprot.writeString(_iter260);
          }
        }
      }
      if (struct.isSetGroupKeys()) {
        {
          oprot.writeI32(struct.groupKeys.size());
          for (String _iter261 : struct.groupKeys)
          {
            oprot.writeString(_iter261);
          }
        }
      }
      if (struct.isSetGlobalKeys()) {
        {
          oprot.writeI32(struct.globalKeys.size());
          for (String _iter262 : struct.globalKeys)
          {
            oprot.writeString(_iter262);
          }
        }
      }
      if (struct.isSetCrossKeys()) {
        {
          oprot.writeI32(struct.crossKeys.size());
          for (String _iter263 : struct.crossKeys)
          {
            oprot.writeString(_iter263);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetNewestSeqBatch struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list264 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.singleKeys = new ArrayList<String>(_list264.size);
          String _elem265;
          for (int _i266 = 0; _i266 < _list264.size; ++_i266)
          {
            _elem265 = iprot.readString();
            struct.singleKeys.add(_elem265);
          }
        }
        struct.setSingleKeysIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list267 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.groupKeys = new ArrayList<String>(_list267.size);
          String _elem268;
          for (int _i269 = 0; _i269 < _list267.size; ++_i269)
          {
            _elem268 = iprot.readString();
            struct.groupKeys.add(_elem268);
          }
        }
        struct.setGroupKeysIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list270 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.globalKeys = new ArrayList<String>(_list270.size);
          String _elem271;
          for (int _i272 = 0; _i272 < _list270.size; ++_i272)
          {
            _elem271 = iprot.readString();
            struct.globalKeys.add(_elem271);
          }
        }
        struct.setGlobalKeysIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list273 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.crossKeys = new ArrayList<String>(_list273.size);
          String _elem274;
          for (int _i275 = 0; _i275 < _list273.size; ++_i275)
          {
            _elem274 = iprot.readString();
            struct.crossKeys.add(_elem274);
          }
        }
        struct.setCrossKeysIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen.oasis_im.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-09-05")
public class ImmigrateSingleChat implements org.apache.thrift.TBase<ImmigrateSingleChat, ImmigrateSingleChat._Fields>, java.io.Serializable, Cloneable, Comparable<ImmigrateSingleChat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImmigrateSingleChat");

  private static final org.apache.thrift.protocol.TField UID1_FIELD_DESC = new org.apache.thrift.protocol.TField("uid1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UID2_FIELD_DESC = new org.apache.thrift.protocol.TField("uid2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField IMCLOUD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imcloudId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SETTING1_FIELD_DESC = new org.apache.thrift.protocol.TField("setting1", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SETTING2_FIELD_DESC = new org.apache.thrift.protocol.TField("setting2", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImmigrateSingleChatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImmigrateSingleChatTupleSchemeFactory());
  }

  public String uid1; // required
  public String uid2; // required
  public long createTime; // required
  public long imcloudId; // required
  public String setting1; // required
  public String setting2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID1((short)1, "uid1"),
    UID2((short)2, "uid2"),
    CREATE_TIME((short)3, "createTime"),
    IMCLOUD_ID((short)4, "imcloudId"),
    SETTING1((short)5, "setting1"),
    SETTING2((short)6, "setting2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID1
          return UID1;
        case 2: // UID2
          return UID2;
        case 3: // CREATE_TIME
          return CREATE_TIME;
        case 4: // IMCLOUD_ID
          return IMCLOUD_ID;
        case 5: // SETTING1
          return SETTING1;
        case 6: // SETTING2
          return SETTING2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __IMCLOUDID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID1, new org.apache.thrift.meta_data.FieldMetaData("uid1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID2, new org.apache.thrift.meta_data.FieldMetaData("uid2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IMCLOUD_ID, new org.apache.thrift.meta_data.FieldMetaData("imcloudId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SETTING1, new org.apache.thrift.meta_data.FieldMetaData("setting1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTING2, new org.apache.thrift.meta_data.FieldMetaData("setting2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImmigrateSingleChat.class, metaDataMap);
  }

  public ImmigrateSingleChat() {
  }

  public ImmigrateSingleChat(
    String uid1,
    String uid2,
    long createTime,
    long imcloudId,
    String setting1,
    String setting2)
  {
    this();
    this.uid1 = uid1;
    this.uid2 = uid2;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.imcloudId = imcloudId;
    setImcloudIdIsSet(true);
    this.setting1 = setting1;
    this.setting2 = setting2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImmigrateSingleChat(ImmigrateSingleChat other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid1()) {
      this.uid1 = other.uid1;
    }
    if (other.isSetUid2()) {
      this.uid2 = other.uid2;
    }
    this.createTime = other.createTime;
    this.imcloudId = other.imcloudId;
    if (other.isSetSetting1()) {
      this.setting1 = other.setting1;
    }
    if (other.isSetSetting2()) {
      this.setting2 = other.setting2;
    }
  }

  public ImmigrateSingleChat deepCopy() {
    return new ImmigrateSingleChat(this);
  }

  @Override
  public void clear() {
    this.uid1 = null;
    this.uid2 = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setImcloudIdIsSet(false);
    this.imcloudId = 0;
    this.setting1 = null;
    this.setting2 = null;
  }

  public String getUid1() {
    return this.uid1;
  }

  public ImmigrateSingleChat setUid1(String uid1) {
    this.uid1 = uid1;
    return this;
  }

  public void unsetUid1() {
    this.uid1 = null;
  }

  /** Returns true if field uid1 is set (has been assigned a value) and false otherwise */
  public boolean isSetUid1() {
    return this.uid1 != null;
  }

  public void setUid1IsSet(boolean value) {
    if (!value) {
      this.uid1 = null;
    }
  }

  public String getUid2() {
    return this.uid2;
  }

  public ImmigrateSingleChat setUid2(String uid2) {
    this.uid2 = uid2;
    return this;
  }

  public void unsetUid2() {
    this.uid2 = null;
  }

  /** Returns true if field uid2 is set (has been assigned a value) and false otherwise */
  public boolean isSetUid2() {
    return this.uid2 != null;
  }

  public void setUid2IsSet(boolean value) {
    if (!value) {
      this.uid2 = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public ImmigrateSingleChat setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getImcloudId() {
    return this.imcloudId;
  }

  public ImmigrateSingleChat setImcloudId(long imcloudId) {
    this.imcloudId = imcloudId;
    setImcloudIdIsSet(true);
    return this;
  }

  public void unsetImcloudId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMCLOUDID_ISSET_ID);
  }

  /** Returns true if field imcloudId is set (has been assigned a value) and false otherwise */
  public boolean isSetImcloudId() {
    return EncodingUtils.testBit(__isset_bitfield, __IMCLOUDID_ISSET_ID);
  }

  public void setImcloudIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMCLOUDID_ISSET_ID, value);
  }

  public String getSetting1() {
    return this.setting1;
  }

  public ImmigrateSingleChat setSetting1(String setting1) {
    this.setting1 = setting1;
    return this;
  }

  public void unsetSetting1() {
    this.setting1 = null;
  }

  /** Returns true if field setting1 is set (has been assigned a value) and false otherwise */
  public boolean isSetSetting1() {
    return this.setting1 != null;
  }

  public void setSetting1IsSet(boolean value) {
    if (!value) {
      this.setting1 = null;
    }
  }

  public String getSetting2() {
    return this.setting2;
  }

  public ImmigrateSingleChat setSetting2(String setting2) {
    this.setting2 = setting2;
    return this;
  }

  public void unsetSetting2() {
    this.setting2 = null;
  }

  /** Returns true if field setting2 is set (has been assigned a value) and false otherwise */
  public boolean isSetSetting2() {
    return this.setting2 != null;
  }

  public void setSetting2IsSet(boolean value) {
    if (!value) {
      this.setting2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID1:
      if (value == null) {
        unsetUid1();
      } else {
        setUid1((String)value);
      }
      break;

    case UID2:
      if (value == null) {
        unsetUid2();
      } else {
        setUid2((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case IMCLOUD_ID:
      if (value == null) {
        unsetImcloudId();
      } else {
        setImcloudId((Long)value);
      }
      break;

    case SETTING1:
      if (value == null) {
        unsetSetting1();
      } else {
        setSetting1((String)value);
      }
      break;

    case SETTING2:
      if (value == null) {
        unsetSetting2();
      } else {
        setSetting2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID1:
      return getUid1();

    case UID2:
      return getUid2();

    case CREATE_TIME:
      return getCreateTime();

    case IMCLOUD_ID:
      return getImcloudId();

    case SETTING1:
      return getSetting1();

    case SETTING2:
      return getSetting2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID1:
      return isSetUid1();
    case UID2:
      return isSetUid2();
    case CREATE_TIME:
      return isSetCreateTime();
    case IMCLOUD_ID:
      return isSetImcloudId();
    case SETTING1:
      return isSetSetting1();
    case SETTING2:
      return isSetSetting2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImmigrateSingleChat)
      return this.equals((ImmigrateSingleChat)that);
    return false;
  }

  public boolean equals(ImmigrateSingleChat that) {
    if (that == null)
      return false;

    boolean this_present_uid1 = true && this.isSetUid1();
    boolean that_present_uid1 = true && that.isSetUid1();
    if (this_present_uid1 || that_present_uid1) {
      if (!(this_present_uid1 && that_present_uid1))
        return false;
      if (!this.uid1.equals(that.uid1))
        return false;
    }

    boolean this_present_uid2 = true && this.isSetUid2();
    boolean that_present_uid2 = true && that.isSetUid2();
    if (this_present_uid2 || that_present_uid2) {
      if (!(this_present_uid2 && that_present_uid2))
        return false;
      if (!this.uid2.equals(that.uid2))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_imcloudId = true;
    boolean that_present_imcloudId = true;
    if (this_present_imcloudId || that_present_imcloudId) {
      if (!(this_present_imcloudId && that_present_imcloudId))
        return false;
      if (this.imcloudId != that.imcloudId)
        return false;
    }

    boolean this_present_setting1 = true && this.isSetSetting1();
    boolean that_present_setting1 = true && that.isSetSetting1();
    if (this_present_setting1 || that_present_setting1) {
      if (!(this_present_setting1 && that_present_setting1))
        return false;
      if (!this.setting1.equals(that.setting1))
        return false;
    }

    boolean this_present_setting2 = true && this.isSetSetting2();
    boolean that_present_setting2 = true && that.isSetSetting2();
    if (this_present_setting2 || that_present_setting2) {
      if (!(this_present_setting2 && that_present_setting2))
        return false;
      if (!this.setting2.equals(that.setting2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid1 = true && (isSetUid1());
    list.add(present_uid1);
    if (present_uid1)
      list.add(uid1);

    boolean present_uid2 = true && (isSetUid2());
    list.add(present_uid2);
    if (present_uid2)
      list.add(uid2);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_imcloudId = true;
    list.add(present_imcloudId);
    if (present_imcloudId)
      list.add(imcloudId);

    boolean present_setting1 = true && (isSetSetting1());
    list.add(present_setting1);
    if (present_setting1)
      list.add(setting1);

    boolean present_setting2 = true && (isSetSetting2());
    list.add(present_setting2);
    if (present_setting2)
      list.add(setting2);

    return list.hashCode();
  }

  @Override
  public int compareTo(ImmigrateSingleChat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid1()).compareTo(other.isSetUid1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid1, other.uid1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid2()).compareTo(other.isSetUid2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid2, other.uid2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImcloudId()).compareTo(other.isSetImcloudId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImcloudId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imcloudId, other.imcloudId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetting1()).compareTo(other.isSetSetting1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetting1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setting1, other.setting1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetting2()).compareTo(other.isSetSetting2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetting2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setting2, other.setting2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImmigrateSingleChat(");
    boolean first = true;

    sb.append("uid1:");
    if (this.uid1 == null) {
      sb.append("null");
    } else {
      sb.append(this.uid1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid2:");
    if (this.uid2 == null) {
      sb.append("null");
    } else {
      sb.append(this.uid2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imcloudId:");
    sb.append(this.imcloudId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("setting1:");
    if (this.setting1 == null) {
      sb.append("null");
    } else {
      sb.append(this.setting1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setting2:");
    if (this.setting2 == null) {
      sb.append("null");
    } else {
      sb.append(this.setting2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImmigrateSingleChatStandardSchemeFactory implements SchemeFactory {
    public ImmigrateSingleChatStandardScheme getScheme() {
      return new ImmigrateSingleChatStandardScheme();
    }
  }

  private static class ImmigrateSingleChatStandardScheme extends StandardScheme<ImmigrateSingleChat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImmigrateSingleChat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid1 = iprot.readString();
              struct.setUid1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UID2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid2 = iprot.readString();
              struct.setUid2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMCLOUD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.imcloudId = iprot.readI64();
              struct.setImcloudIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETTING1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.setting1 = iprot.readString();
              struct.setSetting1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SETTING2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.setting2 = iprot.readString();
              struct.setSetting2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImmigrateSingleChat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid1 != null) {
        oprot.writeFieldBegin(UID1_FIELD_DESC);
        oprot.writeString(struct.uid1);
        oprot.writeFieldEnd();
      }
      if (struct.uid2 != null) {
        oprot.writeFieldBegin(UID2_FIELD_DESC);
        oprot.writeString(struct.uid2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IMCLOUD_ID_FIELD_DESC);
      oprot.writeI64(struct.imcloudId);
      oprot.writeFieldEnd();
      if (struct.setting1 != null) {
        oprot.writeFieldBegin(SETTING1_FIELD_DESC);
        oprot.writeString(struct.setting1);
        oprot.writeFieldEnd();
      }
      if (struct.setting2 != null) {
        oprot.writeFieldBegin(SETTING2_FIELD_DESC);
        oprot.writeString(struct.setting2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImmigrateSingleChatTupleSchemeFactory implements SchemeFactory {
    public ImmigrateSingleChatTupleScheme getScheme() {
      return new ImmigrateSingleChatTupleScheme();
    }
  }

  private static class ImmigrateSingleChatTupleScheme extends TupleScheme<ImmigrateSingleChat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImmigrateSingleChat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid1()) {
        optionals.set(0);
      }
      if (struct.isSetUid2()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(2);
      }
      if (struct.isSetImcloudId()) {
        optionals.set(3);
      }
      if (struct.isSetSetting1()) {
        optionals.set(4);
      }
      if (struct.isSetSetting2()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUid1()) {
        oprot.writeString(struct.uid1);
      }
      if (struct.isSetUid2()) {
        oprot.writeString(struct.uid2);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetImcloudId()) {
        oprot.writeI64(struct.imcloudId);
      }
      if (struct.isSetSetting1()) {
        oprot.writeString(struct.setting1);
      }
      if (struct.isSetSetting2()) {
        oprot.writeString(struct.setting2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImmigrateSingleChat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.uid1 = iprot.readString();
        struct.setUid1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.uid2 = iprot.readString();
        struct.setUid2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.imcloudId = iprot.readI64();
        struct.setImcloudIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.setting1 = iprot.readString();
        struct.setSetting1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.setting2 = iprot.readString();
        struct.setSetting2IsSet(true);
      }
    }
  }

}

